"""Добавлены справочник тегов и профили владельцев

Revision ID: a5f7d64c9e0b
Revises: b11512e61fbb
Create Date: 2025-09-09 10:11:54.972516

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a5f7d64c9e0b'
down_revision: Union[str, Sequence[str], None] = 'b11512e61fbb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tag_references',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(length=100), nullable=False, comment='Ключ тега (например: owner_name, company_inn)'),
    sa.Column('label', sa.String(length=200), nullable=False, comment='Человекочитаемое название тега'),
    sa.Column('description', sa.Text(), nullable=True, comment='Подробное описание назначения тега'),
    sa.Column('category', sa.String(length=100), nullable=False, comment='Категория тега (owner, company, employee, system)'),
    sa.Column('data_type', sa.String(length=50), nullable=False, comment='Тип данных: text, email, date, number, select, textarea'),
    sa.Column('is_required', sa.Boolean(), nullable=True, comment='Обязательное ли поле'),
    sa.Column('is_system', sa.Boolean(), nullable=True, comment='Системный тег (автозаполняется)'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Активен ли тег для использования'),
    sa.Column('options', sa.JSON(), nullable=True, comment='Список опций для select полей'),
    sa.Column('validation_pattern', sa.String(length=500), nullable=True, comment='Regex паттерн для валидации'),
    sa.Column('validation_message', sa.String(length=200), nullable=True, comment='Сообщение об ошибке валидации'),
    sa.Column('sort_order', sa.Integer(), nullable=True, comment='Порядок сортировки в интерфейсе'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tag_references_category'), 'tag_references', ['category'], unique=False)
    op.create_index(op.f('ix_tag_references_id'), 'tag_references', ['id'], unique=False)
    op.create_index(op.f('ix_tag_references_key'), 'tag_references', ['key'], unique=True)
    op.create_table('owner_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='ID пользователя-владельца'),
    sa.Column('profile_name', sa.String(length=200), nullable=False, comment='Название профиля'),
    sa.Column('legal_type', sa.String(length=20), nullable=False, comment='Тип: individual (ФЛ) или legal (ЮЛ)'),
    sa.Column('profile_data', sa.JSON(), nullable=False, comment='Динамические поля профиля в формате {tag_key: value}'),
    sa.Column('active_tags', sa.JSON(), nullable=False, comment='Список активных тегов профиля'),
    sa.Column('is_complete', sa.Boolean(), nullable=True, comment='Заполнен ли профиль полностью'),
    sa.Column('is_public', sa.Boolean(), nullable=True, comment='Доступен ли профиль другим пользователям'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_owner_profiles_id'), 'owner_profiles', ['id'], unique=False)
    op.create_index(op.f('ix_owner_profiles_user_id'), 'owner_profiles', ['user_id'], unique=True)
    # Убираем удаление существующих таблиц - только добавляем новые
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # Удаляем только новые таблицы
    op.drop_index(op.f('ix_owner_profiles_user_id'), table_name='owner_profiles')
    op.drop_index(op.f('ix_owner_profiles_id'), table_name='owner_profiles')
    op.drop_table('owner_profiles')
    op.drop_index(op.f('ix_tag_references_key'), table_name='tag_references')
    op.drop_index(op.f('ix_tag_references_id'), table_name='tag_references')
    op.drop_index(op.f('ix_tag_references_category'), table_name='tag_references')
    op.drop_table('tag_references')
