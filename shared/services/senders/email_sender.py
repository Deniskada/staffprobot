"""Email –æ—Ç–ø—Ä–∞–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è StaffProBot."""

import smtplib
import ssl
from typing import Optional, Dict, Any
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timezone

from core.logging.logger import logger
from core.config.settings import settings
from domain.entities.notification import (
    Notification,
    NotificationType,
    NotificationPriority
)
from shared.templates.notifications import NotificationTemplateManager


class EmailNotificationSender:
    """–û—Ç–ø—Ä–∞–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Email (SMTP)."""
    
    def __init__(
        self,
        smtp_host: Optional[str] = None,
        smtp_port: Optional[int] = None,
        smtp_user: Optional[str] = None,
        smtp_password: Optional[str] = None,
        smtp_from_email: Optional[str] = None,
        smtp_from_name: Optional[str] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤—â–∏–∫–∞.
        
        Args:
            smtp_host: SMTP —Ö–æ—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–∑ settings)
            smtp_port: SMTP –ø–æ—Ä—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–∑ settings)
            smtp_user: SMTP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–∑ settings)
            smtp_password: SMTP –ø–∞—Ä–æ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–∑ settings)
            smtp_from_email: Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–∑ settings)
            smtp_from_name: –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–∑ settings)
        """
        self.smtp_host = smtp_host or settings.smtp_host
        self.smtp_port = smtp_port or settings.smtp_port
        self.smtp_user = smtp_user or settings.smtp_user
        self.smtp_password = smtp_password or settings.smtp_password
        self.smtp_from_email = smtp_from_email or settings.smtp_from_email or self.smtp_user
        self.smtp_from_name = smtp_from_name or settings.smtp_from_name
        self.smtp_use_tls = settings.smtp_use_tls
        self.smtp_use_ssl = settings.smtp_use_ssl
        self.smtp_timeout = settings.smtp_timeout
        
        self.max_retries = 3
        self.retry_delay = 2  # —Å–µ–∫—É–Ω–¥—ã
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not all([self.smtp_host, self.smtp_user, self.smtp_password, self.smtp_from_email]):
            logger.warning("Email sender not fully configured (missing SMTP credentials)")
    
    async def send_notification(
        self,
        notification: Notification,
        to_email: str,
        variables: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ Email.
        
        Args:
            notification: –û–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            variables: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not self._is_configured():
                logger.error("Email sender is not configured")
                return False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            template_vars = variables or notification.data or {}
            
            # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
            rendered = NotificationTemplateManager.render(
                notification_type=notification.type,
                channel=notification.channel,
                variables=template_vars
            )
            
            # –°–æ–∑–¥–∞–µ–º email —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._create_email_message(
                notification=notification,
                to_email=to_email,
                subject=rendered["title"],
                html_content=rendered["message"]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            success = await self._send_with_retry(
                to_email=to_email,
                message=message,
                notification=notification
            )
            
            if success:
                logger.info(
                    f"Email notification sent successfully",
                    notification_id=notification.id,
                    to_email=to_email,
                    type=notification.type.value
                )
            else:
                logger.error(
                    f"Failed to send email notification",
                    notification_id=notification.id,
                    to_email=to_email,
                    type=notification.type.value
                )
            
            return success
            
        except Exception as e:
            logger.error(
                f"Error sending email notification: {e}",
                notification_id=notification.id,
                to_email=to_email,
                error=str(e)
            )
            return False
    
    def _create_email_message(
        self,
        notification: Notification,
        to_email: str,
        subject: str,
        html_content: str
    ) -> MIMEMultipart:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ email —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            notification: –û–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            html_content: HTML –∫–æ–Ω—Ç–µ–Ω—Ç
            
        Returns:
            MIME —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –°–æ–∑–¥–∞–µ–º multipart —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = MIMEMultipart("alternative")
        message["Subject"] = self._format_subject(notification, subject)
        message["From"] = f"{self.smtp_from_name} <{self.smtp_from_email}>"
        message["To"] = to_email
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if notification.priority == NotificationPriority.URGENT:
            message["X-Priority"] = "1"
            message["Importance"] = "high"
        elif notification.priority == NotificationPriority.HIGH:
            message["X-Priority"] = "2"
            message["Importance"] = "high"
        
        # –°–æ–∑–¥–∞–µ–º plain text –≤–µ—Ä—Å–∏—é –∏–∑ HTML
        plain_text = self._html_to_plain(html_content)
        
        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ–±–µ –≤–µ—Ä—Å–∏–∏
        part_plain = MIMEText(plain_text, "plain", "utf-8")
        part_html = MIMEText(self._wrap_html(html_content, subject), "html", "utf-8")
        
        message.attach(part_plain)
        message.attach(part_html)
        
        return message
    
    def _format_subject(self, notification: Notification, subject: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã –ø–∏—Å—å–º–∞.
        
        Args:
            notification: –û–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            subject: –ë–∞–∑–æ–≤–∞—è —Ç–µ–º–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–∞
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö
        if notification.priority == NotificationPriority.URGENT:
            return f"üö® –°–†–û–ß–ù–û: {subject}"
        elif notification.priority == NotificationPriority.HIGH:
            return f"‚ö° –í–∞–∂–Ω–æ: {subject}"
        
        return subject
    
    def _html_to_plain(self, html: str) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HTML –≤ plain text (—É–ø—Ä–æ—â–µ–Ω–Ω–æ).
        
        Args:
            html: HTML –∫–æ–Ω—Ç–µ–Ω—Ç
            
        Returns:
            Plain text
        """
        import re
        
        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
        text = re.sub(r'<br\s*/?>', '\n', html)
        text = re.sub(r'<p.*?>', '\n', text)
        text = re.sub(r'</p>', '\n', text)
        text = re.sub(r'<h\d.*?>', '\n=== ', text)
        text = re.sub(r'</h\d>', ' ===\n', text)
        text = re.sub(r'<strong>(.*?)</strong>', r'\1', text)
        text = re.sub(r'<b>(.*?)</b>', r'\1', text)
        text = re.sub(r'<i>(.*?)</i>', r'\1', text)
        text = re.sub(r'<.*?>', '', text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\n\s*\n', '\n\n', text)
        text = text.strip()
        
        return text
    
    def _wrap_html(self, content: str, title: str) -> str:
        """
        –û–±–µ—Ä—Ç–∫–∞ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ email —à–∞–±–ª–æ–Ω.
        
        Args:
            content: HTML –∫–æ–Ω—Ç–µ–Ω—Ç
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
            
        Returns:
            –ü–æ–ª–Ω—ã–π HTML –¥–æ–∫—É–º–µ–Ω—Ç
        """
        return f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            background-color: #ffffff;
            border-radius: 8px;
            padding: 30px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        h1, h2 {{
            color: #2c3e50;
            margin-top: 0;
        }}
        .footer {{
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            font-size: 12px;
            color: #666;
            text-align: center;
        }}
        strong {{
            color: #2c3e50;
        }}
        code {{
            background-color: #f0f0f0;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
        }}
    </style>
</head>
<body>
    <div class="container">
        {content}
        <div class="footer">
            <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç <strong>StaffProBot</strong></p>
            <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ</p>
        </div>
    </div>
</body>
</html>
"""
    
    async def _send_with_retry(
        self,
        to_email: str,
        message: MIMEMultipart,
        notification: Notification
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.
        
        Args:
            to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            message: MIME —Å–æ–æ–±—â–µ–Ω–∏–µ
            notification: –û–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        import asyncio
        
        for attempt in range(self.max_retries):
            try:
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
                if self.smtp_use_ssl:
                    context = ssl.create_default_context()
                    server = smtplib.SMTP_SSL(
                        self.smtp_host,
                        self.smtp_port,
                        timeout=self.smtp_timeout,
                        context=context
                    )
                else:
                    server = smtplib.SMTP(
                        self.smtp_host,
                        self.smtp_port,
                        timeout=self.smtp_timeout
                    )
                    
                    if self.smtp_use_tls:
                        context = ssl.create_default_context()
                        server.starttls(context=context)
                
                # –õ–æ–≥–∏–Ω–∏–º—Å—è
                server.login(self.smtp_user, self.smtp_password)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                server.send_message(message)
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                server.quit()
                
                return True
                
            except smtplib.SMTPAuthenticationError as e:
                # –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                logger.error(
                    f"SMTP authentication failed",
                    smtp_user=self.smtp_user,
                    notification_id=notification.id,
                    error=str(e)
                )
                return False
                
            except smtplib.SMTPRecipientsRefused as e:
                # –ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                logger.error(
                    f"SMTP recipient refused",
                    to_email=to_email,
                    notification_id=notification.id,
                    error=str(e)
                )
                return False
                
            except (smtplib.SMTPServerDisconnected, smtplib.SMTPConnectError) as e:
                # –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º - –ø–æ–≤—Ç–æ—Ä—è–µ–º
                logger.warning(
                    f"SMTP connection error, attempt {attempt + 1}/{self.max_retries}",
                    notification_id=notification.id,
                    error=str(e)
                )
                
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(self.retry_delay * (attempt + 1))
                    continue
                else:
                    return False
                    
            except Exception as e:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                logger.error(
                    f"Unexpected error sending email",
                    to_email=to_email,
                    notification_id=notification.id,
                    error=str(e)
                )
                
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(self.retry_delay * (attempt + 1))
                    continue
                else:
                    return False
        
        return False
    
    def _is_configured(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Returns:
            True –µ—Å–ª–∏ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω
        """
        return all([
            self.smtp_host,
            self.smtp_user,
            self.smtp_password,
            self.smtp_from_email
        ])
    
    async def test_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É.
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            if not self._is_configured():
                logger.error("Email sender is not configured")
                return False
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            if self.smtp_use_ssl:
                context = ssl.create_default_context()
                server = smtplib.SMTP_SSL(
                    self.smtp_host,
                    self.smtp_port,
                    timeout=self.smtp_timeout,
                    context=context
                )
            else:
                server = smtplib.SMTP(
                    self.smtp_host,
                    self.smtp_port,
                    timeout=self.smtp_timeout
                )
                
                if self.smtp_use_tls:
                    context = ssl.create_default_context()
                    server.starttls(context=context)
            
            # –õ–æ–≥–∏–Ω–∏–º—Å—è
            server.login(self.smtp_user, self.smtp_password)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º
            server.quit()
            
            logger.info(f"Email SMTP connection successful: {self.smtp_host}:{self.smtp_port}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to connect to SMTP server: {e}", error=str(e))
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ç–ø—Ä–∞–≤—â–∏–∫–∞
_email_sender: Optional[EmailNotificationSender] = None


def get_email_sender() -> EmailNotificationSender:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Email –æ—Ç–ø—Ä–∞–≤—â–∏–∫–∞.
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä EmailNotificationSender
    """
    global _email_sender
    
    if _email_sender is None:
        _email_sender = EmailNotificationSender()
    
    return _email_sender

