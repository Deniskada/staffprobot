"""Telegram –æ—Ç–ø—Ä–∞–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è StaffProBot."""

from typing import Optional, Dict, Any
from datetime import datetime, timezone
from telegram import Bot
from telegram.error import TelegramError, BadRequest, Forbidden, NetworkError
from telegram.constants import ParseMode

from core.logging.logger import logger
from core.config.settings import settings
from domain.entities.notification import (
    Notification,
    NotificationType,
    NotificationStatus,
    NotificationPriority
)
from shared.templates.notifications import NotificationTemplateManager


class TelegramNotificationSender:
    """–û—Ç–ø—Ä–∞–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram."""
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    EMOJI_MAP = {
        # –°–º–µ–Ω—ã
        NotificationType.SHIFT_REMINDER: "‚è∞",
        NotificationType.SHIFT_CONFIRMED: "‚úÖ",
        NotificationType.SHIFT_CANCELLED: "‚ùå",
        NotificationType.SHIFT_STARTED: "üöÄ",
        NotificationType.SHIFT_COMPLETED: "üèÅ",
        
        # –î–æ–≥–æ–≤–æ—Ä—ã
        NotificationType.CONTRACT_SIGNED: "üìù",
        NotificationType.CONTRACT_TERMINATED: "üîö",
        NotificationType.CONTRACT_EXPIRING: "‚ö†Ô∏è",
        NotificationType.CONTRACT_UPDATED: "‚úèÔ∏è",
        
        # –û—Ç–∑—ã–≤—ã
        NotificationType.REVIEW_RECEIVED: "‚≠ê",
        NotificationType.REVIEW_MODERATED: "‚úì",
        NotificationType.APPEAL_SUBMITTED: "‚öñÔ∏è",
        NotificationType.APPEAL_DECISION: "üî®",
        
        # –ü–ª–∞—Ç–µ–∂–∏
        NotificationType.PAYMENT_DUE: "üí≥",
        NotificationType.PAYMENT_SUCCESS: "üí∞",
        NotificationType.PAYMENT_FAILED: "‚ö†Ô∏è",
        NotificationType.SUBSCRIPTION_EXPIRING: "‚è≥",
        NotificationType.SUBSCRIPTION_EXPIRED: "‚è∞",
        NotificationType.USAGE_LIMIT_WARNING: "üìä",
        NotificationType.USAGE_LIMIT_EXCEEDED: "üö´",
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ
        NotificationType.WELCOME: "üëã",
        NotificationType.PASSWORD_RESET: "üîê",
        NotificationType.ACCOUNT_SUSPENDED: "‚õî",
        NotificationType.ACCOUNT_ACTIVATED: "‚úÖ",
        NotificationType.SYSTEM_MAINTENANCE: "üîß",
        NotificationType.FEATURE_ANNOUNCEMENT: "üéâ"
    }
    
    def __init__(self, bot_token: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤—â–∏–∫–∞.
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ settings)
        """
        self.bot_token = bot_token or settings.telegram_bot_token
        if not self.bot_token:
            raise ValueError("Telegram bot token is not configured")
        
        self.bot = Bot(token=self.bot_token)
        self.max_retries = 3
        self.retry_delay = 2  # —Å–µ–∫—É–Ω–¥—ã
    
    async def send_notification(
        self,
        notification: Notification,
        telegram_id: int,
        variables: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.
        
        Args:
            notification: –û–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            telegram_id: Telegram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            variables: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ notification.data)
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            template_vars = variables or notification.data or {}
            
            # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
            rendered = NotificationTemplateManager.render(
                notification_type=notification.type,
                channel=notification.channel,
                variables=template_vars
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            message = self._format_message(
                notification=notification,
                title=rendered["title"],
                message=rendered["message"]
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º parse_mode (–∏—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è Telegram)
            parse_mode = ParseMode.HTML
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            success = await self._send_with_retry(
                telegram_id=telegram_id,
                message=message,
                parse_mode=parse_mode,
                notification=notification
            )
            
            if success:
                logger.info(
                    f"Telegram notification sent successfully",
                    notification_id=notification.id,
                    telegram_id=telegram_id,
                    type=notification.type.value
                )
            else:
                logger.error(
                    f"Failed to send Telegram notification",
                    notification_id=notification.id,
                    telegram_id=telegram_id,
                    type=notification.type.value
                )
            
            return success
            
        except Exception as e:
            logger.error(
                f"Error sending Telegram notification: {e}",
                notification_id=notification.id,
                telegram_id=telegram_id,
                error=str(e)
            )
            return False
    
    async def _send_with_retry(
        self,
        telegram_id: int,
        message: str,
        parse_mode: str,
        notification: Notification
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML/Markdown)
            notification: –û–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        import asyncio
        
        for attempt in range(self.max_retries):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.send_message(
                    chat_id=telegram_id,
                    text=message,
                    parse_mode=parse_mode,
                    disable_web_page_preview=True
                )
                
                return True
                
            except Forbidden as e:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                logger.warning(
                    f"User blocked the bot",
                    telegram_id=telegram_id,
                    notification_id=notification.id,
                    error=str(e)
                )
                return False
                
            except BadRequest as e:
                # –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π chat_id) - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                logger.warning(
                    f"Bad request to Telegram API",
                    telegram_id=telegram_id,
                    notification_id=notification.id,
                    error=str(e)
                )
                return False
                
            except NetworkError as e:
                # –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ø–æ–≤—Ç–æ—Ä—è–µ–º
                logger.warning(
                    f"Network error, attempt {attempt + 1}/{self.max_retries}",
                    telegram_id=telegram_id,
                    notification_id=notification.id,
                    error=str(e)
                )
                
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(self.retry_delay * (attempt + 1))
                    continue
                else:
                    return False
                    
            except TelegramError as e:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram API - –ø–æ–≤—Ç–æ—Ä—è–µ–º
                logger.warning(
                    f"Telegram API error, attempt {attempt + 1}/{self.max_retries}",
                    telegram_id=telegram_id,
                    notification_id=notification.id,
                    error=str(e)
                )
                
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(self.retry_delay * (attempt + 1))
                    continue
                else:
                    return False
                    
            except Exception as e:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
                logger.error(
                    f"Unexpected error sending Telegram message",
                    telegram_id=telegram_id,
                    notification_id=notification.id,
                    error=str(e)
                )
                return False
        
        return False
    
    def _format_message(
        self,
        notification: Notification,
        title: str,
        message: str
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram.
        
        Args:
            notification: –û–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        emoji = self.EMOJI_MAP.get(notification.type, "üì¢")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        priority_marker = ""
        if notification.priority == NotificationPriority.URGENT:
            priority_marker = "üö® <b>–°–†–û–ß–ù–û!</b>\n\n"
        elif notification.priority == NotificationPriority.HIGH:
            priority_marker = "‚ö° <b>–í–∞–∂–Ω–æ!</b>\n\n"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è HTML
        formatted_message = message.replace('\n', '\n')
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_message = (
            f"{priority_marker}"
            f"{emoji} <b>{title}</b>\n\n"
            f"{formatted_message}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if notification.priority in [NotificationPriority.URGENT, NotificationPriority.HIGH]:
            timestamp = datetime.now(timezone.utc).strftime("%H:%M:%S")
            final_message += f"\n\n<i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {timestamp} UTC</i>"
        
        return final_message
    
    async def send_bulk_notifications(
        self,
        notifications: list[tuple[Notification, int, Optional[Dict[str, Any]]]]
    ) -> Dict[str, Any]:
        """
        –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            notifications: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (notification, telegram_id, variables)
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {sent: int, failed: int, errors: list}
        """
        results = {
            "sent": 0,
            "failed": 0,
            "errors": []
        }
        
        for notification, telegram_id, variables in notifications:
            try:
                success = await self.send_notification(
                    notification=notification,
                    telegram_id=telegram_id,
                    variables=variables
                )
                
                if success:
                    results["sent"] += 1
                else:
                    results["failed"] += 1
                    results["errors"].append({
                        "notification_id": notification.id,
                        "telegram_id": telegram_id,
                        "reason": "Send failed"
                    })
                    
            except Exception as e:
                results["failed"] += 1
                results["errors"].append({
                    "notification_id": notification.id,
                    "telegram_id": telegram_id,
                    "reason": str(e)
                })
                
                logger.error(
                    f"Error in bulk notification send",
                    notification_id=notification.id,
                    telegram_id=telegram_id,
                    error=str(e)
                )
        
        logger.info(
            f"Bulk notification send completed",
            sent=results["sent"],
            failed=results["failed"],
            total=len(notifications)
        )
        
        return results
    
    async def test_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API.
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            bot_info = await self.bot.get_me()
            logger.info(f"Telegram bot connected: @{bot_info.username}")
            return True
        except Exception as e:
            logger.error(f"Failed to connect to Telegram API: {e}", error=str(e))
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ç–ø—Ä–∞–≤—â–∏–∫–∞
_telegram_sender: Optional[TelegramNotificationSender] = None


def get_telegram_sender() -> TelegramNotificationSender:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Telegram –æ—Ç–ø—Ä–∞–≤—â–∏–∫–∞.
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä TelegramNotificationSender
    """
    global _telegram_sender
    
    if _telegram_sender is None:
        _telegram_sender = TelegramNotificationSender()
    
    return _telegram_sender

