"""–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö (Tasks v2) –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TaskEntryV2 —É–≤–µ–¥–æ–º–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
–≤ Telegram, —á—Ç–æ–±—ã –æ–Ω–∏ –æ—Ç–∫—Ä—ã–ª–∏ ¬´üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏¬ª –∏ —É–≤–∏–¥–µ–ª–∏ –Ω–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã.
"""

from __future__ import annotations

from typing import Iterable

from core.celery.celery_app import celery_app
from core.logging.logger import logger


@celery_app.task(name="notify_tasks_updated")
def notify_tasks_updated(employee_ids: list[int] | tuple[int, ...]) -> int:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Å–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö.

    Args:
        employee_ids: —Å–ø–∏—Å–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö user_id —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    """
    try:
        from core.database.session import get_sync_session
        from sqlalchemy import select
        from domain.entities.user import User
        from shared.services.senders.telegram_sender import get_telegram_sender
        from domain.entities.notification import (
            Notification,
            NotificationType,
            NotificationChannel,
            NotificationPriority,
        )

        if not employee_ids:
            return 0

        session = get_sync_session()
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö telegram_id
            result = session.execute(select(User).where(User.id.in_(list(employee_ids))))
            users: Iterable[User] = result.scalars().all()

            sender = get_telegram_sender()
            sent_count = 0

            for u in users:
                if not u.telegram_id:
                    logger.info("Skip notify: user has no telegram_id", user_id=u.id)
                    continue

                # –ì–æ—Ç–æ–≤–∏–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
                notification = Notification(
                    user_id=u.id,
                    type=NotificationType.FEATURE_ANNOUNCEMENT,
                    channel=NotificationChannel.TELEGRAM,
                    priority=NotificationPriority.NORMAL,
                    title="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
                    message=(
                        "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ.\n\n"
                        "–û—Ç–∫—Ä–æ–π—Ç–µ ‚Äòüìù –ú–æ–∏ –∑–∞–¥–∞—á–∏‚Äô, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫."
                    ),
                )
                text = "üìã –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞. –û—Ç–∫—Ä–æ–π—Ç–µ ‚Äòüìù –ú–æ–∏ –∑–∞–¥–∞—á–∏‚Äô, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫."

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram, –º–∏–Ω—É—è —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                import asyncio
                loop = asyncio.new_event_loop()
                try:
                    asyncio.set_event_loop(loop)
                    success = loop.run_until_complete(sender._send_with_retry(
                        telegram_id=int(u.telegram_id),
                        message=text,
                        parse_mode="HTML",
                        notification=notification
                    ))
                    if success:
                        sent_count += 1
                finally:
                    loop.close()

            logger.info("Tasks updated notifications sent", total=sent_count)
            return sent_count
        finally:
            session.close()
    except Exception as e:
        logger.error("notify_tasks_updated failed", error=str(e))
        return 0


