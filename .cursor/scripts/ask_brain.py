#!/usr/bin/env python3
"""
Project Brain - Python Client –¥–ª—è Cursor
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python ask_brain.py "–í–∞—à –≤–æ–ø—Ä–æ—Å"
"""
import sys
import requests
import json
from typing import Dict, Any

BRAIN_URL = "http://192.168.2.107:8003/api/query"
PROJECT = "staffprobot"

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
class Colors:
    GREEN = '\033[0;32m'
    BLUE = '\033[0;34m'
    YELLOW = '\033[1;33m'
    RED = '\033[0;31m'
    BOLD = '\033[1m'
    NC = '\033[0m'  # No Color

def ask_brain(query: str) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Project Brain"""
    try:
        response = requests.post(
            BRAIN_URL,
            json={"query": query, "project": PROJECT},
            timeout=60
        )
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}{Colors.NC}")
        print(f"\n{Colors.YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API –∑–∞–ø—É—â–µ–Ω:{Colors.NC}")
        print("  docker compose -f docker-compose.local.yml ps")
        sys.exit(1)

def print_answer(data: Dict[str, Any]):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞"""
    answer = data.get('answer', '')
    sources = data.get('sources', [])
    processing_time = data.get('processing_time', 0)
    
    if not answer:
        print(f"{Colors.YELLOW}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç{Colors.NC}")
        print(f"\n–û—Ç–≤–µ—Ç API:")
        print(json.dumps(data, indent=2, ensure_ascii=False))
        return
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
    print(f"\n{Colors.GREEN}{answer}{Colors.NC}")
    print()
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"{Colors.BLUE}üìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}{Colors.NC}")
    print(f"{Colors.BLUE}‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}s{Colors.NC}")
    
    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    if sources and len(sources) > 0:
        print(f"\n{Colors.BOLD}üîù –¢–æ–ø-3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞:{Colors.NC}")
        for i, source in enumerate(sources[:3], 1):
            file = source.get('file', 'unknown')
            lines = source.get('lines', '?')
            score = source.get('score', 0)
            print(f"  {i}. {file} (—Å—Ç—Ä–æ–∫–∏ {lines}) - score: {score:.2f}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print(f"{Colors.YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {sys.argv[0]} \"–í–∞—à –≤–æ–ø—Ä–æ—Å\"{Colors.NC}")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print(f"  python {sys.argv[0]} \"–ì–¥–µ —Ñ—É–Ω–∫—Ü–∏—è start_shift?\"")
        print(f"  python {sys.argv[0]} \"API endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞\"")
        print(f"  python {sys.argv[0]} \"–ü–æ–ª—è –º–æ–¥–µ–ª–∏ User\"")
        sys.exit(1)
    
    query = " ".join(sys.argv[1:])
    
    print(f"{Colors.BLUE}ü§ñ –°–ø—Ä–∞—à–∏–≤–∞—é Project Brain...{Colors.NC}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    result = ask_brain(query)
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
    print_answer(result)

if __name__ == "__main__":
    main()

