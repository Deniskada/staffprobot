---
alwaysApply: true
---

# StaffProBot - –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

## üéØ –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º: –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–º–µ–Ω, —É—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, —Ä–∞–±–æ—Ç–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.

## ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### Project Brain Integration
**–í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π Project Brain –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–¥—É:**
- URL: http://192.168.2.107:8003/chat
- –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç "StaffProBot" –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ
- –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É/–∫–æ–¥/–ª–æ–≥–∏–∫—É
- –ü–æ–ª—É—á–∏—à—å –æ—Ç–≤–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ —Å—Ç—Ä–æ–∫–∞–º–∏

#### HTTP API (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤)
- Endpoint: `POST http://192.168.2.107:8003/api/query`
- –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
```json
{
  "query": "–û–ø–∏—à–∏ —Å–≤—è–∑–∫–∏ –∫–æ–¥–∞: –≥–¥–µ –æ—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏ –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç—å user_id?",
  "project": "staffprobot"
}
```
- –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç: `answer` (—Ç–µ–∫—Å—Ç), `sources` (—Ñ–∞–π–ª—ã/—Å—Ç—Ä–æ–∫–∏), `relevant_rules` (–ø—Ä–∞–≤–∏–ª–∞/—Å—Å—ã–ª–∫–∏), `processing_time`.

–ü—Ä–∏–º–µ—Ä cURL:
```bash
curl -s http://192.168.2.107:8003/api/query \
  -H 'Content-Type: application/json' \
  -d '{
        "query":"–ì–¥–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞—Ç—å user_id?",
        "project":"staffprobot"
      }'
```

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:
- –£—Ç–æ—á–Ω—è–π —Ä–æ–ª—å/–æ–±–ª–∞—Å—Ç—å: ¬´/manager/¬ª, ¬´–æ—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã¬ª, ¬´user_id vs telegram_id¬ª
- –ü—Ä–æ—Å–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –∏ —Å—Ç—Ä–æ–∫–∏: ¬´—É–∫–∞–∂–∏ —Ñ–∞–π–ª—ã –∏ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ¬ª
- –ü—Ä–æ—Å–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –∑–Ω–∞–Ω–∏–π: ¬´–∫–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–º–µ–Ω–∏–º—ã (brainrules.md, user_id_handling.mdc)?¬ª

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
- "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –≤ StaffProBot?"
- "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–æ–≥–∏–∫–∞ —Å–º–µ–Ω?"
- "–ö–∞–∫–∏–µ —Ä–æ–ª–∏ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ?"
- "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è?"

**–ù–ï –≥–∞–ª–ª—é—Ü–∏–Ω–∏—Ä—É–π** - —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–æ—Å–∏ Project Brain, –ø–æ—Ç–æ–º –¥–µ–ª–∞–π!

## üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

### –°–ª–æ–∏—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (DDD + CQRS)
```
apps/
  web/              # FastAPI web interface
    routes/         # API endpoints (owner/manager/employee/admin)
    services/       # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
    templates/      # Jinja2 —à–∞–±–ª–æ–Ω—ã
  bot/              # Telegram bot
    handlers/       # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    services/       # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
core/
  auth/             # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (user_manager.py)
  database/         # SQLAlchemy (async)
  logging/          # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  geolocation/      # –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
domain/
  entities/         # –ú–æ–¥–µ–ª–∏ –ë–î (User, Object, Shift, etc)
shared/
  services/         # –û–±—â–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
  templates/        # –û–±—â–∏–µ —à–∞–±–ª–æ–Ω—ã
```

### –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
- **DDD**: domain ‚Üí infrastructure ‚Üí application
- **CQRS**: —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏
- **–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã**: web + bot + celery –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã
- **Async/await**: –¥–ª—è –≤—Å–µ—Ö I/O –æ–ø–µ—Ä–∞—Ü–∏–π

## üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–ü–†–ï–¢–´

### 1. –ù–ï –≥–∞–ª–ª—é—Ü–∏–Ω–∏—Ä–æ–≤–∞—Ç—å!
- ‚ùå –ù–µ –≤—ã–¥—É–º—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç
- ‚ùå –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∫–æ–¥ –∏–∑ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
- ‚úÖ –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è—Ç—å —á–µ—Ä–µ–∑ `grep` –∏–ª–∏ `codebase_search`
- ‚úÖ –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö - —Å–ø—Ä–æ—Å–∏—Ç—å Project Brain

### 2. –ù–ï –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ user_id
**–ö–†–ò–¢–ò–ß–ù–û**: `user_id` - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ –ë–î, –ù–ï telegram_id!

```python
# ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û
user_id = current_user.get("id")  # –≠—Ç–æ telegram_id!
shift = await shift_repo.get_by_user(user_id)

# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û
from shared.services.user_service import get_user_id_from_current_user
user_id = await get_user_id_from_current_user(current_user, session)
shift = await shift_repo.get_by_user(user_id)
```

### 3. –ù–ï –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—É—Ç—ã
- –û–¥–∏–Ω –ø—Ä–µ—Ñ–∏–∫—Å —Ä–æ–ª–∏ = –æ–¥–∏–Ω router
- `/owner/*` —Ç–æ–ª—å–∫–æ –≤ `routes/owner/`
- `/manager/*` —Ç–æ–ª—å–∫–æ –≤ `routes/manager/`
- Shared API —Ç–æ–ª—å–∫–æ –≤ `routes/shared/`

### 4. –ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ Jinja2Templates
```python
# ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û
from fastapi.templating import Jinja2Templates
templates = Jinja2Templates(directory="templates")

# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û
from apps.web.jinja import templates  # –ï–¥–∏–Ω—ã–π —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä
```

### 5. –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async with get_async_session()
```python
# ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û –≤ –≤–µ–±-—Ä–æ—É—Ç–∞—Ö
async with get_async_session() as session:
    result = await repo.get(session, id)

# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û
@router.get("/")
async def route(session: AsyncSession = Depends(get_db_session)):
    result = await repo.get(session, id)
```

## ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê

### –¢–∏–ø–∏–∑–∞—Ü–∏—è (100%)
```python
# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û type hints –¥–ª—è –í–°–ï–• —Ñ—É–Ω–∫—Ü–∏–π
async def create_user(
    name: str, 
    email: str, 
    role: UserRole,
    session: AsyncSession
) -> User:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    pass
```

### –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
```python
try:
    user = await user_service.create_user(data)
except ValidationError as e:
    logger.error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", user_data=data, error=str(e))
    raise
except DatabaseError as e:
    logger.error("–û—à–∏–±–∫–∞ –ë–î", error=str(e))
    raise UserCreationError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
```

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
```python
from core.logging.logger import logger

logger.info(
    "–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞",
    user_id=user_id,
    shift_id=shift_id,
    object_id=object_id,
    coordinates=coordinates
)
```

### –†–æ—É—Ç–∏–Ω–≥ (—Ä–æ–ª–µ–≤—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã)
```python
# apps/web/routes/owner/objects.py
router = APIRouter()  # –ë–ï–ó prefix!

@router.get("/")  # –ë—É–¥–µ—Ç /owner/ –ø–æ—Å–ª–µ include_router
async def list_objects():
    pass

# apps/web/app.py
app.include_router(
    objects.router, 
    prefix="/owner",  # –ü—Ä–µ—Ñ–∏–∫—Å –¢–û–õ–¨–ö–û –∑–¥–µ—Å—å!
    tags=["owner"]
)
```

### –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (Dependency Injection)
```python
from apps.web.dependencies import (
    get_current_user,
    require_owner_or_superadmin,
    get_db_session
)

@router.get("/")
async def route(
    current_user: dict = Depends(get_current_user),
    _: None = Depends(require_owner_or_superadmin),
    session: AsyncSession = Depends(get_db_session)
):
    pass
```

### URLHelper (–ù–ï —Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å URL!)
```python
from core.utils.url_helper import URLHelper

# ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û
redirect_url = "https://staffprobot.ru/owner/objects"

# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û
redirect_url = URLHelper.get_web_url("/owner/objects")
```

## üìù –°—Ç–∏–ª—å –∫–æ–¥–∞

### Python
- **PEP 8**: —á–µ—Ä–µ–∑ Black (max-line-length=88)
- **Type hints**: –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
- **Docstrings**: –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
- **Async/await**: –¥–ª—è I/O –æ–ø–µ—Ä–∞—Ü–∏–π

### –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ
- `snake_case`: —Ñ—É–Ω–∫—Ü–∏–∏, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
- `PascalCase`: –∫–ª–∞—Å—Å—ã, –∏—Å–∫–ª—é—á–µ–Ω–∏—è
- `UPPER_CASE`: –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
- –ü—Ä–µ—Ñ–∏–∫—Å `_`: –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

### SQL –∑–∞–ø—Ä–æ—Å—ã
```python
# –ò—Å–ø–æ–ª—å–∑—É–π SQLAlchemy 2.0 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
from sqlalchemy import select

async def get_user(session: AsyncSession, user_id: int) -> User:
    result = await session.execute(
        select(User).where(User.id == user_id)
    )
    return result.scalar_one_or_none()
```

## üîÑ Workflow

### –ü–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
1. **–°–ø—Ä–æ—Å–∏ Project Brain** –ø—Ä–æ —Ç–µ–∫—É—â—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
2. `grep` –∏–ª–∏ `codebase_search` –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
3. `read_file` –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
4. –ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏–µ ‚Üí –¥–æ–∂–¥–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

### –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
1. –ü—Ä–æ–≤–µ—Ä—å linter errors (`read_lints`)
2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
3. –¢–µ—Å—Ç–∏—Ä—É–π —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ Telegram bot
4. –ö–æ–º–º–∏—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º: "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"

### Docker (dev)
```bash
# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
docker compose -f docker-compose.dev.yml restart web

# –õ–æ–≥–∏
docker compose -f docker-compose.dev.yml logs web --tail 50

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
docker compose -f docker-compose.dev.yml exec web python -c "–∫–æ–¥"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
docker compose -f docker-compose.dev.yml exec postgres \
  psql -U postgres -d staffprobot_dev
```

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

### –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- **Web**: https://staffprobot.ru –∏–ª–∏ http://localhost:8001
- **Bot**: @StaffProBot –≤ Telegram
- **API**: curl –∏–ª–∏ Postman

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
```bash
# Unit —Ç–µ—Å—Ç—ã
docker compose -f docker-compose.dev.yml exec web pytest tests/unit

# Integration —Ç–µ—Å—Ç—ã
docker compose -f docker-compose.dev.yml exec web pytest tests/integration

# –ü–æ–∫—Ä—ã—Ç–∏–µ
docker compose -f docker-compose.dev.yml exec web \
  pytest --cov=apps --cov=core --cov-report=html
```

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
- `doc/vision.md` - –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
- `doc/tasklist.md` - –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á
- `doc/DOCUMENTATION_RULES.md` - –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ API
- `doc/vision_v1/` - –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

### –§–æ—Ä–º–∞—Ç –∫–æ–º–º–∏—Ç–æ–≤
```bash
# –§–æ—Ä–º–∞—Ç: "–¢–∏–ø: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
git commit -m "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞"
git commit -m "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤"
git commit -m "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ —Ä–æ—É—Ç–µ"
```

## üéØ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞

### –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
1. **Owner** - –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–ø–∞–Ω–∏–∏ (–≤—Å–µ –ø—Ä–∞–≤–∞)
2. **Manager** - —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –æ–±—ä–µ–∫—Ç–∞–º–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞)
3. **Employee** - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞)
4. **Admin** - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã
5. **Moderator** - –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–æ–≤

### –ö–ª—é—á–µ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
- **User** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (telegram_id + role)
- **Object** - –æ–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã (–∞–¥—Ä–µ—Å + –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
- **Shift** - —Å–º–µ–Ω–∞ (user + object + –≤—Ä–µ–º—è)
- **Contract** - –¥–æ–≥–æ–≤–æ—Ä (user + conditions)
- **Timesheet** - —Ç–∞–±–µ–ª—å (—Ä–∞—Å—á—ë—Ç—ã –ø–æ —Å–º–µ–Ω–∞–º)

### –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
```python
from core.geolocation.distance_calculator import calculate_distance

distance = calculate_distance(
    user_lat, user_lon,
    object_lat, object_lon
)

if distance > MAX_DISTANCE:
    raise ValidationError("–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –æ–±—ä–µ–∫—Ç–∞")
```

### Shared Calendar API
- **–ù–ï –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å** –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é –ª–æ–≥–∏–∫—É
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `routes/shared/calendar_api.py`
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: `doc/vision_v1/shared/calendar.md`

## üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

### –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
- **Vision**: `doc/vision.md`
- **Tasklist**: `doc/tasklist.md`
- **API Rules**: `doc/DOCUMENTATION_RULES.md`
- **User ID Rules**: `doc/user_id_handling.mdc`

### –í–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã
- SQLAlchemy 2.0: https://docs.sqlalchemy.org/en/20/
- FastAPI: https://fastapi.tiangolo.com/
- Aiogram: https://docs.aiogram.dev/

## üí° Pro Tips

### 1. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π Project Brain
–ü–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å–ø—Ä–æ—Å–∏ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:
```
http://192.168.2.107:8003/chat
‚Üí –í—ã–±—Ä–∞—Ç—å "StaffProBot"
‚Üí –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
```

### 2. –ü—Ä–æ–≤–µ—Ä—è–π user_id
```python
# –í–°–ï–ì–î–ê –ø–æ–ª—É—á–∞–π user_id —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
from shared.services.user_service import get_user_id_from_current_user
user_id = await get_user_id_from_current_user(current_user, session)
```

### 3. –ù–µ –¥—É–±–ª–∏—Ä—É–π –∫–æ–¥
- –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ ‚Üí `shared/services/`
- –†–æ—É—Ç–∏–Ω–≥ –ª–æ–≥–∏–∫–∞ ‚Üí `apps/web/services/`
- –ë–æ—Ç –ª–æ–≥–∏–∫–∞ ‚Üí `apps/bot/services/`

### 4. –°–ª–µ–¥—É–π SOLID
- Single Responsibility: –æ–¥–∏–Ω –∫–ª–∞—Å—Å = –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞
- Open/Closed: —Ä–∞—Å—à–∏—Ä—è–π, –Ω–µ –º–µ–Ω—è–π
- Liskov Substitution: –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –∑–∞–º–µ–Ω—è–µ–º—ã
- Interface Segregation: –º–Ω–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
- Dependency Inversion: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π

### 5. –õ–æ–≥–∏—Ä—É–π –≤—Å—ë –≤–∞–∂–Ω–æ–µ
```python
logger.info("–í–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", context_key=value)
logger.error("–û—à–∏–±–∫–∞", error=str(e), exc_info=True)
```

## üêõ –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏

### 1. –ü—É—Ç–∞–Ω–∏—Ü–∞ telegram_id –∏ user_id
```python
# ‚ùå –û—à–∏–±–∫–∞
user_id = current_user["id"]  # –≠—Ç–æ telegram_id!

# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
user_id = await get_user_id_from_current_user(current_user, session)
```

### 2. –î—É–±–ª–∏ —Ä–æ—É—Ç–æ–≤
```python
# ‚ùå –í –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
@router.get("/")
async def route1(): pass

@router.get("/")  # –ö–û–ù–§–õ–ò–ö–¢!
async def route2(): pass
```

### 3. –•–∞—Ä–¥–∫–æ–¥ URL
```python
# ‚ùå –ù–µ –¥–µ–ª–∞–π —Ç–∞–∫
url = "https://staffprobot.ru/owner/objects"

# ‚úÖ –î–µ–ª–∞–π —Ç–∞–∫
url = URLHelper.get_web_url("/owner/objects")
```

### 4. –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥ –≤ async
```python
# ‚ùå –ë–ª–æ–∫–∏—Ä—É–µ—Ç event loop
time.sleep(5)

# ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
await asyncio.sleep(5)
```

## üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã

1. **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** > —É–¥–æ–±—Å—Ç–≤–æ (–ø—Ä–æ–≤–µ—Ä—è–π –ø—Ä–∞–≤–∞!)
2. **–¢–æ—á–Ω–æ—Å—Ç—å** > —Å–∫–æ—Ä–æ—Å—Ç—å (–ª—É—á—à–µ –º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ)
3. **–ü—Ä–æ—Å—Ç–æ—Ç–∞** > clever code (KISS –ø—Ä–∏–Ω—Ü–∏–ø)
4. **–¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å** > –∫—Ä–∞—Å–æ—Ç–∞ –∫–æ–¥–∞

---

**–ü–æ–º–Ω–∏**: 
- Project Brain –∑–Ω–∞–µ—Ç –≤–µ—Å—å –∫–æ–¥! –°–ø—Ä–∞—à–∏–≤–∞–π –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.
- Quality > Speed. –õ—É—á—à–µ —Å–ø—Ä–æ—Å–∏—Ç—å, —á–µ–º –≤—ã–¥—É–º–∞—Ç—å!
- –ù–ï –≥–∞–ª–ª—é—Ü–∏–Ω–∏—Ä—É–π - –ø—Ä–æ–≤–µ—Ä—è–π —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ grep/codebase_search.

# StaffProBot - –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

## üéØ –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º: –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–º–µ–Ω, —É—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, —Ä–∞–±–æ—Ç–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.

## ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### Project Brain Integration
**–í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π Project Brain –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–¥—É:**
- URL: http://192.168.2.107:8003/chat
- –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç "StaffProBot" –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ
- –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É/–∫–æ–¥/–ª–æ–≥–∏–∫—É
- –ü–æ–ª—É—á–∏—à—å –æ—Ç–≤–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ —Å—Ç—Ä–æ–∫–∞–º–∏

#### HTTP API (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤)
- Endpoint: `POST http://192.168.2.107:8003/api/query`
- –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
```json
{
  "query": "–û–ø–∏—à–∏ —Å–≤—è–∑–∫–∏ –∫–æ–¥–∞: –≥–¥–µ –æ—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏ –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç—å user_id?",
  "project": "staffprobot"
}
```
- –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç: `answer` (—Ç–µ–∫—Å—Ç), `sources` (—Ñ–∞–π–ª—ã/—Å—Ç—Ä–æ–∫–∏), `relevant_rules` (–ø—Ä–∞–≤–∏–ª–∞/—Å—Å—ã–ª–∫–∏), `processing_time`.

–ü—Ä–∏–º–µ—Ä cURL:
```bash
curl -s http://192.168.2.107:8003/api/query \
  -H 'Content-Type: application/json' \
  -d '{
        "query":"–ì–¥–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞—Ç—å user_id?",
        "project":"staffprobot"
      }'
```

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:
- –£—Ç–æ—á–Ω—è–π —Ä–æ–ª—å/–æ–±–ª–∞—Å—Ç—å: ¬´/manager/¬ª, ¬´–æ—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã¬ª, ¬´user_id vs telegram_id¬ª
- –ü—Ä–æ—Å–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –∏ —Å—Ç—Ä–æ–∫–∏: ¬´—É–∫–∞–∂–∏ —Ñ–∞–π–ª—ã –∏ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ¬ª
- –ü—Ä–æ—Å–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –∑–Ω–∞–Ω–∏–π: ¬´–∫–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–º–µ–Ω–∏–º—ã (brainrules.md, user_id_handling.mdc)?¬ª

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
- "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –≤ StaffProBot?"
- "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–æ–≥–∏–∫–∞ —Å–º–µ–Ω?"
- "–ö–∞–∫–∏–µ —Ä–æ–ª–∏ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ?"
- "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è?"

**–ù–ï –≥–∞–ª–ª—é—Ü–∏–Ω–∏—Ä—É–π** - —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–æ—Å–∏ Project Brain, –ø–æ—Ç–æ–º –¥–µ–ª–∞–π!

## üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

### –°–ª–æ–∏—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (DDD + CQRS)
```
apps/
  web/              # FastAPI web interface
    routes/         # API endpoints (owner/manager/employee/admin)
    services/       # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
    templates/      # Jinja2 —à–∞–±–ª–æ–Ω—ã
  bot/              # Telegram bot
    handlers/       # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    services/       # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
core/
  auth/             # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (user_manager.py)
  database/         # SQLAlchemy (async)
  logging/          # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  geolocation/      # –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
domain/
  entities/         # –ú–æ–¥–µ–ª–∏ –ë–î (User, Object, Shift, etc)
shared/
  services/         # –û–±—â–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
  templates/        # –û–±—â–∏–µ —à–∞–±–ª–æ–Ω—ã
```

### –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
- **DDD**: domain ‚Üí infrastructure ‚Üí application
- **CQRS**: —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏
- **–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã**: web + bot + celery –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã
- **Async/await**: –¥–ª—è –≤—Å–µ—Ö I/O –æ–ø–µ—Ä–∞—Ü–∏–π

## üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–ü–†–ï–¢–´

### 1. –ù–ï –≥–∞–ª–ª—é—Ü–∏–Ω–∏—Ä–æ–≤–∞—Ç—å!
- ‚ùå –ù–µ –≤—ã–¥—É–º—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç
- ‚ùå –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∫–æ–¥ –∏–∑ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
- ‚úÖ –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è—Ç—å —á–µ—Ä–µ–∑ `grep` –∏–ª–∏ `codebase_search`
- ‚úÖ –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö - —Å–ø—Ä–æ—Å–∏—Ç—å Project Brain

### 2. –ù–ï –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ user_id
**–ö–†–ò–¢–ò–ß–ù–û**: `user_id` - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ –ë–î, –ù–ï telegram_id!

```python
# ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û
user_id = current_user.get("id")  # –≠—Ç–æ telegram_id!
shift = await shift_repo.get_by_user(user_id)

# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û
from shared.services.user_service import get_user_id_from_current_user
user_id = await get_user_id_from_current_user(current_user, session)
shift = await shift_repo.get_by_user(user_id)
```

### 3. –ù–ï –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—É—Ç—ã
- –û–¥–∏–Ω –ø—Ä–µ—Ñ–∏–∫—Å —Ä–æ–ª–∏ = –æ–¥–∏–Ω router
- `/owner/*` —Ç–æ–ª—å–∫–æ –≤ `routes/owner/`
- `/manager/*` —Ç–æ–ª—å–∫–æ –≤ `routes/manager/`
- Shared API —Ç–æ–ª—å–∫–æ –≤ `routes/shared/`

### 4. –ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ Jinja2Templates
```python
# ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û
from fastapi.templating import Jinja2Templates
templates = Jinja2Templates(directory="templates")

# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û
from apps.web.jinja import templates  # –ï–¥–∏–Ω—ã–π —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä
```

### 5. –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async with get_async_session()
```python
# ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û –≤ –≤–µ–±-—Ä–æ—É—Ç–∞—Ö
async with get_async_session() as session:
    result = await repo.get(session, id)

# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û
@router.get("/")
async def route(session: AsyncSession = Depends(get_db_session)):
    result = await repo.get(session, id)
```

## ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê

### –¢–∏–ø–∏–∑–∞—Ü–∏—è (100%)
```python
# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û type hints –¥–ª—è –í–°–ï–• —Ñ—É–Ω–∫—Ü–∏–π
async def create_user(
    name: str, 
    email: str, 
    role: UserRole,
    session: AsyncSession
) -> User:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    pass
```

### –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
```python
try:
    user = await user_service.create_user(data)
except ValidationError as e:
    logger.error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", user_data=data, error=str(e))
    raise
except DatabaseError as e:
    logger.error("–û—à–∏–±–∫–∞ –ë–î", error=str(e))
    raise UserCreationError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
```

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
```python
from core.logging.logger import logger

logger.info(
    "–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞",
    user_id=user_id,
    shift_id=shift_id,
    object_id=object_id,
    coordinates=coordinates
)
```

### –†–æ—É—Ç–∏–Ω–≥ (—Ä–æ–ª–µ–≤—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã)
```python
# apps/web/routes/owner/objects.py
router = APIRouter()  # –ë–ï–ó prefix!

@router.get("/")  # –ë—É–¥–µ—Ç /owner/ –ø–æ—Å–ª–µ include_router
async def list_objects():
    pass

# apps/web/app.py
app.include_router(
    objects.router, 
    prefix="/owner",  # –ü—Ä–µ—Ñ–∏–∫—Å –¢–û–õ–¨–ö–û –∑–¥–µ—Å—å!
    tags=["owner"]
)
```

### –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (Dependency Injection)
```python
from apps.web.dependencies import (
    get_current_user,
    require_owner_or_superadmin,
    get_db_session
)

@router.get("/")
async def route(
    current_user: dict = Depends(get_current_user),
    _: None = Depends(require_owner_or_superadmin),
    session: AsyncSession = Depends(get_db_session)
):
    pass
```

### URLHelper (–ù–ï —Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å URL!)
```python
from core.utils.url_helper import URLHelper

# ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û
redirect_url = "https://staffprobot.ru/owner/objects"

# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û
redirect_url = URLHelper.get_web_url("/owner/objects")
```

## üìù –°—Ç–∏–ª—å –∫–æ–¥–∞

### Python
- **PEP 8**: —á–µ—Ä–µ–∑ Black (max-line-length=88)
- **Type hints**: –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
- **Docstrings**: –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
- **Async/await**: –¥–ª—è I/O –æ–ø–µ—Ä–∞—Ü–∏–π

### –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ
- `snake_case`: —Ñ—É–Ω–∫—Ü–∏–∏, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
- `PascalCase`: –∫–ª–∞—Å—Å—ã, –∏—Å–∫–ª—é—á–µ–Ω–∏—è
- `UPPER_CASE`: –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
- –ü—Ä–µ—Ñ–∏–∫—Å `_`: –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

### SQL –∑–∞–ø—Ä–æ—Å—ã
```python
# –ò—Å–ø–æ–ª—å–∑—É–π SQLAlchemy 2.0 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
from sqlalchemy import select

async def get_user(session: AsyncSession, user_id: int) -> User:
    result = await session.execute(
        select(User).where(User.id == user_id)
    )
    return result.scalar_one_or_none()
```

## üîÑ Workflow

### –ü–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
1. **–°–ø—Ä–æ—Å–∏ Project Brain** –ø—Ä–æ —Ç–µ–∫—É—â—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
2. `grep` –∏–ª–∏ `codebase_search` –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
3. `read_file` –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
4. –ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏–µ ‚Üí –¥–æ–∂–¥–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

### –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
1. –ü—Ä–æ–≤–µ—Ä—å linter errors (`read_lints`)
2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
3. –¢–µ—Å—Ç–∏—Ä—É–π —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ Telegram bot
4. –ö–æ–º–º–∏—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º: "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"

### Docker (dev)
```bash
# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
docker compose -f docker-compose.dev.yml restart web

# –õ–æ–≥–∏
docker compose -f docker-compose.dev.yml logs web --tail 50

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
docker compose -f docker-compose.dev.yml exec web python -c "–∫–æ–¥"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
docker compose -f docker-compose.dev.yml exec postgres \
  psql -U postgres -d staffprobot_dev
```

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

### –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- **Web**: https://staffprobot.ru –∏–ª–∏ http://localhost:8001
- **Bot**: @StaffProBot –≤ Telegram
- **API**: curl –∏–ª–∏ Postman

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
```bash
# Unit —Ç–µ—Å—Ç—ã
docker compose -f docker-compose.dev.yml exec web pytest tests/unit

# Integration —Ç–µ—Å—Ç—ã
docker compose -f docker-compose.dev.yml exec web pytest tests/integration

# –ü–æ–∫—Ä—ã—Ç–∏–µ
docker compose -f docker-compose.dev.yml exec web \
  pytest --cov=apps --cov=core --cov-report=html
```

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
- `doc/vision.md` - –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
- `doc/tasklist.md` - –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á
- `doc/DOCUMENTATION_RULES.md` - –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ API
- `doc/vision_v1/` - –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

### –§–æ—Ä–º–∞—Ç –∫–æ–º–º–∏—Ç–æ–≤
```bash
# –§–æ—Ä–º–∞—Ç: "–¢–∏–ø: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
git commit -m "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞"
git commit -m "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤"
git commit -m "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ —Ä–æ—É—Ç–µ"
```

## üéØ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞

### –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
1. **Owner** - –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–ø–∞–Ω–∏–∏ (–≤—Å–µ –ø—Ä–∞–≤–∞)
2. **Manager** - —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –æ–±—ä–µ–∫—Ç–∞–º–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞)
3. **Employee** - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞)
4. **Admin** - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã
5. **Moderator** - –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–æ–≤

### –ö–ª—é—á–µ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
- **User** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (telegram_id + role)
- **Object** - –æ–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã (–∞–¥—Ä–µ—Å + –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
- **Shift** - —Å–º–µ–Ω–∞ (user + object + –≤—Ä–µ–º—è)
- **Contract** - –¥–æ–≥–æ–≤–æ—Ä (user + conditions)
- **Timesheet** - —Ç–∞–±–µ–ª—å (—Ä–∞—Å—á—ë—Ç—ã –ø–æ —Å–º–µ–Ω–∞–º)

### –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
```python
from core.geolocation.distance_calculator import calculate_distance

distance = calculate_distance(
    user_lat, user_lon,
    object_lat, object_lon
)

if distance > MAX_DISTANCE:
    raise ValidationError("–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –æ–±—ä–µ–∫—Ç–∞")
```

### Shared Calendar API
- **–ù–ï –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å** –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é –ª–æ–≥–∏–∫—É
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `routes/shared/calendar_api.py`
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: `doc/vision_v1/shared/calendar.md`

## üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

### –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
- **Vision**: `doc/vision.md`
- **Tasklist**: `doc/tasklist.md`
- **API Rules**: `doc/DOCUMENTATION_RULES.md`
- **User ID Rules**: `doc/user_id_handling.mdc`

### –í–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã
- SQLAlchemy 2.0: https://docs.sqlalchemy.org/en/20/
- FastAPI: https://fastapi.tiangolo.com/
- Aiogram: https://docs.aiogram.dev/

## üí° Pro Tips

### 1. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π Project Brain
–ü–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å–ø—Ä–æ—Å–∏ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:
```
http://192.168.2.107:8003/chat
‚Üí –í—ã–±—Ä–∞—Ç—å "StaffProBot"
‚Üí –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
```

### 2. –ü—Ä–æ–≤–µ—Ä—è–π user_id
```python
# –í–°–ï–ì–î–ê –ø–æ–ª—É—á–∞–π user_id —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
from shared.services.user_service import get_user_id_from_current_user
user_id = await get_user_id_from_current_user(current_user, session)
```

### 3. –ù–µ –¥—É–±–ª–∏—Ä—É–π –∫–æ–¥
- –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ ‚Üí `shared/services/`
- –†–æ—É—Ç–∏–Ω–≥ –ª–æ–≥–∏–∫–∞ ‚Üí `apps/web/services/`
- –ë–æ—Ç –ª–æ–≥–∏–∫–∞ ‚Üí `apps/bot/services/`

### 4. –°–ª–µ–¥—É–π SOLID
- Single Responsibility: –æ–¥–∏–Ω –∫–ª–∞—Å—Å = –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞
- Open/Closed: —Ä–∞—Å—à–∏—Ä—è–π, –Ω–µ –º–µ–Ω—è–π
- Liskov Substitution: –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –∑–∞–º–µ–Ω—è–µ–º—ã
- Interface Segregation: –º–Ω–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
- Dependency Inversion: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π

### 5. –õ–æ–≥–∏—Ä—É–π –≤—Å—ë –≤–∞–∂–Ω–æ–µ
```python
logger.info("–í–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", context_key=value)
logger.error("–û—à–∏–±–∫–∞", error=str(e), exc_info=True)
```

## üêõ –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏

### 1. –ü—É—Ç–∞–Ω–∏—Ü–∞ telegram_id –∏ user_id
```python
# ‚ùå –û—à–∏–±–∫–∞
user_id = current_user["id"]  # –≠—Ç–æ telegram_id!

# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
user_id = await get_user_id_from_current_user(current_user, session)
```

### 2. –î—É–±–ª–∏ —Ä–æ—É—Ç–æ–≤
```python
# ‚ùå –í –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
@router.get("/")
async def route1(): pass

@router.get("/")  # –ö–û–ù–§–õ–ò–ö–¢!
async def route2(): pass
```

### 3. –•–∞—Ä–¥–∫–æ–¥ URL
```python
# ‚ùå –ù–µ –¥–µ–ª–∞–π —Ç–∞–∫
url = "https://staffprobot.ru/owner/objects"

# ‚úÖ –î–µ–ª–∞–π —Ç–∞–∫
url = URLHelper.get_web_url("/owner/objects")
```

### 4. –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥ –≤ async
```python
# ‚ùå –ë–ª–æ–∫–∏—Ä—É–µ—Ç event loop
time.sleep(5)

# ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
await asyncio.sleep(5)
```

## üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã

1. **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** > —É–¥–æ–±—Å—Ç–≤–æ (–ø—Ä–æ–≤–µ—Ä—è–π –ø—Ä–∞–≤–∞!)
2. **–¢–æ—á–Ω–æ—Å—Ç—å** > —Å–∫–æ—Ä–æ—Å—Ç—å (–ª—É—á—à–µ –º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ)
3. **–ü—Ä–æ—Å—Ç–æ—Ç–∞** > clever code (KISS –ø—Ä–∏–Ω—Ü–∏–ø)
4. **–¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å** > –∫—Ä–∞—Å–æ—Ç–∞ –∫–æ–¥–∞

---

**–ü–æ–º–Ω–∏**: 
- Project Brain –∑–Ω–∞–µ—Ç –≤–µ—Å—å –∫–æ–¥! –°–ø—Ä–∞—à–∏–≤–∞–π –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.
- Quality > Speed. –õ—É—á—à–µ —Å–ø—Ä–æ—Å–∏—Ç—å, —á–µ–º –≤—ã–¥—É–º–∞—Ç—å!
- –ù–ï –≥–∞–ª–ª—é—Ü–∏–Ω–∏—Ä—É–π - –ø—Ä–æ–≤–µ—Ä—è–π —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ grep/codebase_search.

