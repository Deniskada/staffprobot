version: '3.8'

services:
  postgres:
    image: postgis/postgis:15-3.3
    container_name: staffprobot_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-staffprobot_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    env_file:
      - .env.prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-staffprobot_prod}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - staffprobot_prod_network

  redis:
    image: redis:7-alpine
    container_name: staffprobot_redis_prod
    volumes:
      - redis_prod_data:/data
    env_file:
      - .env.prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - staffprobot_prod_network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: staffprobot_rabbitmq_prod
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_prod_data:/var/lib/rabbitmq
    env_file:
      - .env.prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - staffprobot_prod_network

  bot:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: staffprobot_bot_prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - ENVIRONMENT=production
      - DEBUG=false
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    env_file:
      - .env.prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - staffprobot_prod_network
    command: ["python", "main.py"]

  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: staffprobot_celery_worker_prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - ENVIRONMENT=production
      - DEBUG=false
    env_file:
      - .env.prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - staffprobot_prod_network
    command: ["python", "scripts/start_celery_worker.py"]

  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: staffprobot_celery_beat_prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - ENVIRONMENT=production
      - DEBUG=false
    env_file:
      - .env.prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - celery_beat_prod_data:/tmp
    networks:
      - staffprobot_prod_network
    command: ["python", "scripts/start_celery_beat.py"]

  prometheus:
    image: prom/prometheus:latest
    container_name: staffprobot_prometheus_prod
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - staffprobot_prod_network

  grafana:
    image: grafana/grafana:latest
    container_name: staffprobot_grafana_prod
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./docker/monitoring/grafana/provisioning:/etc/grafana/provisioning
    env_file:
      - .env.prod
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - staffprobot_prod_network

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  rabbitmq_prod_data:
    driver: local
  celery_beat_prod_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local

networks:
  staffprobot_prod_network:
    driver: bridge
    name: staffprobot_prod_network


