#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏
"""

import sys
import os
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from core.geolocation.distance_calculator import DistanceCalculator
from core.geolocation.location_validator import LocationValidator
from core.config.settings import settings


def test_distance_calculator():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π."""
    print("üßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DistanceCalculator")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ú–æ—Å–∫–≤–æ–π –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–æ–º
    moscow = "55.7558,37.6176"
    spb = "59.9311,30.3609"
    
    distance = DistanceCalculator.calculate_distance_between_points(moscow, spb)
    print(f"üìç –ú–æ—Å–∫–≤–∞ ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥: {distance:.0f} –º–µ—Ç—Ä–æ–≤ ({distance/1000:.1f} –∫–º)")
    
    # –¢–µ—Å—Ç 2: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –±–ª–∏–∑–∫–∏–º–∏ —Ç–æ—á–∫–∞–º–∏
    point1 = "55.7558,37.6176"
    point2 = "55.7558,37.6177"  # –†–∞–∑–Ω–∏—Ü–∞ –≤ 1 –º–µ—Ç—Ä –ø–æ –¥–æ–ª–≥–æ—Ç–µ
    
    distance = DistanceCalculator.calculate_distance_between_points(point1, point2)
    print(f"üìç –ë–ª–∏–∑–∫–∏–µ —Ç–æ—á–∫–∏: {distance:.2f} –º–µ—Ç—Ä–æ–≤")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—É–ª—ã –ì–∞–≤–µ—Ä—Å–∏–Ω–∞
    lat1, lon1 = 55.7558, 37.6176
    lat2, lon2 = 59.9311, 30.3609
    
    distance = DistanceCalculator.haversine_distance(lat1, lon1, lat2, lon2)
    print(f"üìç –§–æ—Ä–º—É–ª–∞ –ì–∞–≤–µ—Ä—Å–∏–Ω–∞: {distance:.0f} –º–µ—Ç—Ä–æ–≤")
    
    print()


def test_location_validator():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LocationValidator")
    print("=" * 50)
    
    validator = LocationValidator(max_distance_meters=100)
    
    # –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    coords = "55.7558,37.6176"
    result = validator.validate_coordinates(coords)
    print(f"üìç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç '{coords}': {'‚úÖ' if result['valid'] else '‚ùå'}")
    if not result['valid']:
        print(f"   –û—à–∏–±–∫–∞: {result['error']}")
    
    # –¢–µ—Å—Ç 2: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
    low_precision = "55.7,37.6"
    result = validator.validate_coordinates(low_precision)
    print(f"üìç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç '{low_precision}': {'‚úÖ' if result['valid'] else '‚ùå'}")
    if not result['valid']:
        print(f"   –û—à–∏–±–∫–∞: {result['error']}")
    
    # –¢–µ—Å—Ç 3: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    invalid = "invalid_coordinates"
    result = validator.validate_coordinates(invalid)
    print(f"üìç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç '{invalid}': {'‚úÖ' if result['valid'] else '‚ùå'}")
    if not result['valid']:
        print(f"   –û—à–∏–±–∫–∞: {result['error']}")
    
    print()


def test_shift_location_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–º–µ–Ω."""
    print("üè¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–º–µ–Ω")
    print("=" * 50)
    
    validator = LocationValidator(max_distance_meters=100)
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    user_coords = "55.7558,37.6176"
    object_coords = "55.7558,37.6177"  # –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ
    
    result = validator.validate_shift_location(user_coords, object_coords)
    print(f"üìç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–ª–∏–∑–∫–æ –∫ –æ–±—ä–µ–∫—Ç—É: {'‚úÖ' if result['valid'] else '‚ùå'}")
    if result['valid']:
        print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {result['distance_meters']} –º")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result['message']}")
    else:
        print(f"   –û—à–∏–±–∫–∞: {result['error']}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
    user_coords = "55.7558,37.6176"
    object_coords = "59.9311,30.3609"  # –î–∞–ª–µ–∫–æ
    
    result = validator.validate_shift_location(user_coords, object_coords)
    print(f"üìç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª–µ–∫–æ –æ—Ç –æ–±—ä–µ–∫—Ç–∞: {'‚úÖ' if result['valid'] else '‚ùå'}")
    if result['valid']:
        print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {result['distance_meters']} –º")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result['message']}")
    else:
        print(f"   –û—à–∏–±–∫–∞: {result['error']}")
        print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {result['distance_meters']} –º")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ: {result['max_distance_meters']} –º")
    
    print()


def test_settings():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
    print("=" * 50)
    
    print(f"üìç –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {settings.max_distance_meters} –º–µ—Ç—Ä–æ–≤")
    print(f"üìç –¢—Ä–µ–±—É–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {settings.location_accuracy_meters} –º–µ—Ç—Ä–æ–≤")
    
    validator = LocationValidator()
    requirements = validator.get_location_requirements()
    
    print(f"üìç –§–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {requirements['coordinate_format']}")
    print(f"üìç –¢—Ä–µ–±—É–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {requirements['precision_required']}")
    print(f"üìç –ü—Ä–∏–º–µ—Ä—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:")
    for name, coords in requirements['examples'].items():
        print(f"   ‚Ä¢ {name}: {coords}")
    
    print()


def test_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —ç–∫–≤–∞—Ç–æ—Ä–µ
    equator = "0.0,0.0"
    result = DistanceCalculator.parse_coordinates(equator)
    print(f"üìç –≠–∫–≤–∞—Ç–æ—Ä (0,0): {'‚úÖ' if result else '‚ùå'}")
    if result:
        print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result}")
    
    # –¢–µ—Å—Ç 2: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –ø–æ–ª—é—Å–∞—Ö
    north_pole = "90.0,0.0"
    result = DistanceCalculator.parse_coordinates(north_pole)
    print(f"üìç –°–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—é—Å (90,0): {'‚úÖ' if result else '‚ùå'}")
    if result:
        print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result}")
    
    # –¢–µ—Å—Ç 3: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω—ã –¥–∞—Ç
    date_line = "0.0,180.0"
    result = DistanceCalculator.parse_coordinates(date_line)
    print(f"üìç –õ–∏–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω—ã –¥–∞—Ç (0,180): {'‚úÖ' if result else '‚ùå'}")
    if result:
        print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result}")
    
    # –¢–µ—Å—Ç 4: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–∫–≤–∞—Ç–æ—Ä–æ–º –∏ –ø–æ–ª—é—Å–æ–º
    distance = DistanceCalculator.calculate_distance_between_points(equator, north_pole)
    print(f"üìç –≠–∫–≤–∞—Ç–æ—Ä ‚Üí –°–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—é—Å: {distance:.0f} –º–µ—Ç—Ä–æ–≤ ({distance/1000:.1f} –∫–º)")
    
    print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏")
    print("=" * 60)
    print()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        test_distance_calculator()
        test_location_validator()
        test_shift_location_validation()
        test_settings()
        test_edge_cases()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print()
        print("üí° –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –±–æ—Ç–µ!")
        print("üìç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç:")
        print("   ‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–º–µ–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞—Ö–æ–¥—è—Å—å —Ä—è–¥–æ–º —Å –æ–±—ä–µ–∫—Ç–∞–º–∏")
        print("   ‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å GPS —Ç–æ—á–Ω–æ—Å—Ç—å—é")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
