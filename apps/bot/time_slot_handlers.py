"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤."""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler
from datetime import datetime, date, time, timedelta
from core.logging.logger import logger
from apps.bot.services.time_slot_service import TimeSlotService
from apps.bot.services.schedule_service import ScheduleService
from apps.bot.services.object_service import ObjectService
from core.state.user_state_manager import UserStateManager


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_OBJECT, SELECT_DATE, SELECT_TIMESLOT, SELECT_INTERVAL, CONFIRM_BOOKING = range(5)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤
CREATE_SLOT_OBJECT, CREATE_SLOT_DATE, CREATE_SLOT_TIME, CREATE_SLOT_RATE, CREATE_SLOT_CONFIRM = range(5, 10)


class TimeSlotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        self.time_slot_service = TimeSlotService()
        self.schedule_service = ScheduleService()
        self.object_service = ObjectService()
        self.state_manager = UserStateManager()
        logger.info("TimeSlotHandlers initialized")
    
    async def show_timeslot_planning_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ç–∞–π–º-—Å–ª–æ—Ç—ã."""
        try:
            user_id = update.effective_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_objects = self.object_service.get_user_objects(user_id)
            
            if not user_objects:
                await update.callback_query.edit_message_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω.\n"
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üè¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç'."
                )
                return ConversationHandler.END
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
            keyboard = []
            for obj in user_objects:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üè¢ {obj['name']} ({obj['working_hours']})", 
                        callback_data=f"select_object_{obj['id']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_timeslot")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = "üìÖ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω —á–µ—Ä–µ–∑ —Ç–∞–π–º-—Å–ª–æ—Ç—ã*\n\n" \
                   "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:"
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            
            return SELECT_OBJECT
            
        except Exception as e:
            logger.error(f"Error showing timeslot planning menu: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")
            return ConversationHandler.END
    
    async def handle_object_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞."""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "cancel_timeslot":
                return await self.cancel_timeslot_planning(update, context)
                return ConversationHandler.END
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞
            object_id = int(query.data.split('_')[-1])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['selected_object_id'] = object_id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
            object_info = self.object_service.get_object_by_id(object_id)
            if not object_info:
                await query.edit_message_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã
            keyboard = [
                [
                    InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="date_today"),
                    InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="date_tomorrow")
                ],
                [
                    InlineKeyboardButton("üìÖ –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", callback_data="date_day_after")
                ],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_timeslot")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = f"üè¢ *–û–±—ä–µ–∫—Ç:* {object_info['name']}\n" \
                   f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:"
            
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return SELECT_DATE
            
        except Exception as e:
            logger.error(f"Error handling object selection: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞")
            return ConversationHandler.END
    
    async def handle_date_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã."""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "cancel_timeslot":
                return await self.cancel_timeslot_planning(update, context)
                return ConversationHandler.END
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            today = date.today()
            if query.data == "date_today":
                selected_date = today
            elif query.data == "date_tomorrow":
                selected_date = today + timedelta(days=1)
            elif query.data == "date_day_after":
                selected_date = today + timedelta(days=2)
            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞")
                return ConversationHandler.END
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['selected_date'] = selected_date
            
            object_id = context.user_data.get('selected_object_id')
            if not object_id:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã
            available_slots = await self.schedule_service.get_available_time_slots_for_date(
                object_id, selected_date
            )
            
            if not available_slots['success']:
                await query.edit_message_text(
                    f"‚ùå {available_slots['error']}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã."
                )
                return ConversationHandler.END
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã
            keyboard = []
            for slot in available_slots['available_slots']:
                slot_text = f"üïê {slot['start_time']}-{slot['end_time']}"
                if slot['is_additional']:
                    slot_text += " ‚≠ê"
                if slot['max_employees'] > 1:
                    slot_text += f" üë•{slot['max_employees']}"
                
                keyboard.append([
                    InlineKeyboardButton(
                        slot_text, 
                        callback_data=f"select_slot_{slot['id']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_timeslot")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = f"üìÖ *–î–∞—Ç–∞:* {selected_date.strftime('%d.%m.%Y')}\n" \
                   f"üè¢ *–û–±—ä–µ–∫—Ç:* {self.object_service.get_object_by_id(object_id)['name']}\n\n" \
                   f"üïê *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã:*\n" \
                   f"‚≠ê - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã\n" \
                   f"üë• - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n" \
                   f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º-—Å–ª–æ—Ç:"
            
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return SELECT_TIMESLOT
            
        except Exception as e:
            logger.error(f"Error handling date selection: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã")
            return ConversationHandler.END
    
    async def handle_timeslot_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞–π–º-—Å–ª–æ—Ç–∞."""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "cancel_timeslot":
                return await self.cancel_timeslot_planning(update, context)
                return ConversationHandler.END
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–π–º-—Å–ª–æ—Ç–∞
            timeslot_id = int(query.data.split('_')[-1])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['selected_timeslot_id'] = timeslot_id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º-—Å–ª–æ—Ç–µ
            object_id = context.user_data.get('selected_object_id')
            selected_date = context.user_data.get('selected_date')
            
            available_slots = await self.schedule_service.get_available_time_slots_for_date(
                object_id, selected_date
            )
            
            if not available_slots['success']:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤")
                return ConversationHandler.END
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
            selected_slot = None
            for slot in available_slots['available_slots']:
                if slot['id'] == timeslot_id:
                    selected_slot = slot
                    break
            
            if not selected_slot:
                await query.edit_message_text("‚ùå –¢–∞–π–º-—Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            keyboard = []
            for interval in selected_slot['available_intervals']:
                duration_text = f"({interval['duration_hours']}—á)"
                keyboard.append([
                    InlineKeyboardButton(
                        f"üïê {interval['start']}-{interval['end']} {duration_text}", 
                        callback_data=f"select_interval_{interval['start']}_{interval['end']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_timeslot")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = f"üïê *–¢–∞–π–º-—Å–ª–æ—Ç:* {selected_slot['start_time']}-{selected_slot['end_time']}\n" \
                   f"üí∞ *–°—Ç–∞–≤–∫–∞:* {selected_slot['hourly_rate']}‚ÇΩ/—á–∞—Å\n" \
                   f"üë• *–ú–∞–∫—Å. —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:* {selected_slot['max_employees']}\n\n" \
                   f"üìÖ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:*\n" \
                   f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:"
            
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return SELECT_INTERVAL
            
        except Exception as e:
            logger.error(f"Error handling timeslot selection: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º-—Å–ª–æ—Ç–∞")
            return ConversationHandler.END
    
    async def handle_interval_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "cancel_timeslot":
                return await self.cancel_timeslot_planning(update, context)
                return ConversationHandler.END
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            parts = query.data.split('_')
            start_time_str = parts[-2]
            end_time_str = parts[-1]
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            start_time = datetime.strptime(start_time_str, '%H:%M').time()
            end_time = datetime.strptime(end_time_str, '%H:%M').time()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['selected_start_time'] = start_time
            context.user_data['selected_end_time'] = end_time
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            object_id = context.user_data.get('selected_object_id')
            selected_date = context.user_data.get('selected_date')
            timeslot_id = context.user_data.get('selected_timeslot_id')
            
            object_info = self.object_service.get_object_by_id(object_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º-—Å–ª–æ—Ç–µ –¥–ª—è —Å—Ç–∞–≤–∫–∏
            available_slots = await self.schedule_service.get_available_time_slots_for_date(
                object_id, selected_date
            )
            
            hourly_rate = None
            if available_slots['success']:
                for slot in available_slots['available_slots']:
                    if slot['id'] == timeslot_id:
                        hourly_rate = slot['hourly_rate']
                        break
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ–ø–ª–∞—Ç—É
            duration_hours = round(
                (end_time.hour * 3600 + end_time.minute * 60 - 
                 start_time.hour * 3600 - start_time.minute * 60) / 3600, 2
            )
            
            total_payment = hourly_rate * duration_hours if hourly_rate else 0
            
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_booking"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_timeslot")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = f"üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã*\n\n" \
                   f"üè¢ *–û–±—ä–µ–∫—Ç:* {object_info['name']}\n" \
                   f"üìÖ *–î–∞—Ç–∞:* {selected_date.strftime('%d.%m.%Y')}\n" \
                   f"üïê *–í—Ä–µ–º—è:* {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}\n" \
                   f"‚è±Ô∏è *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {duration_hours} —á\n" \
                   f"üí∞ *–°—Ç–∞–≤–∫–∞:* {hourly_rate}‚ÇΩ/—á–∞—Å\n" \
                   f"üíµ *–û–ø–ª–∞—Ç–∞:* {total_payment}‚ÇΩ\n\n" \
                   f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã:"
            
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return CONFIRM_BOOKING
            
        except Exception as e:
            logger.error(f"Error handling interval selection: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
            return ConversationHandler.END
    
    async def confirm_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞."""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "cancel_timeslot":
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            user_id = update.effective_user.id
            timeslot_id = context.user_data.get('selected_timeslot_id')
            start_time = context.user_data.get('selected_start_time')
            end_time = context.user_data.get('selected_end_time')
            
            if not all([timeslot_id, start_time, end_time]):
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return ConversationHandler.END
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–º–µ–Ω—É
            result = await self.schedule_service.create_scheduled_shift_from_timeslot(
                user_id, timeslot_id, start_time, end_time
            )
            
            if result['success']:
                keyboard = [
                    [InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="plan_another_shift")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"‚úÖ {result['message']}\n\n"
                    f"–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!",
                    reply_markup=reply_markup
                )
            else:
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n{result['error']}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏."
                )
                return SELECT_INTERVAL
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error confirming booking: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return ConversationHandler.END
    
    async def cancel_scheduled_shift(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–º–µ–Ω—É."""
        try:
            query = update.callback_query
            await query.answer()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–º–µ–Ω—ã –∏–∑ callback_data
            shift_id = int(query.data.split('_')[-1])
            
            # –û—Ç–º–µ–Ω—è–µ–º —Å–º–µ–Ω—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            result = await self.schedule_service.cancel_scheduled_shift(shift_id, update.effective_user.id)
            
            if result['success']:
                await query.edit_message_text(
                    f"‚úÖ –°–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"üìÖ –î–∞—Ç–∞: {result.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"üïê –í—Ä–µ–º—è: {result.get('time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
                )
            else:
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã:\n{result['error']}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
                )
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error canceling scheduled shift: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã")
            return ConversationHandler.END
    
    async def cancel_timeslot_planning(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        try:
            query = update.callback_query
            await query.answer()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = query.from_user
            
            # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            response = f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:
"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="open_shift"),
                    InlineKeyboardButton("üîö –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="close_shift")
                ],
                [
                    InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É", callback_data="schedule_shift"),
                    InlineKeyboardButton("üìã –ú–æ–∏ –ø–ª–∞–Ω—ã", callback_data="view_schedule")
                ],
                [
                    InlineKeyboardButton("üïê –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–∞–π–º-—Å–ª–æ—Ç—ã", callback_data="plan_timeslot")
                ],
                [
                    InlineKeyboardButton("üè¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="create_object"),
                    InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏", callback_data="manage_objects")
                ],
                [
                    InlineKeyboardButton("üìä –û—Ç—á–µ—Ç", callback_data="get_report"),
                    InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
                ],
                [
                    InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å", callback_data="status")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await query.edit_message_text(
                text=response,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error returning to main menu: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            return ConversationHandler.END
    
    def get_conversation_handler(self) -> ConversationHandler:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤."""
        return ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.show_timeslot_planning_menu, pattern="^plan_timeslot$")
            ],
            states={
                SELECT_OBJECT: [
                    CallbackQueryHandler(self.handle_object_selection, pattern="^select_object_|cancel_timeslot$")
                ],
                SELECT_DATE: [
                    CallbackQueryHandler(self.handle_date_selection, pattern="^date_|cancel_timeslot$")
                ],
                SELECT_TIMESLOT: [
                    CallbackQueryHandler(self.handle_timeslot_selection, pattern="^select_slot_|cancel_timeslot$")
                ],
                SELECT_INTERVAL: [
                    CallbackQueryHandler(self.handle_interval_selection, pattern="^select_interval_|cancel_timeslot$")
                ],
                CONFIRM_BOOKING: [
                    CallbackQueryHandler(self.confirm_booking, pattern="^confirm_booking$"),
                    CallbackQueryHandler(self.cancel_timeslot_planning, pattern="^cancel_timeslot$")
                ]
            },
            fallbacks=[
                CallbackQueryHandler(self.cancel_timeslot_planning, pattern="^cancel_timeslot$")
            ]
        )
