"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω."""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from core.logging.logger import logger
from apps.bot.services.schedule_service import ScheduleService
from apps.bot.services.object_service import ObjectService
from core.state import user_state_manager, UserAction, UserStep
from datetime import datetime, timedelta, timezone
import re


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
schedule_service = ScheduleService()
object_service = ObjectService()


async def handle_schedule_shift(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã."""
    user_id = update.effective_user.id
    
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_state_manager.clear_state(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        objects = object_service.get_all_objects()
        
        if not objects:
            await update.callback_query.edit_message_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã.\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã
        user_state_manager.create_state(
            user_id=user_id,
            action=UserAction.SCHEDULE_SHIFT,
            step=UserStep.OBJECT_SELECTION
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
        keyboard = []
        for obj in objects:
            keyboard.append([
                InlineKeyboardButton(
                    f"üè¢ {obj['name']} ({obj['opening_time']}-{obj['closing_time']})",
                    callback_data=f"schedule_select_object_{obj['id']}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        logger.info(f"Schedule shift started for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error in handle_schedule_shift: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_schedule_object_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_id = update.effective_user.id
    callback_data = update.callback_query.data
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
        object_id = int(callback_data.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = user_state_manager.get_state(user_id)
        if not state or state.action != UserAction.SCHEDULE_SHIFT:
            await update.callback_query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_state_manager.update_state(
            user_id=user_id,
            selected_object_id=object_id,
            step=UserStep.INPUT_DATE
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        obj = object_service.get_object_by_id(object_id)
        if not obj:
            await update.callback_query.edit_message_text(
                "‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            return
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="schedule_date_today")],
            [InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="schedule_date_tomorrow")],
            [InlineKeyboardButton("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data="schedule_date_custom")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã</b>\n\n"
            f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj['name']}</b>\n"
            f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {obj['opening_time']}-{obj['closing_time']}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {obj['hourly_rate']}‚ÇΩ/—á–∞—Å\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        logger.info(f"Object {object_id} selected for scheduling by user {user_id}")
        
    except Exception as e:
        logger.error(f"Error in handle_schedule_object_selection: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–±—ä–µ–∫—Ç–∞."
        )


async def handle_schedule_date_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_id = update.effective_user.id
    callback_data = update.callback_query.data
    
    try:
        state = user_state_manager.get_state(user_id)
        if not state or state.action != UserAction.SCHEDULE_SHIFT:
            await update.callback_query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
        if callback_data == "schedule_date_today":
            selected_date = datetime.now(timezone.utc).date()
        elif callback_data == "schedule_date_tomorrow":
            selected_date = (datetime.now(timezone.utc) + timedelta(days=1)).date()
        elif callback_data == "schedule_date_custom":
            # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            selected_date = (datetime.now(timezone.utc) + timedelta(days=1)).date()
            await update.callback_query.edit_message_text(
                "üìÖ –î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞."
            )
            user_state_manager.update_state(
                user_id=user_id,
                step=UserStep.INPUT_DATE
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        user_state_manager.update_state(
            user_id=user_id,
            step=UserStep.INPUT_START_TIME,
            data={'selected_date': selected_date}
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        obj = object_service.get_object_by_id(state.selected_object_id)
        
        await update.callback_query.edit_message_text(
            f"üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã</b>\n\n"
            f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj['name']}</b>\n"
            f"üìÖ –î–∞—Ç–∞: <b>{selected_date.strftime('%d.%m.%Y')}</b>\n"
            f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –æ–±—ä–µ–∫—Ç–∞: {obj['opening_time']}-{obj['closing_time']}\n\n"
            f"‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è <b>–Ω–∞—á–∞–ª–∞</b> —Å–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00",
            parse_mode='HTML'
        )
        
        logger.info(f"Date {selected_date} selected for scheduling by user {user_id}")
        
    except Exception as e:
        logger.error(f"Error in handle_schedule_date_selection: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã."
        )


async def handle_schedule_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    
    try:
        state = user_state_manager.get_state(user_id)
        if not state or state.action != UserAction.SCHEDULE_SHIFT:
            await update.message.reply_text(
                "‚ùå –°–µ—Å—Å–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        time_pattern = r'^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$'
        if not re.match(time_pattern, message_text):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00 –∏–ª–∏ 14:30"
            )
            return
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        time_parts = message_text.split(':')
        hour = int(time_parts[0])
        minute = int(time_parts[1])
        
        if state.step == UserStep.INPUT_START_TIME:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
            user_state_manager.update_state(
                user_id=user_id,
                step=UserStep.INPUT_END_TIME,
                data={'start_time': f"{hour:02d}:{minute:02d}"}
            )
            
            obj = object_service.get_object_by_id(state.selected_object_id)
            selected_date = state.get_data('selected_date')
            
            await update.message.reply_text(
                f"üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã</b>\n\n"
                f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj['name']}</b>\n"
                f"üìÖ –î–∞—Ç–∞: <b>{selected_date.strftime('%d.%m.%Y')}</b>\n"
                f"üïê –ù–∞—á–∞–ª–æ: <b>{hour:02d}:{minute:02d}</b>\n"
                f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –æ–±—ä–µ–∫—Ç–∞: {obj['opening_time']}-{obj['closing_time']}\n\n"
                f"‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è <b>–æ–∫–æ–Ω—á–∞–Ω–∏—è</b> —Å–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: 18:00",
                parse_mode='HTML'
            )
            
        elif state.step == UserStep.INPUT_END_TIME:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            start_time = state.get_data('start_time')
            end_time = f"{hour:02d}:{minute:02d}"
            
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            from core.utils.timezone_helper import timezone_helper
            selected_date = state.get_data('selected_date')
            
            # –°–æ–∑–¥–∞–µ–º naive datetime –æ–±—ä–µ–∫—Ç—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            start_datetime_naive = datetime.combine(selected_date, datetime.strptime(start_time, '%H:%M').time())
            end_datetime_naive = datetime.combine(selected_date, datetime.strptime(end_time, '%H:%M').time())
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É
            start_datetime = timezone_helper.local_to_utc(start_datetime_naive)
            end_datetime = timezone_helper.local_to_utc(end_datetime_naive)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
            if end_datetime <= start_datetime:
                await update.message.reply_text(
                    "‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞.\n"
                    "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã:"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            user_state_manager.update_state(
                user_id=user_id,
                step=UserStep.CONFIRM_SCHEDULE,
                data={
                    'end_time': end_time,
                    'start_datetime': start_datetime,
                    'end_datetime': end_datetime
                }
            )
            
            obj = object_service.get_object_by_id(state.selected_object_id)
            duration_hours = (end_datetime - start_datetime).total_seconds() / 3600
            planned_payment = float(obj['hourly_rate']) * duration_hours
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="schedule_confirm")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üìÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã</b>\n\n"
                f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj['name']}</b>\n"
                f"üìÖ –î–∞—Ç–∞: <b>{selected_date.strftime('%d.%m.%Y')}</b>\n"
                f"üïê –í—Ä–µ–º—è: <b>{start_time} - {end_time}</b> (–º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è)\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{duration_hours:.1f} —á.</b>\n"
                f"üí∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –æ–ø–ª–∞—Ç–∞: <b>{planned_payment:.2f}‚ÇΩ</b>\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã:",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        
        logger.info(f"Time input processed for user {user_id}: {message_text}")
        
    except Exception as e:
        logger.error(f"Error in handle_schedule_time_input: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏."
        )


async def handle_schedule_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã."""
    user_id = update.effective_user.id
    
    try:
        state = user_state_manager.get_state(user_id)
        if not state or state.action != UserAction.SCHEDULE_SHIFT:
            await update.callback_query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã
        start_datetime = state.get_data('start_datetime')
        end_datetime = state.get_data('end_datetime')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–º–µ–Ω—É
        result = await schedule_service.create_scheduled_shift(
            user_id=user_id,
            object_id=state.selected_object_id,
            planned_start=start_datetime,
            planned_end=end_datetime
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_state_manager.clear_state(user_id)
        
        if result['success']:
            await update.callback_query.edit_message_text(
                f"‚úÖ <b>–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                f"üè¢ –û–±—ä–µ–∫—Ç: <b>{result['object_name']}</b>\n"
                f"üìÖ {result['message']}\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{result['planned_duration']:.1f} —á.</b>\n"
                f"üí∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –æ–ø–ª–∞—Ç–∞: <b>{result['planned_payment']:.2f}‚ÇΩ</b>\n\n"
                f"üì± –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã.",
                parse_mode='HTML'
            )
        else:
            error_message = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã:</b>\n\n{result['error']}"
            
            if 'conflicts' in result:
                error_message += "\n\n<b>–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã:</b>\n"
                for conflict in result['conflicts']:
                    error_message += f"‚Ä¢ {conflict['type']}: {conflict['time_range']}\n"
            
            await update.callback_query.edit_message_text(
                error_message,
                parse_mode='HTML'
            )
        
        logger.info(f"Schedule confirmation processed for user {user_id}: {result['success']}")
        
    except Exception as e:
        logger.error(f"Error in handle_schedule_confirmation: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        )


async def handle_view_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω."""
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        scheduled_shifts = await schedule_service.get_user_scheduled_shifts(
            user_id=user_id,
            status_filter='planned'
        )
        
        if not scheduled_shifts:
            keyboard = [
                [InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É", callback_data="schedule_shift")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "üìÖ <b>–ú–æ–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω.\n\n"
                "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É?",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–º–µ–Ω
        message = "üìÖ <b>–ú–æ–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã</b>\n\n"
        
        keyboard = []
        for shift in scheduled_shifts:
            status_emoji = "üü¢" if shift['is_upcoming'] else "üü°"
            message += (
                f"{status_emoji} <b>{shift['object_name']}</b>\n"
                f"üìÖ {shift['formatted_time_range']}\n"
                f"‚è± {shift['planned_duration_hours']:.1f} —á. "
                f"üí∞ {shift['planned_payment']:.2f}‚ÇΩ\n"
            )
            
            if shift['can_be_cancelled']:
                message += "‚ùå –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å\n"
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å: {shift['object_name']} {shift['formatted_time_range'][:10]}",
                        callback_data=f"cancel_schedule_{shift['id']}"
                    )
                ])
            else:
                message += "‚è∞ –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å (–º–µ–Ω–µ–µ —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞)\n"
            
            message += "\n"
        
        keyboard.append([
            InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë", callback_data="schedule_shift")
        ])
        keyboard.append([
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        logger.info(f"Schedule viewed by user {user_id}: {len(scheduled_shifts)} shifts")
        
    except Exception as e:
        logger.error(f"Error in handle_view_schedule: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
        )


async def handle_cancel_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–º–µ–Ω—ã."""
    user_id = update.effective_user.id
    callback_data = update.callback_query.data
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–º–µ–Ω—ã
        schedule_id = int(callback_data.split("_")[-1])
        
        # –û—Ç–º–µ–Ω—è–µ–º —Å–º–µ–Ω—É
        result = await schedule_service.cancel_scheduled_shift(
            user_id=user_id,
            schedule_id=schedule_id
        )
        
        if result['success']:
            await update.callback_query.edit_message_text(
                f"‚úÖ <b>–°–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
                f"{result['message']}\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
                parse_mode='HTML'
            )
        else:
            await update.callback_query.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã:</b>\n\n{result['error']}",
                parse_mode='HTML'
            )
        
        logger.info(f"Schedule cancellation processed for user {user_id}: {result['success']}")
        
    except Exception as e:
        logger.error(f"Error in handle_cancel_schedule: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–º–µ–Ω—ã."
        )


async def handle_custom_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–∞—Ç—ã."""
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    
    try:
        state = user_state_manager.get_state(user_id)
        if not state or state.action != UserAction.SCHEDULE_SHIFT or state.step != UserStep.INPUT_DATE:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        date_pattern = r'^(\d{1,2})\.(\d{1,2})\.(\d{4})$'
        match = re.match(date_pattern, message_text)
        
        if not match:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024"
            )
            return
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        day, month, year = map(int, match.groups())
        
        try:
            selected_date = datetime(year, month, day).date()
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if selected_date < datetime.now(timezone.utc).date():
            await update.message.reply_text(
                "‚ùå –ù–µ–ª—å–∑—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—ã –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏
        user_state_manager.update_state(
            user_id=user_id,
            step=UserStep.INPUT_START_TIME,
            data={'selected_date': selected_date}
        )
        
        obj = object_service.get_object_by_id(state.selected_object_id)
        
        await update.message.reply_text(
            f"üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã</b>\n\n"
            f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj['name']}</b>\n"
            f"üìÖ –î–∞—Ç–∞: <b>{selected_date.strftime('%d.%m.%Y')}</b>\n"
            f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –æ–±—ä–µ–∫—Ç–∞: {obj['opening_time']}-{obj['closing_time']}\n\n"
            f"‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è <b>–Ω–∞—á–∞–ª–∞</b> —Å–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00",
            parse_mode='HTML'
        )
        
        logger.info(f"Custom date {selected_date} set for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error in handle_custom_date_input: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã."
        )
