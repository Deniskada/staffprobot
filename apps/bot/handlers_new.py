"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞."""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from core.logging.logger import logger
from core.auth.user_manager import user_manager
from apps.bot.services.shift_service import ShiftService
from apps.bot.services.object_service import ObjectService
from core.database.session import get_async_session
from core.utils.timezone_helper import timezone_helper
from domain.entities.object import Object
from sqlalchemy import select
import asyncio
from apps.bot.object_creation_handlers import handle_create_object_start, handle_create_object_input, user_object_creation_state
from core.state import user_state_manager, UserAction, UserStep
from apps.bot.schedule_handlers import (
    handle_schedule_shift, handle_schedule_object_selection, handle_schedule_date_selection,
    handle_schedule_confirmation, handle_view_schedule, handle_cancel_schedule,
    handle_schedule_time_input, handle_custom_date_input
)
from datetime import date, timedelta


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
shift_service = ShiftService()
object_service = ObjectService()


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user_manager.is_user_registered(user.id):
        user_data = user_manager.register_user(
            user_id=user.id,
            first_name=user.first_name,
            username=user.username,
            last_name=user.last_name,
            language_code=user.language_code
        )
        welcome_message = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StaffProBot!</b>

–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.

üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:

üí° –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–º–µ–Ω—ã —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã
‚Ä¢ –í–µ—Å—Ç–∏ —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã

üìç <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç–∞—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!
"""
        logger.info(
            f"New user registered: user_id={user.id}, username={user.username}, chat_id={chat_id}"
        )
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_manager.update_user_activity(user.id)
        welcome_message = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üîÑ <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ StaffProBot!</b>

–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å!

üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:

üí° –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–º–µ–Ω—ã —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã
‚Ä¢ –í–µ—Å—Ç–∏ —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã

üìç <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç–∞—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!
"""
        logger.info(
            f"Existing user returned: user_id={user.id}, username={user.username}, chat_id={chat_id}"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="open_shift"),
            InlineKeyboardButton("üîö –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="close_shift")
        ],
        [
            InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É", callback_data="schedule_shift"),
            InlineKeyboardButton("üìã –ú–æ–∏ –ø–ª–∞–Ω—ã", callback_data="view_schedule")
        ],
        [
            InlineKeyboardButton("üïê –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–∞–π–º-—Å–ª–æ—Ç—ã", callback_data="plan_timeslot")
        ],
        [
            InlineKeyboardButton("üè¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="create_object"),
            InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏", callback_data="manage_objects")
        ],
        [
            InlineKeyboardButton("üìä –û—Ç—á–µ—Ç", callback_data="get_report"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ],
        [
            InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å", callback_data="status")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=welcome_message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


def get_location_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏."""
    keyboard = [
        [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)


async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    location = update.message.location
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state = user_state_manager.get_state(user_id)
    if not user_state:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–æ—Ç–∫—Ä—ã—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É)"
        )
        return
    
    if user_state.step != UserStep.LOCATION_REQUEST:
        await update.message.reply_text(
            "‚ùå –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ"
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    user_state_manager.update_state(user_id, step=UserStep.PROCESSING)
    
    coordinates = f"{location.latitude},{location.longitude}"
    
    try:
        if user_state.action == UserAction.OPEN_SHIFT:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É
            result = await shift_service.open_shift(
                user_id=user_id,
                object_id=user_state.selected_object_id,
                coordinates=coordinates
            )
            
            if result['success']:
                object_name = result.get('object_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                start_time = result.get('start_time', '–°–µ–π—á–∞—Å') or '–°–µ–π—á–∞—Å'
                hourly_rate = result.get('hourly_rate', 0) or 0
                
                # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                from telegram import ReplyKeyboardRemove
                await update.message.reply_text(
                    f"‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞!\n"
                    f"üìç –û–±—ä–µ–∫—Ç: {object_name}\n"
                    f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}\n"
                    f"üí∞ –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {hourly_rate}‚ÇΩ",
                    reply_markup=ReplyKeyboardRemove()
                )
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã: {result['error']}"
                if 'distance_meters' in result:
                    error_msg += f"\nüìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {result['distance_meters']:.0f}–º"
                    error_msg += f"\nüìê –ú–∞–∫—Å–∏–º—É–º: {result.get('max_distance_meters', 100)}–º"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = [
                    [InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data=f"retry_location:{user_state.selected_object_id}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(error_msg, reply_markup=reply_markup)
                
        elif user_state.action == UserAction.CLOSE_SHIFT:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É
            result = await shift_service.close_shift(
                user_id=user_id,
                shift_id=user_state.selected_shift_id,
                coordinates=coordinates
            )
            
            if result['success']:
                total_hours = result.get('total_hours', 0) or 0
                total_payment = result.get('total_payment', 0) or 0
                
                # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
                logger.info(
                    f"Close shift result for user {user_id}: result={result}, "
                    f"total_hours={total_hours}, total_payment={total_payment}"
                )
                
                # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                from telegram import ReplyKeyboardRemove
                await update.message.reply_text(
                    f"‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!\n"
                    f"‚è±Ô∏è –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_hours:.1f} —á–∞—Å–æ–≤\n"
                    f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_payment}‚ÇΩ",
                    reply_markup=ReplyKeyboardRemove()
                )
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã: {result['error']}"
                if 'distance_meters' in result:
                    error_msg += f"\nüìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {result['distance_meters']:.0f}–º"
                    error_msg += f"\nüìê –ú–∞–∫—Å–∏–º—É–º: {result.get('max_distance_meters', 100)}–º"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
                keyboard = [
                    [InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data=f"retry_close_location:{user_state.selected_shift_id}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(error_msg, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error processing location for user {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
    
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state_manager.clear_state(user_id)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    
    user = query.from_user
    chat_id = query.message.chat_id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_manager.update_user_activity(user.id)
    
    logger.info(
        f"Button callback received: user_id={user.id}, username={user.username}, callback_data={query.data}"
    )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–Ω–æ–ø–æ–∫
    if query.data == "open_shift":
        await _handle_open_shift(update, context)
        return
    elif query.data == "close_shift":
        await _handle_close_shift(update, context)
        return
    elif query.data.startswith("open_shift_object:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_open_shift_object_selection(update, context, object_id)
        return
    elif query.data.startswith("close_shift_select:"):
        shift_id = int(query.data.split(":", 1)[1])
        await _handle_close_shift_selection(update, context, shift_id)
        return
    elif query.data.startswith("edit_object:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_edit_object(update, context, object_id)
        return
    elif query.data.startswith("edit_field:"):
        # –§–æ—Ä–º–∞—Ç: edit_field:object_id:field_name
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            object_id = int(parts[1])
            field_name = parts[2]
            await _handle_edit_field(update, context, object_id, field_name)
        return
    elif query.data == "create_object":
        await handle_create_object_start(update, context)
        return
    elif query.data == "manage_objects":
        await _handle_manage_objects(update, context)
        return
    elif query.data.startswith("retry_location:"):
        # –§–æ—Ä–º–∞—Ç: retry_location:object_id
        object_id = int(query.data.split(":", 1)[1])
        await _handle_retry_location_open(update, context, object_id)
        return
    elif query.data.startswith("retry_close_location:"):
        # –§–æ—Ä–º–∞—Ç: retry_close_location:shift_id
        shift_id = int(query.data.split(":", 1)[1])
        await _handle_retry_location_close(update, context, shift_id)
        return
    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω
    elif query.data == "schedule_shift":
        await handle_schedule_shift(update, context)
        return
    elif query.data == "view_schedule":
        await handle_view_schedule(update, context)
        return
    elif query.data.startswith("schedule_select_object_"):
        await handle_schedule_object_selection(update, context)
        return
    elif query.data in ["schedule_date_today", "schedule_date_tomorrow", "schedule_date_custom"]:
        await handle_schedule_date_selection(update, context)
        return
    elif query.data == "schedule_confirm":
        await handle_schedule_confirmation(update, context)
        return
    elif query.data.startswith("cancel_schedule_"):
        await handle_cancel_schedule(update, context)
        return
    elif query.data == "help":
        await _handle_help_callback(update, context)
        return
    elif query.data == "status":
        await _handle_status_callback(update, context)
        return
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏
    elif query.data.startswith("manage_timeslots:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_manage_timeslots(update, context, object_id)
        return
    elif query.data.startswith("create_timeslot:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_create_timeslot(update, context, object_id)
        return
    elif query.data.startswith("view_timeslots:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_view_timeslots(update, context, object_id)
        return
    elif query.data.startswith("edit_timeslots:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_edit_timeslots(update, context, object_id)
        return
    elif query.data.startswith("delete_timeslots:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_delete_timeslots(update, context, object_id)
        return
    elif query.data.startswith("create_regular_slot:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_create_regular_slot(update, context, object_id)
        return
    elif query.data.startswith("create_additional_slot:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_create_additional_slot(update, context, object_id)
        return
    elif query.data.startswith("create_slot_date:"):
        # –§–æ—Ä–º–∞—Ç: create_slot_date:object_id:type:date
        parts = query.data.split(":", 3)
        if len(parts) == 4:
            object_id = int(parts[1])
            slot_type = parts[2]
            slot_date = parts[3]
            await _handle_create_slot_date(update, context, object_id, slot_type, slot_date)
        return
    elif query.data.startswith("create_slot_custom_date:"):
        # –§–æ—Ä–º–∞—Ç: create_slot_custom_date:object_id:type
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            object_id = int(parts[1])
            slot_type = parts[2]
            await _handle_create_slot_custom_date(update, context, object_id, slot_type)
        return
    elif query.data.startswith("create_slot_week:"):
        # –§–æ—Ä–º–∞—Ç: create_slot_week:object_id:type
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            object_id = int(parts[1])
            slot_type = parts[2]
            await _handle_create_slot_week(update, context, object_id, slot_type)
        return
    elif query.data.startswith("edit_slot_date:"):
        # –§–æ—Ä–º–∞—Ç: edit_slot_date:object_id:type:date
        parts = query.data.split(":", 3)
        if len(parts) == 4:
            object_id = int(parts[1])
            slot_type = parts[2]
            slot_date = parts[3]
            await _handle_edit_slot_date(update, context, object_id, slot_type, slot_date)
        return
    elif query.data.startswith("edit_slot_custom_date:"):
        # –§–æ—Ä–º–∞—Ç: edit_slot_custom_date:object_id:type
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            object_id = int(parts[1])
            slot_type = parts[2]
            await _handle_edit_slot_custom_date(update, context, object_id, slot_type)
        return
    elif query.data.startswith("edit_slot_week:"):
        # –§–æ—Ä–º–∞—Ç: edit_slot_week:object_id:type
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            object_id = int(parts[1])
            slot_type = parts[2]
            await _handle_edit_slot_week(update, context, object_id, slot_type)
        return
    elif query.data.startswith("delete_slot_date:"):
        # –§–æ—Ä–º–∞—Ç: delete_slot_date:object_id:type:date
        parts = query.data.split(":", 3)
        if len(parts) == 4:
            object_id = int(parts[1])
            slot_type = parts[2]
            slot_date = parts[3]
            await _handle_delete_slot_date(update, context, object_id, slot_type, slot_date)
        return
    elif query.data.startswith("delete_slot_custom_date:"):
        # –§–æ—Ä–º–∞—Ç: delete_slot_custom_date:object_id:type
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            object_id = int(parts[1])
            slot_type = parts[2]
            await _handle_delete_slot_custom_date(update, context, object_id, slot_type)
        return
    elif query.data.startswith("delete_slot_week:"):
        # –§–æ—Ä–º–∞—Ç: delete_slot_week:object_id:type
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            object_id = int(parts[1])
            slot_type = parts[2]
            await _handle_delete_slot_week(update, context, object_id, slot_type)
        return    
    elif query.data == "main_menu" or query.data == "back_to_menu":
        response = f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:
"""
    else:
        response = """
‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="open_shift"),
            InlineKeyboardButton("üîö –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="close_shift")
        ],
        [
            InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É", callback_data="schedule_shift"),
            InlineKeyboardButton("üìã –ú–æ–∏ –ø–ª–∞–Ω—ã", callback_data="view_schedule")
        ],
        [
            InlineKeyboardButton("üïê –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–∞–π–º-—Å–ª–æ—Ç—ã", callback_data="plan_timeslot")
        ],
        [
            InlineKeyboardButton("üè¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="create_object"),
            InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏", callback_data="manage_objects")
        ],
        [
            InlineKeyboardButton("üìä –û—Ç—á–µ—Ç", callback_data="get_report"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ],
        [
            InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å", callback_data="status")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await query.edit_message_text(
        text=response,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_open_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã."""
    query = update.callback_query
    user = query.from_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user_manager.is_user_registered(user_id):
        await query.edit_message_text(
            text="‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode='HTML'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã
    try:
        active_shifts = await shift_service.get_user_shifts(user_id, status='active')
        if active_shifts:
            await query.edit_message_text(
                text="‚ùå <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞</b>\n\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–æ–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É.",
                parse_mode='HTML'
            )
            return
    except Exception as e:
        logger.error(f"Error checking active shifts for user {user_id}: {e}")
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        async with get_async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
            objects_query = select(Object).where(Object.is_active == True)
            objects_result = await session.execute(objects_query)
            objects = objects_result.scalars().all()
            
            if not objects:
                await query.edit_message_text(
                    text="‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤</b>\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É.",
                    parse_mode='HTML'
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state_manager.create_state(
                user_id=user_id,
                action=UserAction.OPEN_SHIFT,
                step=UserStep.OBJECT_SELECTION
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
            keyboard = []
            for obj in objects:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üè¢ {obj.name} ({obj.address or '–±–µ–∑ –∞–¥—Ä–µ—Å–∞'})", 
                        callback_data=f"open_shift_object:{obj.id}"
                    )
                ])
            
            keyboard.append([
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text="üîÑ <b>–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã:",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"Error getting objects: {e}")
        await query.edit_message_text(
            text="‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode='HTML'
        )


async def _handle_close_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã."""
    query = update.callback_query
    user = query.from_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user_manager.is_user_registered(user_id):
        await query.edit_message_text(
            text="‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode='HTML'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        active_shifts = await shift_service.get_user_shifts(user_id, status='active')
        
        if not active_shifts:
            await query.edit_message_text(
                text="‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω</b>\n\n–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–º–µ–Ω—É.",
                parse_mode='HTML'
            )
            return
        
        # –ï—Å–ª–∏ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
        if len(active_shifts) == 1:
            shift = active_shifts[0]  # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state_manager.create_state(
                user_id=user_id,
                action=UserAction.CLOSE_SHIFT,
                step=UserStep.LOCATION_REQUEST,
                selected_shift_id=shift['id']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ —Å–º–µ–Ω—ã
            async with get_async_session() as session:
                obj_query = select(Object).where(Object.id == shift['object_id'])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è
                obj_result = await session.execute(obj_query)
                obj = obj_result.scalar_one_or_none()
                
                if not obj:
                    await query.edit_message_text(
                        text="‚ùå –û–±—ä–µ–∫—Ç —Å–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        parse_mode='HTML'
                    )
                    user_state_manager.clear_state(user_id)
                    return
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∑–æ–Ω—É
                from datetime import datetime
                try:
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ë–î (—Ñ–æ—Ä–º–∞—Ç: 'YYYY-MM-DD HH:MM:SS')
                    start_time_utc = datetime.strptime(shift['start_time'], '%Y-%m-%d %H:%M:%S')
                    user_timezone = timezone_helper.get_user_timezone(user_id)
                    local_start_time = timezone_helper.format_local_time(start_time_utc, user_timezone)
                except (ValueError, KeyError):
                    local_start_time = shift['start_time']  # Fallback –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
                await query.edit_message_text(
                    text=f"üìç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã</b>\n\n"
                         f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj.name}</b>\n"
                         f"üìç –ê–¥—Ä–µ—Å: {obj.address or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                         f"üïê –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã: {local_start_time}\n\n"
                         f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
                    parse_mode='HTML'
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏:",
                    reply_markup=get_location_keyboard()
                )
        
        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–ª—É—á–∞–π, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            keyboard = []
            for shift in active_shifts:  # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä–∏, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç—ã
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
                async with get_async_session() as session:
                    obj_query = select(Object).where(Object.id == shift['object_id'])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è
                    obj_result = await session.execute(obj_query)
                    obj = obj_result.scalar_one_or_none()
                    
                    obj_name = obj.name if obj else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç"
                    
                keyboard.append([
                    InlineKeyboardButton(
                        f"üîö {obj_name} ({shift['start_time'][:5]})",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ HH:MM
                        callback_data=f"close_shift_select:{shift['id']}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è
                    )
                ])
            
            keyboard.append([
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text="üîö <b>–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"Error handling close shift for user {user_id}: {e}")
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )


async def _handle_open_shift_object_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state = user_state_manager.get_state(user_id)
    if not user_state or user_state.action != UserAction.OPEN_SHIFT:
        await query.edit_message_text(
            text="‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode='HTML'
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
    user_state_manager.update_state(
        user_id=user_id,
        selected_object_id=object_id,
        step=UserStep.LOCATION_REQUEST
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
    try:
        async with get_async_session() as session:
            obj_query = select(Object).where(Object.id == object_id)
            obj_result = await session.execute(obj_query)
            obj = obj_result.scalar_one_or_none()
            
            if not obj:
                await query.edit_message_text(
                    text="‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode='HTML'
                )
                user_state_manager.clear_state(user_id)
                return
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
            await query.edit_message_text(
                text=f"üìç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é</b>\n\n"
                     f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj.name}</b>\n"
                     f"üìç –ê–¥—Ä–µ—Å: {obj.address or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                     f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏:",
                reply_markup=get_location_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error handling object selection for user {user_id}: {e}")
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
        user_state_manager.clear_state(user_id)


async def _handle_close_shift_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, shift_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state_manager.create_state(
        user_id=user_id,
        action=UserAction.CLOSE_SHIFT,
        step=UserStep.LOCATION_REQUEST,
        selected_shift_id=shift_id
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–µ –∏ –æ–±—ä–µ–∫—Ç–µ
    try:
        shift = await shift_service.get_shift_by_id(shift_id)
        if not shift:
            await query.edit_message_text(
                text="‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode='HTML'
            )
            user_state_manager.clear_state(user_id)
            return
        
        async with get_async_session() as session:
            obj_query = select(Object).where(Object.id == shift.object_id)
            obj_result = await session.execute(obj_query)
            obj = obj_result.scalar_one_or_none()
            
            if not obj:
                await query.edit_message_text(
                    text="‚ùå –û–±—ä–µ–∫—Ç —Å–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode='HTML'
                )
                user_state_manager.clear_state(user_id)
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∑–æ–Ω—É
            user_timezone = timezone_helper.get_user_timezone(user_id)
            local_start_time = timezone_helper.format_local_time(shift.start_time, user_timezone)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
            await query.edit_message_text(
                text=f"üìç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã</b>\n\n"
                     f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj.name}</b>\n"
                     f"üìç –ê–¥—Ä–µ—Å: {obj.address or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                     f"üïê –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã: {local_start_time}\n\n"
                     f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏:",
                reply_markup=get_location_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error handling close shift selection for user {user_id}: {e}")
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
        user_state_manager.clear_state(user_id)


async def _handle_manage_objects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_objects = object_service.get_user_objects(user_id)
    
    if not user_objects:
        await query.edit_message_text(
            text="üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏</b>\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return
    
    keyboard = []
    for obj in user_objects:
        # –¢–µ–ø–µ—Ä—å max_distance_meters —É–∂–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞
        max_distance = obj.get('max_distance_meters', 500)
        auto_close_minutes = obj.get('auto_close_minutes', 60)
            
        keyboard.append([
            InlineKeyboardButton(
                f"‚öôÔ∏è {obj['name']} ({max_distance}–º, {auto_close_minutes} –º–∏–Ω.)", 
                callback_data=f"edit_object:{obj['id']}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\nüí° –í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω",
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_edit_object(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
    obj_data = object_service.get_object_by_id(object_id)
    if not obj_data:
        await query.edit_message_text(
            text="‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return
    
    # –¢–µ–ø–µ—Ä—å max_distance_meters —É–∂–µ –µ—Å—Ç—å –≤ obj_data
    max_distance = obj_data.get('max_distance_meters', 500)
    auto_close_minutes = obj_data.get('auto_close_minutes', 60)
    
    keyboard = [
        [
            InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field:{object_id}:name"),
            InlineKeyboardButton("üìç –ê–¥—Ä–µ—Å", callback_data=f"edit_field:{object_id}:address")
        ],
        [
            InlineKeyboardButton("üí∞ –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", callback_data=f"edit_field:{object_id}:hourly_rate"),
            InlineKeyboardButton("üìè –ú–∞–∫—Å. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", callback_data=f"edit_field:{object_id}:max_distance_meters")
        ],
        [
            InlineKeyboardButton("‚è∞ –ê–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω", callback_data=f"edit_field:{object_id}:auto_close_minutes")
        ],
        [
            InlineKeyboardButton("üïê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏", callback_data=f"manage_timeslots:{object_id}")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_objects"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=f"‚öôÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
             f"üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {obj_data['name']}\n"
             f"üìç <b>–ê–¥—Ä–µ—Å:</b> {obj_data['address'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
             f"üí∞ <b>–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:</b> {obj_data['hourly_rate']}‚ÇΩ\n"
             f"üìè <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> {max_distance}–º\n"
             f"‚è∞ <b>–í—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è:</b> {auto_close_minutes} –º–∏–Ω.\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int, field_name: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É
    field_names = {
        'name': '–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
        'address': '–∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞',
        'hourly_rate': '—á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É (–≤ —Ä—É–±–ª—è—Ö)',
        'max_distance_meters': '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤ –º–µ—Ç—Ä–∞—Ö, –æ—Ç 10 –¥–æ 5000)',
        'auto_close_minutes': '–≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω (–≤ –º–∏–Ω—É—Ç–∞—Ö, –æ—Ç 15 –¥–æ 480)'
    }
    
    field_display = field_names.get(field_name, field_name)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_state_manager.create_state(
        user_id=user_id,
        action=UserAction.EDIT_OBJECT,
        step=UserStep.INPUT_FIELD_VALUE,
        selected_object_id=object_id,
        data={'field_name': field_name}
    )
    
    await query.edit_message_text(
        text=f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è</b>\n\n"
             f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è <b>{field_display}</b>:",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_object:{object_id}")
        ]])
    )


async def _handle_help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å' —á–µ—Ä–µ–∑ callback."""
    query = update.callback_query
    help_text = """
‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ StaffProBot</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö —Å–º–µ–Ω

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
üîÑ <b>–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É</b>
üîö <b>–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É</b>
üìÖ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É</b>
üè¢ <b>–°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç</b>
‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏</b>
üìä <b>–û—Ç—á–µ—Ç</b>

<b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</b>
üìç –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
üìè –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±—ä–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 500–º)
üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é"
"""
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await query.edit_message_text(text=help_text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))


async def _handle_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—É—Å' —á–µ—Ä–µ–∑ callback."""
    query = update.callback_query
    user_id = query.from_user.id
    try:
        active_shifts = await shift_service.get_user_shifts(user_id, status='active')
        if not active_shifts:
            status_text = """
üìà <b>–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω</b>

‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω –Ω–µ—Ç</b>

–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
"""
        else:
            shift = active_shifts[0]
            obj_data = object_service.get_object_by_id(shift['object_id'])
            user_timezone = timezone_helper.get_user_timezone(user_id)
            from datetime import datetime
            try:
                start_time_utc = datetime.strptime(shift['start_time'], '%Y-%m-%d %H:%M:%S')
                local_start_time = timezone_helper.format_local_time(start_time_utc, user_timezone)
            except Exception:
                local_start_time = shift.get('start_time', '')
            obj_name = obj_data['name'] if obj_data else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
            hourly_rate = obj_data['hourly_rate'] if obj_data else 0
            status_text = f"""
üìà <b>–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω</b>

üü¢ <b>–ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞:</b>
üè¢ –û–±—ä–µ–∫—Ç: {obj_name}
üïê –ù–∞—á–∞–ª–æ: {local_start_time}
üí∞ –°—Ç–∞–≤–∫–∞: {hourly_rate}‚ÇΩ/—á–∞—Å

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîö –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É".
"""
    except Exception as e:
        logger.error(f"Error getting user status for {user_id}: {e}")
        status_text = """
üìà <b>–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω</b>

‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</b>

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
    keyboard = [
        [InlineKeyboardButton("üîÑ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="open_shift"), InlineKeyboardButton("üîö –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="close_shift")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await query.edit_message_text(text=status_text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    text = update.message.text
    user_id = update.effective_user.id
    
    logger.info(f"Received text message: user_id={user_id}, text='{text}'")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await handle_cancel(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    if user_id in user_object_creation_state:
        logger.info(f"User {user_id} is in object creation state, processing input")
        await handle_create_object_input(update, context, text)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    user_state = user_state_manager.get_state(user_id)
    if user_state and user_state.action == UserAction.EDIT_OBJECT:
        await _handle_edit_object_input(update, context, user_state)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω
    if user_state and user_state.action == UserAction.SCHEDULE_SHIFT:
        if user_state.step in [UserStep.INPUT_START_TIME, UserStep.INPUT_END_TIME]:
            await handle_schedule_time_input(update, context)
            return
        elif user_state.step == UserStep.INPUT_DATE:
            await handle_custom_date_input(update, context)
            return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text(
        "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
    )


async def handle_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è."""
    user_id = update.effective_user.id
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state_manager.clear_state(user_id)
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from telegram import ReplyKeyboardRemove
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove()
    )


async def _handle_edit_object_input(update: Update, context: ContextTypes.DEFAULT_TYPE, user_state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞."""
    user_id = update.effective_user.id
    text = update.message.text
    object_id = user_state.selected_object_id
    field_name = user_state.data.get('field_name')
    
    if not field_name:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø–æ–ª–µ.")
        user_state_manager.clear_state(user_id)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –æ–±—ä–µ–∫—Ç–∞
    result = object_service.update_object_field(object_id, field_name, text, user_id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state_manager.clear_state(user_id)
    
    if result['success']:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ–±—ä–µ–∫—Ç–∞
        await update.message.reply_text(
            f"‚úÖ {result['message']}\n\n–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{result['new_value']}</b>",
            parse_mode='HTML'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        await _show_updated_object_info(update, context, object_id)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        await update.message.reply_text(
            f"‚ùå {result['error']}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ–±—ä–µ–∫—Ç–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_object:{object_id}"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )


async def _show_updated_object_info(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
    obj_data = object_service.get_object_by_id(object_id)
    if not obj_data:
        await update.message.reply_text(
            "‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return
    
    # –¢–µ–ø–µ—Ä—å max_distance_meters —É–∂–µ –µ—Å—Ç—å –≤ obj_data
    max_distance = obj_data.get('max_distance_meters', 500)
    auto_close_minutes = obj_data.get('auto_close_minutes', 60)
    
    keyboard = [
        [
            InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field:{object_id}:name"),
            InlineKeyboardButton("üìç –ê–¥—Ä–µ—Å", callback_data=f"edit_field:{object_id}:address")
        ],
        [
            InlineKeyboardButton("üí∞ –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", callback_data=f"edit_field:{object_id}:hourly_rate"),
            InlineKeyboardButton("üìè –ú–∞–∫—Å. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", callback_data=f"edit_field:{object_id}:max_distance_meters")
        ],
        [
            InlineKeyboardButton("‚è∞ –ê–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω", callback_data=f"edit_field:{object_id}:auto_close_minutes")
        ],
        [
            InlineKeyboardButton("üïê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏", callback_data=f"manage_timeslots:{object_id}")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_objects"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text=f"‚öôÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
             f"üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {obj_data['name']}\n"
             f"üìç <b>–ê–¥—Ä–µ—Å:</b> {obj_data['address'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
             f"üí∞ <b>–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:</b> {obj_data['hourly_rate']}‚ÇΩ\n"
             f"üìè <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> {max_distance}–º\n"
             f"‚è∞ <b>–í—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è:</b> {auto_close_minutes} –º–∏–Ω.\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_retry_location_open(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
    user_state_manager.create_state(
        user_id=user_id,
        action=UserAction.OPEN_SHIFT,
        step=UserStep.LOCATION_REQUEST,
        selected_object_id=object_id
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
    obj_data = object_service.get_object_by_id(object_id)
    if not obj_data:
        await query.edit_message_text(
            text="‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return
    
    max_distance = obj_data.get('max_distance_meters', 500)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
    await query.edit_message_text(
        text=f"üìç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã</b>\n\n"
             f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj_data['name']}</b>\n"
             f"üìç –ê–¥—Ä–µ—Å: {obj_data['address'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
             f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {max_distance}–º\n\n"
             f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
        parse_mode='HTML',
        reply_markup=get_location_keyboard()
    )


async def _handle_retry_location_close(update: Update, context: ContextTypes.DEFAULT_TYPE, shift_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
    user_state_manager.create_state(
        user_id=user_id,
        action=UserAction.CLOSE_SHIFT,
        step=UserStep.LOCATION_REQUEST,
        selected_shift_id=shift_id
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–µ
    shift_data = shift_service.get_shift_by_id(shift_id)
    if not shift_data:
        await query.edit_message_text(
            text="‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
    obj_data = object_service.get_object_by_id(shift_data['object_id'])
    if not obj_data:
        await query.edit_message_text(
            text="‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return
    
    max_distance = obj_data.get('max_distance_meters', 500)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
    from core.utils.timezone_helper import timezone_helper
    user_timezone = timezone_helper.get_user_timezone(user_id)
    local_start_time = timezone_helper.format_local_time(shift_data['start_time'], user_timezone)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
    await query.edit_message_text(
        text=f"üìç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã</b>\n\n"
             f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj_data['name']}</b>\n"
             f"üìç –ê–¥—Ä–µ—Å: {obj_data['address'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
             f"üïê –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã: {local_start_time}\n"
             f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {max_distance}–º\n\n"
             f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
        parse_mode='HTML',
        reply_markup=get_location_keyboard()
    )

# ============================================================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ô–ú-–°–õ–û–¢–ê–ú–ò –û–ë–™–ï–ö–¢–û–í
# ============================================================================

async def _handle_manage_timeslots(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏ –æ–±—ä–µ–∫—Ç–∞."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
    obj_data = object_service.get_object_by_id(object_id)
    if not obj_data:
        await query.edit_message_text(
            text="‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã
    from apps.bot.services.time_slot_service import TimeSlotService
    time_slot_service = TimeSlotService()
    timeslots = await time_slot_service.get_object_timeslots(object_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"ÔøΩÔøΩ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏</b>\n\n"
    message += f"üè¢ <b>–û–±—ä–µ–∫—Ç:</b> {obj_data['name']}\n"
    message += f"‚è∞ <b>–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b> {obj_data.get('working_hours', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    message += f"üí∞ <b>–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:</b> {obj_data['hourly_rate']}‚ÇΩ/—á–∞—Å\n\n"
    
    if timeslots:
        message += f"ÔøΩÔøΩ <b>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã:</b> {len(timeslots)}\n"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ 3 —Ç–∞–π–º-—Å–ª–æ—Ç–∞
        from datetime import date
        upcoming_timeslots = [ts for ts in timeslots if ts['slot_date'] >= date.today()][:3]
        for ts in upcoming_timeslots:
            status = "üü¢" if ts['is_active'] else "üî¥"
            additional = " (–¥–æ–ø.)" if ts['is_additional'] else ""
            message += f"{status} {ts['slot_date'].strftime('%d.%m.%Y')} {ts['start_time']}-{ts['end_time']}{additional}\n"
    else:
        message += "üìÖ <b>–¢–∞–π–º-—Å–ª–æ—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã</b>\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–∞–π–º-—Å–ª–æ—Ç", callback_data=f"create_timeslot:{object_id}"),
            InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", callback_data=f"view_timeslots:{object_id}")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_timeslots:{object_id}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_timeslots:{object_id}")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–±—ä–µ–∫—Ç—É", callback_data=f"edit_object:{object_id}"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_create_timeslot(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    obj_data = object_service.get_object_by_id(object_id)
    
    message = f"‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞</b>\n\n"
    message += f"üè¢ <b>–û–±—ä–µ–∫—Ç:</b> {obj_data['name']}\n"
    message += f"‚è∞ <b>–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b> {obj_data.get('working_hours', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–∞–π–º-—Å–ª–æ—Ç–∞:"
    
    keyboard = [
        [
            InlineKeyboardButton("üïê –û–±—ã—á–Ω—ã–π —Å–ª–æ—Ç", callback_data=f"create_regular_slot:{object_id}"),
            InlineKeyboardButton("‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç", callback_data=f"create_additional_slot:{object_id}")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_view_timeslots(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    from apps.bot.services.time_slot_service import TimeSlotService
    time_slot_service = TimeSlotService()
    timeslots = await time_slot_service.get_object_timeslots(object_id)
    
    if not timeslots:
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç", callback_data=f"create_timeslot:{object_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìã <b>–¢–∞–π–º-—Å–ª–æ—Ç—ã –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
            "–£ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤.\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç?",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–∞–π–º-—Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–∞–º
    timeslots_by_date = {}
    for ts in timeslots:
        date_key = ts['slot_date']
        if date_key not in timeslots_by_date:
            timeslots_by_date[date_key] = []
        timeslots_by_date[date_key].append(ts)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    sorted_dates = sorted(timeslots_by_date.keys())
    
    message = f"üìã <b>–¢–∞–π–º-—Å–ª–æ—Ç—ã –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
    
    for slot_date in sorted_dates:
        date_timeslots = timeslots_by_date[slot_date]
        message += f"üìÖ <b>{slot_date.strftime('%d.%m.%Y')}</b>\n"
        
        for ts in date_timeslots:
            status = "üü¢" if ts['is_active'] else "üî¥"
            additional = " (–¥–æ–ø.)" if ts['is_additional'] else ""
            rate = f" {ts['hourly_rate']}‚ÇΩ/—á–∞—Å" if ts['hourly_rate'] else ""
            message += f"  {status} {ts['start_time']}-{ts['end_time']}{additional}{rate}\n"
        
        message += "\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data=f"create_timeslot:{object_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )

async def _handle_edit_timeslots(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    from apps.bot.services.time_slot_service import TimeSlotService
    time_slot_service = TimeSlotService()
    timeslots = await time_slot_service.get_object_timeslots(object_id)
    
    if not timeslots:
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç", callback_data=f"create_timeslot:{object_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤</b>\n\n"
            "–£ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤.\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç?",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    message = "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤</b>\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º-—Å–ª–æ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    
    keyboard = []
    for ts in timeslots[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        status = "üü¢" if ts['is_active'] else "üî¥"
        additional = " (–¥–æ–ø.)" if ts['is_additional'] else ""
        date_str = ts['slot_date'].strftime('%d.%m.%Y')
        time_str = f"{ts['start_time']}-{ts['end_time']}"
        
        keyboard.append([
            InlineKeyboardButton(
                f"{status} {date_str} {time_str}{additional}",
                callback_data=f"edit_timeslot:{ts['id']}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_delete_timeslots(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    from apps.bot.services.time_slot_service import TimeSlotService
    time_slot_service = TimeSlotService()
    timeslots = await time_slot_service.get_object_timeslots(object_id)
    
    if not timeslots:
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç", callback_data=f"create_timeslot:{object_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "ÔøΩÔøΩÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤</b>\n\n"
            "–£ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤.\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç?",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message = "ÔøΩÔøΩÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤</b>\n\n"
    message += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ –Ω–∞ –Ω–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Å–º–µ–Ω—ã.\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º-—Å–ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    
    keyboard = []
    for ts in timeslots[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        status = "üü¢" if ts['is_active'] else "üî¥"
        additional = " (–¥–æ–ø.)" if ts['is_additional'] else ""
        date_str = ts['slot_date'].strftime('%d.%m.%Y')
        time_str = f"{ts['start_time']}-{ts['end_time']}"
        
        keyboard.append([
            InlineKeyboardButton(
                f"{status} {date_str} {time_str}{additional}",
                callback_data=f"delete_timeslot:{ts['id']}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_create_regular_slot(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–∞–π–º-—Å–ª–æ—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    obj_data = object_service.get_object_by_id(object_id)
    
    message = f"üïê <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–∞–π–º-—Å–ª–æ—Ç–∞</b>\n\n"
    message += f"üè¢ <b>–û–±—ä–µ–∫—Ç:</b> {obj_data['name']}\n"
    message += f"‚è∞ <b>–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b> {obj_data.get('working_hours', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    message += "–û–±—ã—á–Ω—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –æ–±—ä–µ–∫—Ç–∞.\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞:"
    
    from datetime import date, timedelta
    today = date.today()
    
    keyboard = [
        [
            InlineKeyboardButton("ÔøΩÔøΩ –°–µ–≥–æ–¥–Ω—è", callback_data=f"create_slot_date:{object_id}:regular:{today.strftime('%Y-%m-%d')}"),
            InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data=f"create_slot_date:{object_id}:regular:{(today + timedelta(days=1)).strftime('%Y-%m-%d')}")
        ],
        [
            InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data=f"create_slot_custom_date:{object_id}:regular"),
            InlineKeyboardButton("üìÖ –°–æ–∑–¥–∞—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data=f"create_slot_week:{object_id}:regular")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"create_timeslot:{object_id}"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_create_additional_slot(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º-—Å–ª–æ—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    obj_data = object_service.get_object_by_id(object_id)
    
    message = f"‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º-—Å–ª–æ—Ç–∞</b>\n\n"
    message += f"üè¢ <b>–û–±—ä–µ–∫—Ç:</b> {obj_data['name']}\n"
    message += f"‚è∞ <b>–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b> {obj_data.get('working_hours', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    message += "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –¥–∞–∂–µ –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞:"
    
    from datetime import date, timedelta
    today = date.today()
    
    keyboard = [
        [
            InlineKeyboardButton("ÔøΩÔøΩ –°–µ–≥–æ–¥–Ω—è", callback_data=f"create_slot_date:{object_id}:additional:{today.strftime('%Y-%m-%d')}"),
            InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data=f"create_slot_date:{object_id}:additional:{(today + timedelta(days=1)).strftime('%Y-%m-%d')}")
        ],
        [
            InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data=f"create_slot_custom_date:{object_id}:additional"),
            InlineKeyboardButton("üìÖ –°–æ–∑–¥–∞—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data=f"create_slot_week:{object_id}:additional")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"create_timeslot:{object_id}"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )
