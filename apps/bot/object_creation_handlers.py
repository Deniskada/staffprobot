"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–æ—Ç–µ."""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from core.logging.logger import logger
from apps.bot.services.shift_service import ShiftService
from apps.bot.services.object_service import ObjectService

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
shift_service = ShiftService()
object_service = ObjectService()

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
user_object_creation_state = {}


async def handle_create_object_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_object_creation_state[user_id] = {
        'step': 'name',
        'data': {}
    }
    
    response = """
üè¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞</b>

üìù <b>–®–∞–≥ 1 –∏–∑ 5: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–û—Ñ–∏—Å –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π", "–ú–∞–≥–∞–∑–∏–Ω ‚Ññ1", "–°–∫–ª–∞–¥ –í–æ—Å—Ç–æ–∫")

üìç <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –û—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
‚Ä¢ –ü–æ–Ω—è—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:
"""
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=response,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def handle_create_object_input(update: Update, context: ContextTypes.DEFAULT_TYPE, user_input: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞."""
    user_id = update.effective_user.id
    
    if user_id not in user_object_creation_state:
        return  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ
    
    state = user_object_creation_state[user_id]
    step = state['step']
    
    if step == 'name':
        await _handle_object_name_input(update, context, user_input)
    elif step == 'address':
        await _handle_object_address_input(update, context, user_input)
    elif step == 'coordinates':
        await _handle_object_coordinates_input(update, context, user_input)
    elif step == 'schedule':
        await _handle_object_schedule_input(update, context, user_input)
    elif step == 'hourly_rate':
        await _handle_object_hourly_rate_input(update, context, user_input)


async def _handle_object_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE, name: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞."""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    if len(name.strip()) < 3:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='HTML'
        )
        return
    
    if len(name.strip()) > 100:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='HTML'
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    user_object_creation_state[user_id]['data']['name'] = name.strip()
    user_object_creation_state[user_id]['step'] = 'address'
    
    response = f"""
üè¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {name.strip()}</b>

üìù <b>–®–∞–≥ 2 –∏–∑ 5: –ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞</b>

–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1", "–°–ü–±, –ù–µ–≤—Å–∫–∏–π –ø—Ä., 50")

üìç <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å –≥–æ—Ä–æ–¥–æ–º
‚Ä¢ –û—Ç 10 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ü–æ–Ω—è—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è

‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞:
"""
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=response,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_object_address_input(update: Update, context: ContextTypes.DEFAULT_TYPE, address: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –æ–±—ä–µ–∫—Ç–∞."""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    if len(address.strip()) < 10:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='HTML'
        )
        return
    
    if len(address.strip()) > 200:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='HTML'
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    user_object_creation_state[user_id]['data']['address'] = address.strip()
    user_object_creation_state[user_id]['step'] = 'coordinates'
    
    name = user_object_creation_state[user_id]['data']['name']
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    location_requirements = shift_service.get_location_requirements()
    
    response = f"""
üè¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {name}</b>
üìç <b>–ê–¥—Ä–µ—Å:</b> {address.strip()}

üìù <b>–®–∞–≥ 3 –∏–∑ 5: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞</b>

–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —à–∏—Ä–æ—Ç–∞,–¥–æ–ª–≥–æ—Ç–∞

üìç <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –§–æ—Ä–º–∞—Ç: {location_requirements['coordinate_format']}
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {location_requirements['precision_required']}

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ –ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å: 55.7539,37.6208
‚Ä¢ –°–ü–±, –î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å: 59.9387,30.3162
‚Ä¢ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, —Ü–µ–Ω—Ç—Ä: 55.0084,82.9357

‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞:
"""
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=response,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_object_coordinates_input(update: Update, context: ContextTypes.DEFAULT_TYPE, coordinates: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±—ä–µ–∫—Ç–∞."""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    from core.geolocation.location_validator import LocationValidator
    validator = LocationValidator()
    validation = validator.validate_coordinates(coordinates.strip())
    
    if not validation['valid']:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå <b>–û—à–∏–±–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:</b>\n{validation['error']}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='HTML'
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    user_object_creation_state[user_id]['data']['coordinates'] = coordinates.strip()
    user_object_creation_state[user_id]['step'] = 'schedule'
    
    name = user_object_creation_state[user_id]['data']['name']
    address = user_object_creation_state[user_id]['data']['address']
    
    response = f"""
üè¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {name}</b>
üìç <b>–ê–¥—Ä–µ—Å:</b> {address}
üåç <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {coordinates.strip()}

üìù <b>–®–∞–≥ 4 –∏–∑ 5: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</b>

–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–ß:–ú–ú-–ß–ß:–ú–ú

üìç <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú-–ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00-18:00)
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ –û—Ñ–∏—Å: 09:00-18:00
‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω: 08:00-22:00
‚Ä¢ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ: 00:00-23:59

‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:
"""
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=response,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_object_schedule_input(update: Update, context: ContextTypes.DEFAULT_TYPE, schedule: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –æ–±—ä–µ–∫—Ç–∞."""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –ü–∞—Ä—Å–∏–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    try:
        if '-' not in schedule:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        opening_str, closing_str = schedule.strip().split('-', 1)
        opening_str = opening_str.strip()
        closing_str = closing_str.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        from datetime import time
        opening_time = time.fromisoformat(opening_str)
        closing_time = time.fromisoformat(closing_str)
        
        if closing_time <= opening_time:
            raise ValueError("–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è")
        
    except ValueError as e:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏:</b>\n{str(e)}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú-–ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00-18:00)\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='HTML'
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    user_object_creation_state[user_id]['data']['opening_time'] = opening_str
    user_object_creation_state[user_id]['data']['closing_time'] = closing_str
    user_object_creation_state[user_id]['step'] = 'hourly_rate'
    
    name = user_object_creation_state[user_id]['data']['name']
    address = user_object_creation_state[user_id]['data']['address']
    coordinates = user_object_creation_state[user_id]['data']['coordinates']
    
    response = f"""
üè¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {name}</b>
üìç <b>–ê–¥—Ä–µ—Å:</b> {address}
üåç <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {coordinates}
üïí <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> {opening_str} - {closing_str}

üìù <b>–®–∞–≥ 5 –∏–∑ 5: –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞</b>

–í–≤–µ–¥–∏—Ç–µ —á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É –≤ —Ä—É–±–ª—è—Ö (—á–∏—Å–ª–æ)

üìç <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500, 1000, 1500)
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 100 —Ä—É–±–ª–µ–π
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 10000 —Ä—É–±–ª–µ–π

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞: 800
‚Ä¢ –¢–æ—Ä–≥–æ–≤–ª—è: 600
‚Ä¢ –°–∫–ª–∞–¥: 1200

‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É:
"""
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=response,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_object_hourly_rate_input(update: Update, context: ContextTypes.DEFAULT_TYPE, hourly_rate_str: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞."""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
    try:
        hourly_rate = float(hourly_rate_str.strip())
        
        if hourly_rate < 100:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 100 —Ä—É–±–ª–µ–π")
        
        if hourly_rate > 10000:
            raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10000 —Ä—É–±–ª–µ–π")
            
    except ValueError as e:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå <b>–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏:</b>\n{str(e)}\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 100 –¥–æ 10000. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='HTML'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞
    data = user_object_creation_state[user_id]['data']
    data['hourly_rate'] = hourly_rate
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    result = object_service.create_object(
        name=data['name'],
        address=data['address'],
        coordinates=data['coordinates'],
        opening_time=data['opening_time'],
        closing_time=data['closing_time'],
        hourly_rate=data['hourly_rate'],
        owner_id=user_id
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_object_creation_state:
        del user_object_creation_state[user_id]
    
    if result['success']:
        response = f"""
‚úÖ <b>–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>

üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}
üìç <b>–ê–¥—Ä–µ—Å:</b> {data['address']}
üåç <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {data['coordinates']}
üïí <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> {data['opening_time']} - {data['closing_time']}
üí∞ <b>–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:</b> {data['hourly_rate']} ‚ÇΩ

üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–º–µ–Ω—ã –Ω–∞ —ç—Ç–æ–º –æ–±—ä–µ–∫—Ç–µ
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã

–û–±—ä–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!
"""
        
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="open_shift"),
                InlineKeyboardButton("üè¢ –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_object")
            ],
            [
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")
            ]
        ]
        
    else:
        response = f"""
‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞</b>

{result['error']}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
        
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_object"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=response,
        parse_mode='HTML',
        reply_markup=reply_markup
    )
