"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤."""

import io
from datetime import datetime, date, timedelta
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler, ConversationHandler, MessageHandler, filters
from core.logging.logger import logger
from core.state.user_state_manager import UserStateManager, UserAction, UserStep
from apps.analytics.analytics_service import AnalyticsService
from apps.analytics.export_service import ExportService
from apps.bot.services.object_service import ObjectService
from apps.bot.services.user_service import UserService

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –æ—Ç—á–µ—Ç–æ–≤
REPORT_TYPE, REPORT_OBJECT, REPORT_PERIOD, REPORT_FORMAT, DASHBOARD = range(5)


class AnalyticsHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        self.state_manager = UserStateManager()
        self.analytics_service = AnalyticsService()
        self.export_service = ExportService()
        self.object_service = ObjectService()
        self.user_service = UserService()
        logger.info("AnalyticsHandlers initialized")
    
    async def reports_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤."""
        try:
            user_id = update.effective_user.id
            logger.info(f"reports_menu called for user {user_id}")
            
            keyboard = [
                [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –æ–±—ä–µ–∫—Ç—É", callback_data="report_object")],
                [InlineKeyboardButton("üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="report_personal")],
                [InlineKeyboardButton("üìà –î–∞—à–±–æ—Ä–¥", callback_data="report_dashboard")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = "üìã *–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"
            
            if update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.edit_message_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            
            return REPORT_TYPE
            
        except Exception as e:
            logger.error(f"Error in reports_menu: {e}")
            await update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤")
            return ConversationHandler.END
    
    async def handle_report_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞."""
        try:
            query = update.callback_query
            await query.answer()
            
            user_id = update.effective_user.id
            choice = query.data
            logger.info(f"handle_report_type called for user {user_id}, choice: {choice}")
            
            if choice == "cancel_report":
                await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return ConversationHandler.END
            
            context.user_data['report_type'] = choice
            
            if choice == "report_dashboard":
                # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
                return await self._show_dashboard(update, context)
            
            elif choice == "report_personal":
                # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞
                return await self._select_report_period(update, context)
            
            elif choice == "report_object":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return await self._select_report_object(update, context)
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error in handle_report_type: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞")
            return ConversationHandler.END
    
    async def _select_report_object(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–í—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞."""
        try:
            user_id = update.effective_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            objects = self.object_service.get_user_objects(user_id)
            
            if not objects:
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                keyboard = [
                    [InlineKeyboardButton("üè¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="create_object")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.callback_query.edit_message_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞\n\n"
                    "üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ –Ω–µ–º—É.",
                    reply_markup=reply_markup
                )
                return ConversationHandler.END
            
            keyboard = []
            for obj in objects:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üè¢ {obj['name']}", 
                        callback_data=f"object_{obj['id']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text="üè¢ *–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞:*",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return REPORT_OBJECT
            
        except Exception as e:
            logger.error(f"Error in _select_report_object: {e}")
            await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤")
            return ConversationHandler.END
    
    async def handle_object_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞."""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "cancel_report":
                await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return ConversationHandler.END
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞
            object_id = int(query.data.replace("object_", ""))
            context.user_data['object_id'] = object_id
            
            return await self._select_report_period(update, context)
            
        except Exception as e:
            logger.error(f"Error in handle_object_selection: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞")
            return ConversationHandler.END
    
    async def _select_report_period(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞."""
        try:
            keyboard = [
                [InlineKeyboardButton("üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="period_today")],
                [InlineKeyboardButton("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="period_week")],
                [InlineKeyboardButton("üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")],
                [InlineKeyboardButton("üìÖ –ó–∞ 3 –º–µ—Å—è—Ü–∞", callback_data="period_3months")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text="üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:*",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return REPORT_PERIOD
            
        except Exception as e:
            logger.error(f"Error in _select_report_period: {e}")
            await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞")
            return ConversationHandler.END
    
    async def handle_period_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞."""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "cancel_report":
                await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return ConversationHandler.END
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            today = date.today()
            
            if query.data == "period_today":
                start_date = end_date = today
            elif query.data == "period_week":
                start_date = today - timedelta(days=6)
                end_date = today
            elif query.data == "period_month":
                start_date = today - timedelta(days=29)
                end_date = today
            elif query.data == "period_3months":
                start_date = today - timedelta(days=89)
                end_date = today
            else:
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞")
                return ConversationHandler.END
            
            context.user_data['start_date'] = start_date
            context.user_data['end_date'] = end_date
            
            return await self._select_report_format(update, context)
            
        except Exception as e:
            logger.error(f"Error in handle_period_selection: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–∏–æ–¥–∞")
            return ConversationHandler.END
    
    async def _select_report_format(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞."""
        try:
            keyboard = [
                [InlineKeyboardButton("üì± –ü–æ–∫–∞–∑–∞—Ç—å –≤ —á–∞—Ç–µ", callback_data="format_text")],
                [InlineKeyboardButton("üìÑ PDF", callback_data="format_pdf")],
                [InlineKeyboardButton("üìä Excel", callback_data="format_excel")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text="üìã *–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:*",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return REPORT_FORMAT
            
        except Exception as e:
            logger.error(f"Error in _select_report_format: {e}")
            await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ä–º–∞—Ç–∞")
            return ConversationHandler.END
    
    async def handle_format_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞."""
        try:
            query = update.callback_query
            await query.answer()
            
            user_id = update.effective_user.id
            
            if query.data == "cancel_report":
                await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return ConversationHandler.END
            
            format_type = query.data.replace("format_", "")
            report_type = context.user_data.get('report_type')
            start_date = context.user_data.get('start_date')
            end_date = context.user_data.get('end_date')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await query.edit_message_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if report_type == "report_object":
                object_id = context.user_data.get('object_id')
                
                # –ü–æ–ª—É—á–∞–µ–º User ID –ø–æ Telegram ID
                user_record = self.user_service.get_user_by_telegram_id(user_id)
                if not user_record:
                    await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return ConversationHandler.END
                
                report_data = self.analytics_service.get_object_report(
                    object_id=object_id,
                    start_date=start_date,
                    end_date=end_date,
                    owner_id=user_record['id']
                )
            elif report_type == "report_personal":
                # –ü–æ–ª—É—á–∞–µ–º User ID –ø–æ Telegram ID –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                user_record = self.user_service.get_user_by_telegram_id(user_id)
                if not user_record:
                    await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return ConversationHandler.END
                
                report_data = self.analytics_service.get_personal_report(
                    user_id=user_record['id'],
                    start_date=start_date,
                    end_date=end_date
                )
            else:
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞")
                return ConversationHandler.END
            
            if "error" in report_data:
                await query.edit_message_text(f"‚ùå {report_data['error']}")
                return ConversationHandler.END
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if format_type == "text":
                await self._send_text_report(update, context, report_data, report_type)
            elif format_type == "pdf":
                await self._send_pdf_report(update, context, report_data, report_type)
            elif format_type == "excel":
                await self._send_excel_report(update, context, report_data, report_type)
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error in handle_format_selection: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
            return ConversationHandler.END
    
    async def _send_text_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               report_data: Dict[str, Any], report_type: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        try:
            if report_type == "report_object":
                text = self._format_object_report_text(report_data)
            else:
                text = self._format_personal_report_text(report_data)
            
            await update.callback_query.edit_message_text(
                text=text,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error sending text report: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
    
    async def _send_pdf_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                              report_data: Dict[str, Any], report_type: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ PDF –æ—Ç—á–µ—Ç–∞."""
        try:
            if report_type == "report_object":
                pdf_data = self.export_service.export_object_report_to_pdf(report_data)
                filename = f"object_report_{report_data['object']['name']}_{datetime.now().strftime('%Y%m%d')}.pdf"
            else:
                pdf_data = self.export_service.export_personal_report_to_pdf(report_data)
                filename = f"personal_report_{report_data['user']['name']}_{datetime.now().strftime('%Y%m%d')}.pdf"
            
            await update.callback_query.edit_message_text("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            pdf_file = io.BytesIO(pdf_data)
            pdf_file.name = filename
            
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=pdf_file,
                filename=filename,
                caption=f"üìÑ PDF –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!"
            )
            
        except Exception as e:
            logger.error(f"Error sending PDF report: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–∞")
    
    async def _send_excel_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                report_data: Dict[str, Any], report_type: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Excel –æ—Ç—á–µ—Ç–∞."""
        try:
            if report_type == "report_object":
                excel_data = self.export_service.export_object_report_to_excel(report_data)
                filename = f"object_report_{report_data['object']['name']}_{datetime.now().strftime('%Y%m%d')}.xlsx"
            else:
                excel_data = self.export_service.export_personal_report_to_excel(report_data)
                filename = f"personal_report_{report_data['user']['name']}_{datetime.now().strftime('%Y%m%d')}.xlsx"
            
            await update.callback_query.edit_message_text("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            excel_file = io.BytesIO(excel_data)
            excel_file.name = filename
            
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=excel_file,
                filename=filename,
                caption=f"üìä Excel –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!"
            )
            
        except Exception as e:
            logger.error(f"Error sending Excel report: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –æ—Ç—á–µ—Ç–∞")
    
    async def _show_dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑ –¥–∞—à–±–æ—Ä–¥–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏."""
        try:
            user_id = update.effective_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º User ID –ø–æ Telegram ID –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
            user_record = self.user_service.get_user_by_telegram_id(user_id)
            if not user_record:
                await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
            metrics = self.analytics_service.get_dashboard_metrics(user_record['id'])
            
            if "error" in metrics:
                await update.callback_query.edit_message_text(f"‚ùå {metrics['error']}")
                return ConversationHandler.END
            
            text = self._format_dashboard_text(metrics)
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_dashboard")],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel_report")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return DASHBOARD
            
        except Exception as e:
            logger.error(f"Error showing dashboard: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞")
            return ConversationHandler.END
    
    def _format_object_report_text(self, report_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–±—ä–µ–∫—Ç—É."""
        obj = report_data['object']
        period = report_data['period']
        summary = report_data['summary']
        
        text = f"üìä *–û—Ç—á–µ—Ç –ø–æ –æ–±—ä–µ–∫—Ç—É: {obj['name']}*\n\n"
        text += f"üè¢ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ:*\n"
        text += f"‚Ä¢ –ê–¥—Ä–µ—Å: {obj['address'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {obj['working_hours']}\n"
        text += f"‚Ä¢ –°—Ç–∞–≤–∫–∞: {obj['hourly_rate']} ‚ÇΩ/—á–∞—Å\n\n"
        
        text += f"üìÖ *–ü–µ—Ä–∏–æ–¥:* {period['start_date']} - {period['end_date']} ({period['days']} –¥–Ω.)\n\n"
        
        text += f"üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–º–µ–Ω: {summary['total_shifts']}\n"
        text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {summary['completed_shifts']}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {summary['active_shifts']}\n"
        text += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {summary['total_hours']} —á\n"
        text += f"‚Ä¢ –û–±—â–∞—è –æ–ø–ª–∞—Ç–∞: {summary['total_payment']} ‚ÇΩ\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–º–µ–Ω–∞: {summary['avg_shift_duration']} —á\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {summary['avg_daily_hours']} —á\n\n"
        
        if report_data.get('employees'):
            text += f"üë• *–¢–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:*\n"
            for i, emp in enumerate(report_data['employees'][:5], 1):
                text += f"{i}. {emp['name']}: {emp['shifts']} —Å–º–µ–Ω, {emp['hours']} —á, {emp['payment']} ‚ÇΩ\n"
        
        return text
    
    def _format_personal_report_text(self, report_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        user = report_data['user']
        period = report_data['period']
        summary = report_data['summary']
        
        text = f"üë§ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {user['name']}*\n\n"
        text += f"üìÖ *–ü–µ—Ä–∏–æ–¥:* {period['start_date']} - {period['end_date']} ({period['days']} –¥–Ω.)\n\n"
        
        text += f"üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–º–µ–Ω: {summary['total_shifts']}\n"
        text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {summary['completed_shifts']}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {summary['active_shifts']}\n"
        text += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {summary['total_hours']} —á\n"
        text += f"‚Ä¢ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {summary['total_earnings']} ‚ÇΩ\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–º–µ–Ω–∞: {summary['avg_shift_duration']} —á\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –¥–µ–Ω—å: {summary['avg_daily_earnings']} ‚ÇΩ\n\n"
        
        if report_data.get('objects'):
            text += f"üè¢ *–ü–æ –æ–±—ä–µ–∫—Ç–∞–º:*\n"
            for i, obj in enumerate(report_data['objects'][:5], 1):
                text += f"{i}. {obj['name']}: {obj['shifts']} —Å–º–µ–Ω, {obj['hours']} —á, {obj['earnings']} ‚ÇΩ\n"
        
        return text
    
    def _format_dashboard_text(self, metrics: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞."""
        text = f"üìä *–î–∞—à–±–æ—Ä–¥ –≤–ª–∞–¥–µ–ª—å—Ü–∞*\n\n"
        
        text += f"üè¢ *–û–±—ä–µ–∫—Ç—ã:* {metrics['objects_count']}\n"
        text += f"üü¢ *–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã:* {metrics['active_shifts']}\n\n"
        
        today = metrics['today_stats']
        text += f"üìÖ *–°–µ–≥–æ–¥–Ω—è:*\n"
        text += f"‚Ä¢ –°–º–µ–Ω—ã: {today['shifts']}\n"
        text += f"‚Ä¢ –ß–∞—Å—ã: {today['hours']} —á\n"
        text += f"‚Ä¢ –î–æ—Ö–æ–¥: {today['earnings']} ‚ÇΩ\n\n"
        
        week = metrics['week_stats']
        text += f"üìä *–ó–∞ –Ω–µ–¥–µ–ª—é:*\n"
        text += f"‚Ä¢ –°–º–µ–Ω—ã: {week['shifts']}\n"
        text += f"‚Ä¢ –ß–∞—Å—ã: {week['hours']} —á\n"
        text += f"‚Ä¢ –î–æ—Ö–æ–¥: {week['earnings']} ‚ÇΩ\n\n"
        
        month = metrics['month_stats']
        text += f"üìà *–ó–∞ –º–µ—Å—è—Ü:*\n"
        text += f"‚Ä¢ –°–º–µ–Ω—ã: {month['shifts']}\n"
        text += f"‚Ä¢ –ß–∞—Å—ã: {month['hours']} —á\n"
        text += f"‚Ä¢ –î–æ—Ö–æ–¥: {month['earnings']} ‚ÇΩ\n\n"
        
        if metrics.get('top_objects'):
            text += f"üèÜ *–¢–æ–ø –æ–±—ä–µ–∫—Ç—ã:*\n"
            for i, obj in enumerate(metrics['top_objects'][:3], 1):
                text += f"{i}. {obj['name']}: {obj['shifts']} —Å–º–µ–Ω\n"
        
        return text
    
    async def handle_dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–∞—à–±–æ—Ä–¥–µ."""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "refresh_dashboard":
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥
                return await self._show_dashboard(update, context)
            elif query.data == "cancel_report":
                await query.edit_message_text("‚ùå –î–∞—à–±–æ—Ä–¥ –∑–∞–∫—Ä—ã—Ç")
                return ConversationHandler.END
            
            return DASHBOARD
            
        except Exception as e:
            logger.error(f"Error in handle_dashboard: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            return ConversationHandler.END
    
    async def cancel_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞."""
        await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return ConversationHandler.END
    
    def get_conversation_handler(self) -> ConversationHandler:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –æ—Ç—á–µ—Ç–æ–≤."""
        return ConversationHandler(
            entry_points=[
                CommandHandler("reports", self.reports_menu),
                CallbackQueryHandler(self.reports_menu, pattern="^get_report$")
            ],
            states={
                REPORT_TYPE: [CallbackQueryHandler(self.handle_report_type)],
                REPORT_OBJECT: [CallbackQueryHandler(self.handle_object_selection)],
                REPORT_PERIOD: [CallbackQueryHandler(self.handle_period_selection)],
                REPORT_FORMAT: [CallbackQueryHandler(self.handle_format_selection)],
                DASHBOARD: [CallbackQueryHandler(self.handle_dashboard)]
            },
            fallbacks=[
                CommandHandler("cancel", self.cancel_report),
                CallbackQueryHandler(self.cancel_report, pattern="^cancel_report$")
            ]
        )
