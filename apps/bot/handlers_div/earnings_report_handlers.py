"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import ContextTypes, ConversationHandler
from core.logging.logger import logger
from core.database.connection import get_sync_session
from domain.entities.user import User
from domain.entities.shift import Shift
from domain.entities.object import Object
from sqlalchemy import select, and_, func
from datetime import datetime, timedelta, date
from typing import Dict, Any, List
import pytz

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(SELECT_WEEK, CUSTOM_DATES, SHOW_REPORT) = range(3)


class EarningsReportHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç—á–µ—Ç–æ–≤."""
        logger.info("EarningsReportHandlers initialized")
    
    def get_last_4_weeks(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏ 3 –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–¥–µ–ª–∏ (—Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)."""
        today = date.today()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        days_since_monday = today.weekday()
        current_monday = today - timedelta(days=days_since_monday)
        
        weeks = []
        # –°–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è, –ø–æ—Ç–æ–º 3 –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
        for i in range(4):
            week_start = current_monday - timedelta(weeks=i)
            week_end = week_start + timedelta(days=6)
            
            label = f"{week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m.%Y')}"
            if i == 0:
                label = f"üìç –¢–µ–∫—É—â–∞—è ({label})"
            
            weeks.append({
                'start': week_start,
                'end': week_end,
                'label': label
            })
        
        return weeks
    
    async def start_earnings_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É."""
        query = update.callback_query
        user_id = query.from_user.id
        logger.info(f"Starting earnings report for user {user_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π user_id
            with get_sync_session() as session:
                user_query = select(User).where(User.telegram_id == user_id)
                user_result = session.execute(user_query)
                user = user_result.scalar_one_or_none()
                
                if not user:
                    await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                    return ConversationHandler.END
                
                context.user_data['user_id'] = user.id
                
                # –ü–æ–ª—É—á–∞–µ–º 4 –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
                weeks = self.get_last_4_weeks()
                context.user_data['weeks'] = weeks
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–µ–¥–µ–ª—è–º–∏
                keyboard = []
                for i, week in enumerate(weeks):
                    keyboard.append([
                        InlineKeyboardButton(
                            f"üìÖ {week['label']}", 
                            callback_data=f"week_{i}"
                        )
                    ])
                
                keyboard.append([
                    InlineKeyboardButton("üìù –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é", callback_data="custom_dates")
                ])
                keyboard.append([
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")
                ])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "üìä **–û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É**\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                
                return SELECT_WEEK
                
        except Exception as e:
            logger.error(f"Error starting earnings report: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END
    
    async def handle_week_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏."""
        query = update.callback_query
        
        if query.data == "custom_dates":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç
            from core.state import user_state_manager, UserAction, UserStep
            user_state_manager.set_state(
                query.from_user.id,
                UserAction.REPORT_DATES,
                UserStep.WAITING_INPUT
            )
            
            await query.edit_message_text(
                "üìù **–í—ã–±–æ—Ä –¥–∞—Ç –≤—Ä—É—á–Ω—É—é**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "<code>01.01.2024 - 07.01.2024</code>\n\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code> –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –Ω–µ–¥–µ–ª—å.",
                parse_mode='HTML'
            )
            return CUSTOM_DATES
        elif query.data == "cancel_report":
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from core.state import user_state_manager
            user_state_manager.clear_state(query.from_user.id)
            
            await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return ConversationHandler.END
        elif query.data.startswith("week_"):
            week_index = int(query.data.split("_")[1])
            weeks = context.user_data['weeks']
            selected_week = weeks[week_index]
            
            context.user_data['start_date'] = selected_week['start']
            context.user_data['end_date'] = selected_week['end']
            
            return await self.generate_earnings_report(update, context)
        
        return SELECT_WEEK
    
    async def handle_custom_dates(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç –≤—Ä—É—á–Ω—É—é."""
        text = update.message.text.strip().lower()
        
        if text == "–æ—Ç–º–µ–Ω–∞":
            # –°–æ–∑–¥–∞–µ–º callback_query –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            fake_query = CallbackQuery(
                id="fake",
                from_user=update.effective_user,
                chat_instance="fake",
                data="get_report"
            )
            fake_query.message = update.message
            fake_update = Update(update_id=update.update_id, callback_query=fake_query)
            return await self.start_earnings_report(fake_update, context)
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "01.01.2024 - 07.01.2024"
            if " - " in text:
                start_str, end_str = text.split(" - ", 1)
                start_date = datetime.strptime(start_str.strip(), "%d.%m.%Y").date()
                end_date = datetime.strptime(end_str.strip(), "%d.%m.%Y").date()
                
                if start_date > end_date:
                    await update.message.reply_text("‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
                    return CUSTOM_DATES
                
                context.user_data['start_date'] = start_date
                context.user_data['end_date'] = end_date
                
                # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                with get_sync_session() as session:
                    user_query = select(User).where(User.telegram_id == update.effective_user.id)
                    user_result = session.execute(user_query)
                    user = user_result.scalar_one_or_none()
                    
                    if not user:
                        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                        return ConversationHandler.END
                    
                    context.user_data['user_id'] = user.id
                
                return await self.generate_earnings_report(update, context)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "<code>01.01.2024 - 07.01.2024</code>",
                    parse_mode='HTML'
                )
                return CUSTOM_DATES
                
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "<code>01.01.2024 - 07.01.2024</code>",
                parse_mode='HTML'
            )
            return CUSTOM_DATES
    
    async def generate_earnings_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É."""
        logger.info(f"Starting earnings report generation")
        
        user_id = context.user_data.get('user_id')
        start_date = context.user_data.get('start_date')
        end_date = context.user_data.get('end_date')
        
        logger.info(f"Report data: user_id={user_id}, start_date={start_date}, end_date={end_date}")
        
        if not user_id or not start_date or not end_date:
            logger.error(f"Missing report data: user_id={user_id}, start_date={start_date}, end_date={end_date}")
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
            return ConversationHandler.END
        
        try:
            with get_sync_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥
                shifts_query = select(Shift, Object).join(
                    Object, Shift.object_id == Object.id
                ).where(
                    and_(
                        Shift.user_id == user_id,
                        Shift.status == 'completed',
                        func.date(Shift.start_time) >= start_date,
                        func.date(Shift.start_time) <= end_date
                    )
                ).order_by(Shift.start_time)
                
                shifts_result = session.execute(shifts_query)
                shifts_data = shifts_result.all()
                
                logger.info(f"Found {len(shifts_data)} completed shifts for period {start_date} - {end_date}")
                
                if not shifts_data:
                    message_text = (
                        f"üìä **–û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É**\n\n"
                        f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n\n"
                        f"‚ùå –ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ —É –≤–∞—Å –Ω–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω."
                    )
                    if hasattr(update, 'callback_query') and update.callback_query:
                        await update.callback_query.edit_message_text(message_text, parse_mode='Markdown')
                    else:
                        await update.message.reply_text(message_text, parse_mode='Markdown')
                    return ConversationHandler.END
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–º–µ–Ω—ã –ø–æ –¥–Ω—è–º –∏ –æ–±—ä–µ–∫—Ç–∞–º
                daily_earnings = {}
                total_earnings = 0
                total_hours = 0
                
                for shift, object_obj in shifts_data:
                    shift_date = shift.start_time.date()
                    object_name = object_obj.name
                    hourly_rate = float(shift.hourly_rate or 0)
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã
                    if shift.start_time and shift.end_time:
                        duration = shift.end_time - shift.start_time
                        hours = duration.total_seconds() / 3600
                    else:
                        hours = 0
                    
                    earnings = hours * hourly_rate
                    
                    if shift_date not in daily_earnings:
                        daily_earnings[shift_date] = {}
                    
                    if object_name not in daily_earnings[shift_date]:
                        daily_earnings[shift_date][object_name] = {
                            'hours': 0,
                            'earnings': 0,
                            'shifts': 0
                        }
                    
                    daily_earnings[shift_date][object_name]['hours'] += hours
                    daily_earnings[shift_date][object_name]['earnings'] += earnings
                    daily_earnings[shift_date][object_name]['shifts'] += 1
                    
                    total_earnings += earnings
                    total_hours += hours
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report_text = f"üìä **–û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É**\n\n"
                report_text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n\n"
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ
                sorted_days = sorted(daily_earnings.keys())
                
                for day in sorted_days:
                    day_earnings = daily_earnings[day]
                    day_total = sum(obj['earnings'] for obj in day_earnings.values())
                    day_hours = sum(obj['hours'] for obj in day_earnings.values())
                    
                    report_text += f"üìÖ **{day.strftime('%d.%m.%Y')}** ({day.strftime('%A')})\n"
                    
                    for object_name, data in day_earnings.items():
                        report_text += f"  üè¢ {object_name}: {data['hours']:.1f}—á √ó {data['earnings']/data['hours']:.0f}‚ÇΩ = {data['earnings']:.0f}‚ÇΩ\n"
                    
                    report_text += f"  üí∞ **–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: {day_total:.0f}‚ÇΩ ({day_hours:.1f}—á)**\n\n"
                
                report_text += f"üí∞ **–û–±—â–∏–π –∏—Ç–æ–≥: {total_earnings:.0f}‚ÇΩ ({total_hours:.1f}—á)**\n"
                report_text += f"üìà –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: {total_earnings/total_hours:.0f}‚ÇΩ/—á" if total_hours > 0 else "üìà –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: 0‚ÇΩ/—á"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard = [[
                    InlineKeyboardButton("üìä –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="get_report"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if hasattr(update, 'callback_query') and update.callback_query:
                    await update.callback_query.edit_message_text(
                        report_text,
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
                else:
                    await update.message.reply_text(
                        report_text,
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                from core.state import user_state_manager
                user_state_manager.clear_state(update.effective_user.id)
                
                return ConversationHandler.END
                
        except Exception as e:
            logger.error(f"Error generating earnings report: {e}")
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END
