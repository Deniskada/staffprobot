"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏."""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from core.logging.logger import logger
from core.auth.user_manager import user_manager
from apps.bot.services.shift_service import ShiftService
from apps.bot.services.object_service import ObjectService
from core.database.session import get_async_session
from core.utils.timezone_helper import timezone_helper
from domain.entities.object import Object
from sqlalchemy import select
from core.state import user_state_manager, UserAction, UserStep
from .utils import get_location_keyboard

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
shift_service = ShiftService()
object_service = ObjectService()


async def _handle_open_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã."""
    query = update.callback_query
    user = query.from_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user_manager.is_user_registered(user_id):
        await query.edit_message_text(
            text="‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode='HTML'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã
    try:
        active_shifts = await shift_service.get_user_shifts(user_id, status='active')
        if active_shifts:
            await query.edit_message_text(
                text="‚ùå <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞</b>\n\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–æ–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É.",
                parse_mode='HTML'
            )
            return
    except Exception as e:
        logger.error(f"Error checking active shifts for user {user_id}: {e}")
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä–∞–º
    try:
        from apps.bot.services.employee_objects_service import EmployeeObjectsService
        
        employee_objects_service = EmployeeObjectsService()
        objects = await employee_objects_service.get_employee_objects(user_id)
        
        if not objects:
            await query.edit_message_text(
                text="‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤</b>\n\n–£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä–µ–∫—Ç–∞.",
                parse_mode='HTML'
            )
            return
            
        # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state_manager.create_state(
            user_id=user_id,
            action=UserAction.OPEN_SHIFT,
            step=UserStep.OBJECT_SELECTION
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
        keyboard = []
        for obj in objects:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
            contracts_count = len(obj.get('contracts', []))
            contracts_info = f" ({contracts_count} –¥–æ–≥–æ–≤–æ—Ä)" if contracts_count > 1 else ""
            
            keyboard.append([
                InlineKeyboardButton(
                    f"üè¢ {obj['name']}{contracts_info}", 
                    callback_data=f"open_shift_object:{obj['id']}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="üîÑ <b>–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
            
    except Exception as e:
        logger.error(f"Error getting objects: {e}")
        await query.edit_message_text(
            text="‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode='HTML'
        )


async def _handle_close_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã."""
    query = update.callback_query
    user = query.from_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user_manager.is_user_registered(user_id):
        await query.edit_message_text(
            text="‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode='HTML'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        active_shifts = await shift_service.get_user_shifts(user_id, status='active')
        
        if not active_shifts:
            await query.edit_message_text(
                text="‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω</b>\n\n–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–º–µ–Ω—É.",
                parse_mode='HTML'
            )
            return
        
        # –ï—Å–ª–∏ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
        if len(active_shifts) == 1:
            shift = active_shifts[0]  # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state_manager.create_state(
                user_id=user_id,
                action=UserAction.CLOSE_SHIFT,
                step=UserStep.LOCATION_REQUEST,
                selected_shift_id=shift['id']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ —Å–º–µ–Ω—ã
            async with get_async_session() as session:
                obj_query = select(Object).where(Object.id == shift['object_id'])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è
                obj_result = await session.execute(obj_query)
                obj = obj_result.scalar_one_or_none()
                
                if not obj:
                    await query.edit_message_text(
                        text="‚ùå –û–±—ä–µ–∫—Ç —Å–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        parse_mode='HTML'
                    )
                    user_state_manager.clear_state(user_id)
                    return
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∑–æ–Ω—É
                from datetime import datetime
                try:
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ë–î (—Ñ–æ—Ä–º–∞—Ç: 'YYYY-MM-DD HH:MM:SS')
                    start_time_utc = datetime.strptime(shift['start_time'], '%Y-%m-%d %H:%M:%S')
                    user_timezone = timezone_helper.get_user_timezone(user_id)
                    local_start_time = timezone_helper.format_local_time(start_time_utc, user_timezone)
                except (ValueError, KeyError):
                    local_start_time = shift['start_time']  # Fallback –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
                await query.edit_message_text(
                    text=f"üìç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã</b>\n\n"
                         f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj.name}</b>\n"
                         f"üìç –ê–¥—Ä–µ—Å: {obj.address or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                         f"üïê –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã: {local_start_time}\n\n"
                         f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
                    parse_mode='HTML'
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏:",
                    reply_markup=get_location_keyboard()
                )
        
        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–ª—É—á–∞–π, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            keyboard = []
            for shift in active_shifts:  # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä–∏, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç—ã
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
                async with get_async_session() as session:
                    obj_query = select(Object).where(Object.id == shift['object_id'])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è
                    obj_result = await session.execute(obj_query)
                    obj = obj_result.scalar_one_or_none()
                    
                    obj_name = obj.name if obj else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç"
                    
                keyboard.append([
                    InlineKeyboardButton(
                        f"üîö {obj_name} ({shift['start_time'][:5]})",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ HH:MM
                        callback_data=f"close_shift_select:{shift['id']}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è
                    )
                ])
            
            keyboard.append([
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text="üîö <b>–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"Error handling close shift for user {user_id}: {e}")
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )


async def _handle_open_shift_object_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state = user_state_manager.get_state(user_id)
    if not user_state or user_state.action != UserAction.OPEN_SHIFT:
        await query.edit_message_text(
            text="‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode='HTML'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ–±—ä–µ–∫—Ç—É
    try:
        from apps.bot.services.employee_objects_service import EmployeeObjectsService
        
        employee_objects_service = EmployeeObjectsService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –æ–±—ä–µ–∫—Ç—É
        has_access = await employee_objects_service.has_access_to_object(user_id, object_id)
        if not has_access:
            await query.edit_message_text(
                text="‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å —ç—Ç–∏–º –æ–±—ä–µ–∫—Ç–æ–º.",
                parse_mode='HTML'
            )
            user_state_manager.clear_state(user_id)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        obj_data = await employee_objects_service.get_employee_object_by_id(user_id, object_id)
        if not obj_data:
            await query.edit_message_text(
                text="‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                parse_mode='HTML'
            )
            user_state_manager.clear_state(user_id)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        user_state_manager.update_state(
            user_id=user_id,
            selected_object_id=object_id,
            step=UserStep.LOCATION_REQUEST
        )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
        await query.edit_message_text(
            text=f"üìç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é</b>\n\n"
                 f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj_data['name']}</b>\n"
                 f"üìç –ê–¥—Ä–µ—Å: {obj_data['address'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                 f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
            parse_mode='HTML'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏:",
            reply_markup=get_location_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error handling object selection for user {user_id}: {e}")
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
        user_state_manager.clear_state(user_id)


async def _handle_close_shift_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, shift_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state_manager.create_state(
        user_id=user_id,
        action=UserAction.CLOSE_SHIFT,
        step=UserStep.LOCATION_REQUEST,
        selected_shift_id=shift_id
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–µ –∏ –æ–±—ä–µ–∫—Ç–µ
    try:
        shift = await shift_service.get_shift_by_id(shift_id)
        if not shift:
            await query.edit_message_text(
                text="‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode='HTML'
            )
            user_state_manager.clear_state(user_id)
            return
        
        async with get_async_session() as session:
            obj_query = select(Object).where(Object.id == shift.object_id)
            obj_result = await session.execute(obj_query)
            obj = obj_result.scalar_one_or_none()
            
            if not obj:
                await query.edit_message_text(
                    text="‚ùå –û–±—ä–µ–∫—Ç —Å–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode='HTML'
                )
                user_state_manager.clear_state(user_id)
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∑–æ–Ω—É
            user_timezone = timezone_helper.get_user_timezone(user_id)
            local_start_time = timezone_helper.format_local_time(shift.start_time, user_timezone)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
            await query.edit_message_text(
                text=f"üìç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã</b>\n\n"
                     f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj.name}</b>\n"
                     f"üìç –ê–¥—Ä–µ—Å: {obj.address or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                     f"üïê –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã: {local_start_time}\n\n"
                     f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏:",
                reply_markup=get_location_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error handling close shift selection for user {user_id}: {e}")
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
        user_state_manager.clear_state(user_id)


async def _handle_retry_location_open(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
    user_state_manager.create_state(
        user_id=user_id,
        action=UserAction.OPEN_SHIFT,
        step=UserStep.LOCATION_REQUEST,
        selected_object_id=object_id
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
    obj_data = object_service.get_object_by_id(object_id)
    if not obj_data:
        await query.edit_message_text(
            text="‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return
    
    max_distance = obj_data.get('max_distance_meters', 500)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
    await query.edit_message_text(
        text=f"üìç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã</b>\n\n"
             f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj_data['name']}</b>\n"
             f"üìç –ê–¥—Ä–µ—Å: {obj_data['address'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
             f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {max_distance}–º\n\n"
             f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
        parse_mode='HTML',
        reply_markup=get_location_keyboard()
    )


async def _handle_retry_location_close(update: Update, context: ContextTypes.DEFAULT_TYPE, shift_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
    user_state_manager.create_state(
        user_id=user_id,
        action=UserAction.CLOSE_SHIFT,
        step=UserStep.LOCATION_REQUEST,
        selected_shift_id=shift_id
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–µ
    shift_data = shift_service.get_shift_by_id(shift_id)
    if not shift_data:
        await query.edit_message_text(
            text="‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
    obj_data = object_service.get_object_by_id(shift_data['object_id'])
    if not obj_data:
        await query.edit_message_text(
            text="‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return
    
    max_distance = obj_data.get('max_distance_meters', 500)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
    from core.utils.timezone_helper import timezone_helper
    user_timezone = timezone_helper.get_user_timezone(user_id)
    local_start_time = timezone_helper.format_local_time(shift_data['start_time'], user_timezone)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
    await query.edit_message_text(
        text=f"üìç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã</b>\n\n"
             f"üè¢ –û–±—ä–µ–∫—Ç: <b>{obj_data['name']}</b>\n"
             f"üìç –ê–¥—Ä–µ—Å: {obj_data['address'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
             f"üïê –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã: {local_start_time}\n"
             f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {max_distance}–º\n\n"
             f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
        parse_mode='HTML',
        reply_markup=get_location_keyboard()
    )
