"""–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–æ–≤ (–æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ)."""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from typing import Optional

from core.state.user_state_manager import user_state_manager, UserAction, UserStep
from core.database.session import get_async_session
from core.logging.logger import logger
from shared.services.object_opening_service import ObjectOpeningService
from shared.services.shift_service import ShiftService
from apps.bot.services.shift_service import ShiftService as BotShiftService
from domain.entities.object import Object
from domain.entities.contract import Contract
from sqlalchemy import select, and_
from sqlalchemy.orm import selectinload


async def _handle_open_object(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–±—ä–µ–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    logger.info(f"User {user_id} initiated object opening")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?
    # –ï—Å–ª–∏ –µ—Å—Ç—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å –∏—Ö (—á–µ—Ä–µ–∑ "–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")
    try:
        from apps.bot.services.shift_schedule_service import ShiftScheduleService
        from datetime import date
        
        shift_schedule_service = ShiftScheduleService()
        today = date.today()
        planned_shifts = await shift_schedule_service.get_user_planned_shifts_for_date(user_id, today)
        
        if planned_shifts:
            # –ï—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∏—Ö –æ—Ç–∫—Ä—ã—Ç–∏–µ
            shifts_text = "üìÖ <b>–£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã!</b>\n\n"
            shifts_text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É' –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–º–µ–Ω—ã.\n\n"
            shifts_text += "<b>–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã:</b>\n"
            
            for idx, shift in enumerate(planned_shifts[:3], 1):
                shifts_text += f"\n{idx}. <b>{shift['object_name']}</b>\n"
                planned_start_str = shift.get('planned_start_str', '')
                shifts_text += f"   üïê {planned_start_str}\n"
            
            await query.edit_message_text(
                text=shifts_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="open_shift")
                ]])
            )
            return
    except Exception as e:
        logger.error(f"Error checking planned shifts: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    # –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—ä–µ–∫—Ç–∞
    async with get_async_session() as session:
        # –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        from domain.entities.user import User
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        db_user = user_result.scalar_one_or_none()
        
        if not db_user:
            await query.edit_message_text(
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                parse_mode='HTML'
            )
            return
        
        # –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã –ø–æ employee_id
        contracts_query = select(Contract).where(
            Contract.employee_id == db_user.id,
            Contract.status == 'active'
        )
        contracts_result = await session.execute(contracts_query)
        contracts = contracts_result.scalars().all()
        
        # –°–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤
        available_objects = []
        if contracts:
            for contract in contracts:
                if contract.allowed_objects:
                    for obj_id in contract.allowed_objects:
                        if obj_id not in [o['id'] for o in available_objects]:
                            obj_query = select(Object).where(Object.id == obj_id)
                            obj_result = await session.execute(obj_query)
                            obj = obj_result.scalar_one_or_none()
                            if obj and obj.is_active:
                                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: —É–∂–µ –æ—Ç–∫—Ä—ã—Ç?
                                opening_service = ObjectOpeningService(session)
                                is_open = await opening_service.is_object_open(obj.id)
                                available_objects.append({
                                    'id': obj.id,
                                    'name': obj.name,
                                    'is_open': is_open
                                })
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª–µ—Ü - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        user_role = db_user.role if hasattr(db_user, 'role') else None
        user_roles = db_user.roles if hasattr(db_user, 'roles') else []
        
        if user_role == 'owner' or 'owner' in user_roles:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞
            owner_objects_query = select(Object).where(
                and_(
                    Object.owner_id == db_user.id,
                    Object.is_active == True
                )
            )
            owner_objects_result = await session.execute(owner_objects_query)
            owner_objects_list = owner_objects_result.scalars().all()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–ø–∏—Å–∫—É, —É–±–∏—Ä–∞—è –¥—É–±–ª–∏
            existing_ids = [o['id'] for o in available_objects]
            for owner_obj in owner_objects_list:
                if owner_obj.id not in existing_ids:
                    opening_service = ObjectOpeningService(session)
                    is_open = await opening_service.is_object_open(owner_obj.id)
                    available_objects.append({
                        'id': owner_obj.id,
                        'name': owner_obj.name,
                        'is_open': is_open
                    })
        
        if not available_objects:
            await query.edit_message_text(
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.",
                parse_mode='HTML'
            )
            return
        
        # –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã
        closed_objects = [o for o in available_objects if not o['is_open']]
        
        if not closed_objects:
            await query.edit_message_text(
                text="‚ÑπÔ∏è –í—Å–µ –≤–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã.\n\n"
                     "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="open_shift")
                ]])
            )
            return
        
        # –ï—Å–ª–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç - —Å—Ä–∞–∑—É –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        if len(closed_objects) == 1:
            selected_object = closed_objects[0]
            
            # –°–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await user_state_manager.create_state(
                user_id=user_id,
                action=UserAction.OPEN_OBJECT,
                step=UserStep.OPENING_OBJECT_LOCATION,
                selected_object_id=selected_object['id']
            )
            
            await query.edit_message_text(
                text=f"üè¢ <b>–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
                     f"–û–±—ä–µ–∫—Ç: <b>{selected_object['name']}</b>\n\n"
                     f"üìç –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏:",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
                ]])
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
            from telegram import KeyboardButton, ReplyKeyboardMarkup
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏:",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
        else:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
            keyboard = []
            for obj in closed_objects:
                keyboard.append([InlineKeyboardButton(
                    f"üè¢ {obj['name']}",
                    callback_data=f"select_object_to_open:{obj['id']}"
                )])
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")])
            
            await user_state_manager.create_state(
                user_id=user_id,
                action=UserAction.OPEN_OBJECT,
                step=UserStep.OBJECT_SELECTION
            )
            
            await query.edit_message_text(
                text="üè¢ <b>–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )


async def _handle_select_object_to_open(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    object_id = int(query.data.split(':')[1])
    
    async with get_async_session() as session:
        obj_query = select(Object).where(Object.id == object_id)
        obj_result = await session.execute(obj_query)
        obj = obj_result.scalar_one_or_none()
        
        if not obj:
            await query.edit_message_text(
                text="‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                parse_mode='HTML'
            )
            return
        
        # –°–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        await user_state_manager.create_state(
            user_id=user_id,
            action=UserAction.OPEN_OBJECT,
            step=UserStep.OPENING_OBJECT_LOCATION,
            selected_object_id=object_id
        )
        
        logger.info(
            f"State created for object opening",
            user_id=user_id,
            action=UserAction.OPEN_OBJECT,
            step=UserStep.OPENING_OBJECT_LOCATION,
            object_id=object_id
        )
        
        await query.edit_message_text(
            text=f"üè¢ <b>–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
                 f"–û–±—ä–µ–∫—Ç: <b>{obj.name}</b>\n\n"
                 f"üìç –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏:",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
            ]])
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!)
        from telegram import KeyboardButton, ReplyKeyboardMarkup
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏:",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )


async def _handle_close_object(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–±—ä–µ–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    logger.info(f"User {user_id} initiated object closing")
    
    # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot_shift_service = BotShiftService()
    active_shifts = await bot_shift_service.get_user_active_shifts(user_id)
    
    if not active_shifts:
        await query.edit_message_text(
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω.",
            parse_mode='HTML'
        )
        return
    
    if len(active_shifts) > 1:
        await query.edit_message_text(
            text="‚ö†Ô∏è <b>–ù–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω</b>\n\n"
                 "–°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–æ–π—Ç–µ —Å–≤–æ—é —Å–º–µ–Ω—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É'.\n\n"
                 "–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —É –≤–∞—Å –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîö –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="close_shift")
            ]])
        )
        return
    
    # –û–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å–ª–µ–¥–Ω—è—è –ª–∏ –æ–Ω–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ
    shift = active_shifts[0]
    object_id = shift['object_id']
    
    async with get_async_session() as session:
        opening_service = ObjectOpeningService(session)
        active_count = await opening_service.get_active_shifts_count(object_id)
        
        if active_count > 1:
            await query.edit_message_text(
                text="‚ö†Ô∏è <b>–ù–∞ –æ–±—ä–µ–∫—Ç–µ —Ä–∞–±–æ—Ç–∞—é—Ç –¥—Ä—É–≥–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</b>\n\n"
                     "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—é —Å–º–µ–Ω—É.\n\n"
                     "–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîö –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="close_shift")
                ]])
            )
            return
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–∫—Ä—ã—Ç–∏—é
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Å–º–µ–Ω—ã
        existing_state = await user_state_manager.get_state(user_id)
        
        if existing_state and existing_state.selected_shift_id == shift['id']:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π state, —Å–æ—Ö—Ä–∞–Ω—è—è completed_tasks –∏ task_media
            await user_state_manager.update_state(
                user_id=user_id,
                action=UserAction.CLOSE_OBJECT,
                step=existing_state.step,
                selected_object_id=object_id
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π state
            await user_state_manager.create_state(
                user_id=user_id,
                action=UserAction.CLOSE_OBJECT,
                step=UserStep.SHIFT_SELECTION,
                selected_shift_id=shift['id'],
                selected_object_id=object_id
            )
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ñ–ª–æ—É –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
        # –û–Ω –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞–¥–∞—á–∏, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∏ –≤ –∫–æ–Ω—Ü–µ –º—ã –∑–∞–∫—Ä–æ–µ–º –æ–±—ä–µ–∫—Ç
        from apps.bot.handlers_div.shift_handlers import _handle_close_shift
        await _handle_close_shift(update, context)

