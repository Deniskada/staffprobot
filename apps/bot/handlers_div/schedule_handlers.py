"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω."""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from core.logging.logger import logger
from shared.services.adapters import ScheduleServiceAdapter
from apps.bot.services.object_service import ObjectService
from core.state import user_state_manager, UserAction, UserStep
from domain.entities.object import Object
from domain.entities.shift_schedule import ShiftSchedule
from domain.entities.shift import Shift
from domain.entities.user import User
from sqlalchemy import select
from datetime import datetime, timedelta, date, time, timezone
from typing import List, Dict, Any, Optional

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
schedule_service = ScheduleServiceAdapter()
object_service = ObjectService()


async def handle_schedule_shift(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã."""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä–∞–º
    try:
        from apps.bot.services.employee_objects_service import EmployeeObjectsService
        
        employee_objects_service = EmployeeObjectsService()
        objects = await employee_objects_service.get_employee_objects(user_id)
        
        if not objects:
            await update.callback_query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω.\n\n"
                "–£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä–µ–∫—Ç–∞."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
        keyboard = []
        for obj in objects:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
            contracts_count = len(obj.get('contracts', []))
            contracts_info = f" ({contracts_count} –¥–æ–≥–æ–≤–æ—Ä)" if contracts_count > 1 else ""
            
            keyboard.append([InlineKeyboardButton(
                f"üè¢ {obj['name']}{contracts_info}",
                callback_data=f"schedule_select_object_{obj['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_schedule")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "üìÖ **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error getting objects for scheduling: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_schedule_object_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
    object_id = int(query.data.split("_")[-1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['selected_object_id'] = object_id
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state_manager.set_state(
        user_id=user_id,
        action=UserAction.SCHEDULE_SHIFT,
        step=UserStep.INPUT_DATE,
        selected_object_id=object_id
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
    today = date.today()
    tomorrow = today + timedelta(days=1)
    
    keyboard = [
        [InlineKeyboardButton(f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')})", callback_data="schedule_date_today")],
        [InlineKeyboardButton(f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m')})", callback_data="schedule_date_tomorrow")],
        [InlineKeyboardButton("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data="schedule_date_custom")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_schedule")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–º–µ–Ω—ã**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )


async def handle_schedule_date_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if query.data == "schedule_date_today":
        selected_date = date.today()
    elif query.data == "schedule_date_tomorrow":
        selected_date = date.today() + timedelta(days=1)
    elif query.data == "schedule_date_custom":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –¥–∞—Ç—ã
        user_state_manager.set_state(
            user_id=user_id,
            action=UserAction.SCHEDULE_SHIFT,
            step=UserStep.INPUT_DATE,
            selected_object_id=context.user_data.get('selected_object_id')
        )
        await query.edit_message_text(
            "üìÖ **–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì**\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `15.09.2025`",
            parse_mode='Markdown'
        )
        return
    else:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç—ã.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    context.user_data['selected_date'] = selected_date
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –¥–∞—Ç—É
    object_id = context.user_data.get('selected_object_id')
    if not object_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return
    
    try:
        result = await schedule_service.get_available_time_slots_for_date(object_id, selected_date)
        
        if not result['success']:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤: {result['error']}")
            return
        
        available_slots = result['available_slots']
        
        if not available_slots:
            await query.edit_message_text(
                f"‚ùå –ù–∞ {selected_date.strftime('%d.%m.%Y')} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏
        keyboard = []
        for slot in available_slots:
            slot_text = f"üïê {slot['start_time']}-{slot['end_time']}"
            if slot['hourly_rate']:
                slot_text += f" ({slot['hourly_rate']}‚ÇΩ/—á)"
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
            if slot.get('max_employees', 1) > 1:
                slot_text += f" [{slot.get('availability', '0/1')}]"
            keyboard.append([InlineKeyboardButton(
                slot_text,
                callback_data=f"schedule_select_slot_{slot['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_schedule")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üïê **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã –Ω–∞ {selected_date.strftime('%d.%m.%Y')}**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞–π–º-—Å–ª–æ—Ç:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error getting time slots: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_schedule_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã."""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–π–º-—Å–ª–æ—Ç–∞
    slot_id = int(query.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    object_id = context.user_data.get('selected_object_id')
    selected_date = context.user_data.get('selected_date')
    
    if not object_id or not selected_date:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º-—Å–ª–æ—Ç–µ
        from apps.bot.services.time_slot_service import TimeSlotService
        from datetime import time
        time_slot_service = TimeSlotService()
        timeslot_data = time_slot_service.get_timeslot_by_id(slot_id)
        
        if not timeslot_data:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∞–π–º-—Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫
        start_time_str = timeslot_data['start_time']
        end_time_str = timeslot_data['end_time']
        
        start_time = time.fromisoformat(start_time_str)
        end_time = time.fromisoformat(end_time_str)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–º–µ–Ω—É
        result = await schedule_service.create_scheduled_shift_from_timeslot(
            user_id=user_id,
            time_slot_id=slot_id,
            start_time=start_time,
            end_time=end_time,
            notes="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"
        )
        
        if result['success']:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await user_state_manager.clear_state(user_id)
            context.user_data.clear()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úÖ **–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!**\n\n"
                f"üìÖ –î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n"
                f"üïê –í—Ä–µ–º—è: {result.get('start_time', 'N/A')} - {result.get('end_time', 'N/A')}\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: {result.get('hourly_rate', 'N/A')} ‚ÇΩ/—á–∞—Å\n\n"
                f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã.",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {result['error']}")
            
    except Exception as e:
        logger.error(f"Error scheduling shift: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_view_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω."""
    telegram_id = update.effective_user.id
    
    try:
        from core.database.session import get_async_session
        async with get_async_session() as session:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            user_query = select(User).where(User.telegram_id == telegram_id)
            user_result = await session.execute(user_query)
            user = user_result.scalar_one_or_none()
            
            if not user:
                await update.callback_query.edit_message_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ShiftSchedule
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–º–µ–Ω—ã (–æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã)
            now_utc = datetime.now(timezone.utc)
            shifts_query = select(ShiftSchedule).where(
                ShiftSchedule.user_id == user.id,
                ShiftSchedule.status == "planned",
                ShiftSchedule.planned_start >= now_utc.replace(hour=0, minute=0, second=0, microsecond=0)
            ).order_by(ShiftSchedule.planned_start)
            
            shifts_result = await session.execute(shifts_query)
            shifts = shifts_result.scalars().all()
            
            if not shifts:
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.callback_query.edit_message_text(
                    "üìÖ **–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã**\n\n"
                    "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω.",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω
            schedule_text = "üìÖ **–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã:**\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º timezone –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from core.utils.timezone_helper import get_user_timezone, convert_utc_to_local
            user_tz = get_user_timezone(user)
            
            # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
            def escape_markdown(text: str) -> str:
                """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown."""
                special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
                for char in special_chars:
                    text = text.replace(char, f'\\{char}')
                return text
            
            shifts_with_local_time = []
            for shift in shifts:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
                object_query = select(Object).where(Object.id == shift.object_id)
                object_result = await session.execute(object_query)
                obj = object_result.scalar_one_or_none()
                
                object_name = obj.name if obj else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç"
                object_name_escaped = escape_markdown(object_name)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ timezone –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                local_start = convert_utc_to_local(shift.planned_start, user_tz)
                local_end = convert_utc_to_local(shift.planned_end, user_tz)
                
                shifts_with_local_time.append((shift, local_start, local_end))
                
                schedule_text += f"üè¢ **{object_name_escaped}**\n"
                schedule_text += f"üìÖ {local_start.strftime('%d.%m.%Y %H:%M')}\n"
                schedule_text += f"üïê –î–æ {local_end.strftime('%H:%M')}\n"
                if shift.hourly_rate:
                    schedule_text += f"üí∞ {shift.hourly_rate} ‚ÇΩ/—á–∞—Å\n"
                schedule_text += f"üìä –°—Ç–∞—Ç—É—Å: {escape_markdown(shift.status)}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–º–µ–Ω—ã (–º–∞–∫—Å–∏–º—É–º 5)
            for shift, local_start, local_end in shifts_with_local_time[:5]:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ local timezone
                button_text = f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {local_start.strftime('%d.%m %H:%M')}"
                keyboard.append([InlineKeyboardButton(
                    button_text,
                    callback_data=f"cancel_shift_{shift.id}"
                )])
            
            keyboard.extend([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="view_schedule")],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_schedule")]
            ])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await update.callback_query.edit_message_text(
                    schedule_text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            except Exception as edit_error:
                logger.error(f"Error editing message: {edit_error}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.callback_query.message.reply_text(
                    schedule_text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            
    except Exception as e:
        logger.error(f"Error viewing schedule: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_cancel_shift(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–º–µ–Ω—ã - –≤—ã–±–æ—Ä –ø—Ä–∏—á–∏–Ω—ã."""
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    
    telegram_id = update.effective_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–º–µ–Ω—ã –∏–∑ callback_data
    shift_id = int(query.data.split("_")[-1])
    logger.info(f"User {telegram_id} initiating cancellation for shift {shift_id}")
    
    try:
        from core.database.session import get_async_session
        async with get_async_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_query = select(User).where(User.telegram_id == telegram_id)
            user_result = await session.execute(user_query)
            user = user_result.scalar_one_or_none()
            
            if not user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–º–µ–Ω—É
            shift_query = select(ShiftSchedule).where(
                ShiftSchedule.id == shift_id,
                ShiftSchedule.user_id == user.id,
                ShiftSchedule.status == "planned"
            )
            shift_result = await session.execute(shift_query)
            shift = shift_result.scalar_one_or_none()
            
            if not shift:
                await query.edit_message_text("‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º shift_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            context.user_data['cancelling_shift_id'] = shift_id

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç (–Ω—É–∂–µ–Ω –¥–ª—è owner_id –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            object_query = select(Object).where(Object.id == shift.object_id)
            object_result = await session.execute(object_query)
            obj = object_result.scalar_one_or_none()
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã –∏–∑ –ë–î –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ–±—ä–µ–∫—Ç–∞
            from shared.services.cancellation_policy_service import CancellationPolicyService
            owner_id = obj.owner_id if obj else None
            reasons = await CancellationPolicyService.get_owner_reasons(session, owner_id) if owner_id else []
            keyboard_rows = []
            for r in reasons:
                keyboard_rows.append([InlineKeyboardButton(r.title, callback_data=f"cancel_reason_{r.code}")])
            keyboard_rows.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="view_schedule")])
            reply_markup = InlineKeyboardMarkup(keyboard_rows)
            object_name = obj.name if obj else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç"
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown
            def escape_markdown(text: str) -> str:
                """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown."""
                special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
                for char in special_chars:
                    text = text.replace(char, f'\\{char}')
                return text
            
            object_name_escaped = escape_markdown(object_name)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ timezone –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from core.utils.timezone_helper import get_user_timezone, convert_utc_to_local
            user_tz = get_user_timezone(user)
            local_start = convert_utc_to_local(shift.planned_start, user_tz)
            local_end = convert_utc_to_local(shift.planned_end, user_tz)
            
            await query.edit_message_text(
                f"‚ùå **–û—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã**\n\n"
                f"üè¢ **{object_name_escaped}**\n"
                f"üìÖ {local_start.strftime('%d.%m.%Y %H:%M')}\n"
                f"üïê –î–æ {local_end.strftime('%H:%M')}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã:",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"Error in cancellation flow: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_cancel_reason_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã."""
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    
    telegram_id = update.effective_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –∏–∑ callback_data
    reason = query.data.replace("cancel_reason_", "")
    shift_id = context.user_data.get('cancelling_shift_id')

    logger.info(f"Cancel reason selection: user={telegram_id}, reason={reason}, shift_id={shift_id}")

    if not shift_id:
        logger.error(f"No shift_id in context for user {telegram_id}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['cancel_reason'] = reason

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ–±—ä–µ–∫—Ç–∞
    from core.database.session import get_async_session
    async with get_async_session() as session:
        shift_query = select(ShiftSchedule).where(ShiftSchedule.id == shift_id)
        shift_result = await session.execute(shift_query)
        shift = shift_result.scalar_one_or_none()
        if not shift:
            await query.edit_message_text("‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        object_query = select(Object).where(Object.id == shift.object_id)
        obj = (await session.execute(object_query)).scalar_one_or_none()
        if not obj:
            await query.edit_message_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        from shared.services.cancellation_policy_service import CancellationPolicyService
        reason_map = await CancellationPolicyService.get_reason_map(session, obj.owner_id)
        policy = reason_map.get(reason)
        requires_document = bool(policy and policy.requires_document)

    # –í–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if requires_document:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        from core.state.user_state_manager import user_state_manager, UserAction, UserStep
        user_state_manager.set_state(
            telegram_id,
            action=UserAction.CANCEL_SCHEDULE,
            step=UserStep.INPUT_DOCUMENT
        )

        title = policy.title if policy else '–¥–æ–∫—É–º–µ–Ω—Ç–∞'
        await query.edit_message_text(
            f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ {title}**\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ –¥–∞—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: `‚Ññ123 –æ—Ç 10.10.2025`\n\n"
            f"–°–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.",
            parse_mode='Markdown'
        )
    elif reason == 'other':
        # –î–ª—è "–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞" –ø—Ä–æ—Å–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        from core.state.user_state_manager import user_state_manager, UserAction, UserStep
        user_state_manager.set_state(
            telegram_id,
            action=UserAction.CANCEL_SCHEDULE,
            step=UserStep.INPUT_DOCUMENT
        )
        
        await query.edit_message_text(
            "‚úçÔ∏è **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã**\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã.\n\n"
            "–í–∞—à–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.",
            parse_mode='Markdown'
        )
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω (–Ω–µ —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç) —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–º–µ–Ω—É
        logger.info(f"Executing immediate cancellation for user {telegram_id}, reason={reason}, shift_id={shift_id}")
        success = await _execute_shift_cancellation(
            shift_id=shift_id,
            telegram_id=telegram_id,
            reason=reason,
            reason_notes=None,
            document_description=None,
            context=context,
            query=query
        )
        
        if not success:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_cancellation_document_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞/–æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã."""
    telegram_id = update.effective_user.id
    description_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from core.state.user_state_manager import user_state_manager, UserAction, UserStep
    user_state = await user_state_manager.get_state(telegram_id)
    
    if not user_state or user_state.action != UserAction.CANCEL_SCHEDULE or user_state.step != UserStep.INPUT_DOCUMENT:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    
    shift_id = context.user_data.get('cancelling_shift_id')
    reason = context.user_data.get('cancel_reason')
    
    if not shift_id or not reason:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if reason == 'other':
        context.user_data['cancel_reason_notes'] = description_text  # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
    else:
        context.user_data['cancel_document_description'] = description_text  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ñ–æ—Ç–æ
    from core.database.session import get_async_session
    async with get_async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—É
        shift_query = select(ShiftSchedule).where(ShiftSchedule.id == shift_id)
        shift_result = await session.execute(shift_query)
        shift = shift_result.scalar_one_or_none()
        
        if not shift:
            await update.message.reply_text("‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å eager loading org_unit –∏ —Ü–µ–ø–æ—á–∫–∏ parent
        from sqlalchemy.orm import joinedload
        object_query = select(Object).where(Object.id == shift.object_id).options(
            joinedload(Object.org_unit).joinedload('parent').joinedload('parent').joinedload('parent')
        )
        object_result = await session.execute(object_query)
        obj = object_result.scalar_one_or_none()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ telegram_report_chat_id (—Å —É—á–µ—Ç–æ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è)
        report_chat_id = obj.telegram_report_chat_id if obj else None
        if not report_chat_id and obj and obj.org_unit:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
            org_unit = obj.org_unit
            while org_unit and not report_chat_id:
                report_chat_id = org_unit.telegram_report_chat_id
                org_unit = org_unit.parent if hasattr(org_unit, 'parent') else None
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        if report_chat_id:
            context.user_data['report_chat_id'] = report_chat_id
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
            from core.state.user_state_manager import user_state_manager, UserAction, UserStep
            user_state_manager.set_state(
                telegram_id,
                action=UserAction.CANCEL_SCHEDULE,
                step=UserStep.INPUT_PHOTO
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = [[InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="cancel_skip_photo")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üì∏ **–§–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è** (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç.",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            # –ù–µ—Ç –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ - —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–º–µ–Ω—É
            from core.state.user_state_manager import user_state_manager
            await user_state_manager.clear_state(telegram_id)
            
            await _execute_shift_cancellation(
                shift_id=shift_id,
                telegram_id=telegram_id,
                reason=reason,
                reason_notes=context.user_data.get('cancel_reason_notes'),
                document_description=context.user_data.get('cancel_document_description'),
                context=context,
                message=update.message
            )


async def handle_cancellation_photo_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã."""
    telegram_id = update.effective_user.id
    
    shift_id = context.user_data.get('cancelling_shift_id')
    reason = context.user_data.get('cancel_reason')
    report_chat_id = context.user_data.get('report_chat_id')
    
    if not shift_id or not reason:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo = update.message.photo[-1] if update.message.photo else None
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –∏ –≥—Ä—É–ø–ø–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    if photo and report_chat_id:
        try:
            from core.database.session import get_async_session
            async with get_async_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                user_query = select(User).where(User.telegram_id == telegram_id)
                user_result = await session.execute(user_query)
                user = user_result.scalar_one_or_none()
                
                shift_query = select(ShiftSchedule).where(ShiftSchedule.id == shift_id)
                shift_result = await session.execute(shift_query)
                shift = shift_result.scalar_one_or_none()
                
                object_query = select(Object).where(Object.id == shift.object_id)
                object_result = await session.execute(object_query)
                obj = object_result.scalar_one_or_none()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
                from core.utils.timezone_helper import get_user_timezone, convert_utc_to_local
                user_tz = get_user_timezone(user)
                local_start = convert_utc_to_local(shift.planned_start, user_tz)
                
                reason_labels = {
                    'medical_cert': 'üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞',
                    'emergency_cert': 'üö® –°–ø—Ä–∞–≤–∫–∞ –æ—Ç –ú–ß–°',
                    'police_cert': 'üëÆ –°–ø—Ä–∞–≤–∫–∞ –æ—Ç –ø–æ–ª–∏—Ü–∏–∏',
                    'other': '‚ùì –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞'
                }
                
                caption = (
                    f"‚ùå **–û—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã**\n\n"
                    f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user.full_name if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                    f"üè¢ –û–±—ä–µ–∫—Ç: {obj.name if obj else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                    f"üìÖ –î–∞—Ç–∞: {local_start.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìã –ü—Ä–∏—á–∏–Ω–∞: {reason_labels.get(reason, reason)}\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ/–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                doc_desc = context.user_data.get('cancel_document_description')
                reason_notes = context.user_data.get('cancel_reason_notes')
                if doc_desc:
                    caption += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {doc_desc}\n"
                if reason_notes:
                    caption += f"‚úçÔ∏è –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {reason_notes}\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É
                await context.bot.send_photo(
                    chat_id=report_chat_id,
                    photo=photo.file_id,
                    caption=caption,
                    parse_mode='Markdown'
                )
                
                logger.info(f"Cancellation photo sent to chat {report_chat_id}")
                
        except Exception as e:
            logger.error(f"Error sending cancellation photo: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    from core.state.user_state_manager import user_state_manager
    await user_state_manager.clear_state(telegram_id)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–º–µ–Ω—É
    await _execute_shift_cancellation(
        shift_id=shift_id,
        telegram_id=telegram_id,
        reason=reason,
        reason_notes=context.user_data.get('cancel_reason_notes'),
        document_description=context.user_data.get('cancel_document_description'),
        context=context,
        message=update.message
    )


async def handle_cancellation_skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'."""
    query = update.callback_query
    await query.answer()
    
    telegram_id = update.effective_user.id
    shift_id = context.user_data.get('cancelling_shift_id')
    reason = context.user_data.get('cancel_reason')
    
    if not shift_id or not reason:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    from core.state.user_state_manager import user_state_manager
    await user_state_manager.clear_state(telegram_id)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–º–µ–Ω—É –±–µ–∑ —Ñ–æ—Ç–æ
    await _execute_shift_cancellation(
        shift_id=shift_id,
        telegram_id=telegram_id,
        reason=reason,
        reason_notes=context.user_data.get('cancel_reason_notes'),
        document_description=context.user_data.get('cancel_document_description'),
        context=context,
        query=query
    )


async def _execute_shift_cancellation(
    shift_id: int,
    telegram_id: int,
    reason: str,
    reason_notes: Optional[str],
    document_description: Optional[str],
    context: ContextTypes.DEFAULT_TYPE,
    query: Optional[Any] = None,
    message: Optional[Any] = None
) -> bool:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–º–µ–Ω—É —Å–º–µ–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞."""
    logger.info(f"Starting shift cancellation: shift_id={shift_id}, telegram_id={telegram_id}, reason={reason}")
    
    from core.database.session import get_async_session
    from shared.services.shift_cancellation_service import ShiftCancellationService
    
    try:
        async with get_async_session() as session:
            logger.info(f"Got database session for cancellation")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_query = select(User).where(User.telegram_id == telegram_id)
            user_result = await session.execute(user_query)
            user = user_result.scalar_one_or_none()
            
            logger.info(f"Found user: {user.id if user else 'None'}")
            
            if not user:
                text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
                if query:
                    await query.edit_message_text(text)
                elif message:
                    await message.reply_text(text)
                return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–º–µ–Ω—ã
            logger.info(f"Creating ShiftCancellationService")
            cancellation_service = ShiftCancellationService(session)
            logger.info(f"Calling cancel_shift with shift_schedule_id={shift_id}, cancelled_by_user_id={user.id}")
            
            result = await cancellation_service.cancel_shift(
                shift_schedule_id=shift_id,
                cancelled_by_user_id=user.id,
                cancelled_by_type='employee',
                cancellation_reason=reason,
                reason_notes=reason_notes,
                document_description=document_description
            )
            
            if result['success']:
                # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                shift_query = select(ShiftSchedule).where(ShiftSchedule.id == shift_id)
                shift_result = await session.execute(shift_query)
                shift = shift_result.scalar_one_or_none()
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
                object_query = select(Object).where(Object.id == shift.object_id)
                object_result = await session.execute(object_query)
                obj = object_result.scalar_one_or_none()
                object_name = obj.name if obj else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç"
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
                def escape_markdown(text: str) -> str:
                    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
                    for char in special_chars:
                        text = text.replace(char, f'\\{char}')
                    return text
                object_name_escaped = escape_markdown(object_name)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ timezone –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                from core.utils.timezone_helper import get_user_timezone, convert_utc_to_local
                user_tz = get_user_timezone(user)
                local_start = convert_utc_to_local(shift.planned_start, user_tz)
                local_end = convert_utc_to_local(shift.planned_end, user_tz)
                
                result_message = result.get('message') or "–°–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
                text = (
                    f"‚úÖ –°–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
                    f"üè¢ {object_name}\n"
                    f"üìÖ {local_start.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üïê –î–æ {local_end.strftime('%H:%M')}\n\n"
                    f"{result_message}"
                )
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.user_data.pop('cancelling_shift_id', None)
                context.user_data.pop('cancel_reason', None)
                context.user_data.pop('cancel_reason_notes', None)
                context.user_data.pop('cancel_document_description', None)
                context.user_data.pop('report_chat_id', None)
                
                # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                menu_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])

                # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ)
                try:
                    if message:
                        await message.reply_text(text, reply_markup=menu_keyboard)
                    elif query:
                        await query.message.reply_text(text, reply_markup=menu_keyboard)
                except Exception as send_err:
                    logger.error(f"Failed to send final cancellation message: {send_err}")
                    try:
                        # –ü–æ–≤—Ç–æ—Ä –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–∫ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
                        if message:
                            await message.reply_text(text)
                        elif query:
                            await query.message.reply_text(text)
                    except Exception as send_err2:
                        logger.error(f"Failed to send plain final message: {send_err2}")
                
                # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É/—É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É
                return True
                
            else:
                text = f"‚ùå {result['message']}"
                if query:
                    await query.edit_message_text(text)
                elif message:
                    await message.reply_text(text)
                return False
    
    except Exception as e:
        logger.error(f"Error executing shift cancellation: {e}", exc_info=True)
        logger.error(f"Exception details: type={type(e)}, args={e.args}")
    text = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    if query:
        try:
            await query.edit_message_text(text)
        except Exception:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(text)
    elif message:
        await message.reply_text(text)
        return False


async def handle_close_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    await query.delete_message()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from .core_handlers import get_main_menu_keyboard
    keyboard = get_main_menu_keyboard()
    
    await query.message.reply_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='Markdown',
        reply_markup=keyboard
    )


async def handle_cancel_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã."""
    user_id = update.effective_user.id
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await user_state_manager.clear_state(user_id)
    context.user_data.clear()
    
    await update.callback_query.edit_message_text(
        "‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )


async def handle_schedule_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    # –ó–∞–≥–ª—É—à–∫–∞ - —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    pass


async def handle_custom_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã."""
    from datetime import date
    
    user_id = update.effective_user.id
    text = update.message.text
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
        day, month, year = text.split('.')
        selected_date = date(int(year), int(month), int(day))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if selected_date < date.today():
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—ã –≤ –ø—Ä–æ—à–ª–æ–º.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['selected_date'] = selected_date
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
        await _handle_schedule_date_selection_direct(update, context, selected_date)
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: `15.09.2025`)",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error parsing custom date: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def _handle_schedule_date_selection_direct(update: Update, context: ContextTypes.DEFAULT_TYPE, selected_date: date) -> None:
    """–ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    context.user_data['selected_date'] = selected_date
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –¥–∞—Ç—É
    object_id = context.user_data.get('selected_object_id')
    if not object_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return
    
    try:
        result = await schedule_service.get_available_time_slots_for_date(object_id, selected_date)
        
        if not result['success']:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤: {result['error']}")
            return
        
        available_slots = result['available_slots']
        
        if not available_slots:
            await update.message.reply_text(
                f"‚ùå –ù–∞ {selected_date.strftime('%d.%m.%Y')} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏
        keyboard = []
        for slot in available_slots:
            slot_text = f"üïê {slot['start_time']}-{slot['end_time']}"
            if slot['hourly_rate']:
                slot_text += f" ({slot['hourly_rate']}‚ÇΩ/—á)"
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
            if slot.get('max_employees', 1) > 1:
                slot_text += f" [{slot.get('availability', '0/1')}]"
            keyboard.append([InlineKeyboardButton(
                slot_text,
                callback_data=f"schedule_select_slot_{slot['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_schedule")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üïê **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã –Ω–∞ {selected_date.strftime('%d.%m.%Y')}**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞–π–º-—Å–ª–æ—Ç:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error getting time slots: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
