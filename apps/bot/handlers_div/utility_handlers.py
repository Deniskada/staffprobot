"""–°–ª—É–∂–µ–±–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞."""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from core.logging.logger import logger
from apps.bot.services.shift_service import ShiftService
from apps.bot.services.object_service import ObjectService
from core.utils.timezone_helper import timezone_helper
from core.state import user_state_manager, UserAction, UserStep
# –ò–º–ø–æ—Ä—Ç—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —É–±—Ä–∞–Ω—ã

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
shift_service = ShiftService()
object_service = ObjectService()


async def _handle_help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å' —á–µ—Ä–µ–∑ callback."""
    query = update.callback_query
    help_text = """
‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ StaffProBot</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö —Å–º–µ–Ω

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
üîÑ <b>–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É</b>
üîö <b>–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É</b>
üìÖ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É</b>
üè¢ <b>–°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç</b>
‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏</b>
üìä <b>–û—Ç—á–µ—Ç</b>

<b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</b>
üìç –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
üìè –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±—ä–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 500–º)
üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é"

<b>–¢–∞–π–º-—Å–ª–æ—Ç—ã:</b>
üïê –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é
"""
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await query.edit_message_text(text=help_text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))


async def _handle_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—É—Å' —á–µ—Ä–µ–∑ callback."""
    query = update.callback_query
    user_id = query.from_user.id
    try:
        active_shifts = await shift_service.get_user_shifts(user_id, status='active')
        if not active_shifts:
            status_text = """
üìà <b>–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω</b>

‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω –Ω–µ—Ç</b>

–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
"""
        else:
            shift = active_shifts[0]
            obj_data = object_service.get_object_by_id(shift['object_id'])
            user_timezone = timezone_helper.get_user_timezone(user_id)
            from datetime import datetime
            try:
                start_time_utc = datetime.strptime(shift['start_time'], '%Y-%m-%d %H:%M:%S')
                local_start_time = timezone_helper.format_local_time(start_time_utc, user_timezone)
            except Exception:
                local_start_time = shift.get('start_time', '')
            obj_name = obj_data['name'] if obj_data else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
            hourly_rate = obj_data['hourly_rate'] if obj_data else 0
            status_text = f"""
üìà <b>–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω</b>

üü¢ <b>–ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞:</b>
üè¢ –û–±—ä–µ–∫—Ç: {obj_name}
üïê –ù–∞—á–∞–ª–æ: {local_start_time}
üí∞ –°—Ç–∞–≤–∫–∞: {hourly_rate}‚ÇΩ/—á–∞—Å

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîö –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É".
"""
    except Exception as e:
        logger.error(f"Error getting user status for {user_id}: {e}")
        status_text = """
üìà <b>–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω</b>

‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</b>

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
    keyboard = [
        [InlineKeyboardButton("üîÑ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="open_shift"), InlineKeyboardButton("üîö –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="close_shift")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await query.edit_message_text(text=status_text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    text = update.message.text
    user_id = update.effective_user.id
    
    logger.info(f"Received text message: user_id={user_id}, text='{text}'")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await handle_cancel(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    from .object_creation_handlers import user_object_creation_state, handle_create_object_input
    if user_id in user_object_creation_state:
        logger.info(f"User {user_id} is in object creation state, processing input")
        await handle_create_object_input(update, context, text)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    user_state = user_state_manager.get_state(user_id)
    if user_state and user_state.action == UserAction.EDIT_OBJECT:
        from .object_handlers import _handle_edit_object_input
        await _handle_edit_object_input(update, context, user_state)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω
    if user_state and user_state.action == UserAction.SCHEDULE_SHIFT:
        if user_state.step == UserStep.INPUT_DATE:
            from .schedule_handlers import handle_custom_date_input
            await handle_custom_date_input(update, context)
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤
    if user_state and user_state.action == UserAction.CREATE_TIMESLOT:
        if user_state.step == UserStep.INPUT_DATE:
            await _handle_timeslot_date_input(update, context, user_state)
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤
    if user_state and user_state.action in [UserAction.EDIT_TIMESLOT_TIME, UserAction.EDIT_TIMESLOT_RATE, 
                                           UserAction.EDIT_TIMESLOT_EMPLOYEES, UserAction.EDIT_TIMESLOT_NOTES]:
        await _handle_timeslot_edit_input(update, context, user_state)
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text(
        "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
    )


async def handle_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è."""
    user_id = update.effective_user.id
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state_manager.clear_state(user_id)
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove()
    )


async def _handle_timeslot_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE, user_state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞."""
    user_id = update.effective_user.id
    text = update.message.text
    object_id = user_state.selected_object_id
    slot_type = user_state.data.get('slot_type')
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    try:
        from datetime import datetime
        parsed_date = datetime.strptime(text, '%d.%m.%Y').date()
        slot_date = parsed_date.strftime('%Y-%m-%d')
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.09.2025)"
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state_manager.clear_state(user_id)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º-—Å–ª–æ—Ç
    from apps.bot.services.time_slot_service import TimeSlotService
    time_slot_service = TimeSlotService()
    
    result = await time_slot_service.create_timeslot_for_date(
        object_id=object_id,
        slot_date=slot_date,
        is_additional=(slot_type == 'additional')
    )
    
    if result['success']:
        message = f"‚úÖ <b>–¢–∞–π–º-—Å–ª–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
        message += f"üìÖ <b>–î–∞—Ç–∞:</b> {text}\n"
        message += f"üïê <b>–í—Ä–µ–º—è:</b> {result.get('start_time', '09:00')}-{result.get('end_time', '18:00')}\n"
        message += f"üí∞ <b>–°—Ç–∞–≤–∫–∞:</b> {result.get('hourly_rate', 0)}‚ÇΩ/—á–∞—Å\n"
        message += f"üìù <b>–¢–∏–ø:</b> {'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π' if slot_type == 'additional' else '–û–±—ã—á–Ω—ã–π'}\n"
    else:
        message = f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞:</b>\n{result['error']}"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data=f"create_timeslot:{object_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_timeslot_edit_input(update: Update, context: ContextTypes.DEFAULT_TYPE, user_state) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤."""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    timeslot_id = user_state.data.get('timeslot_id')
    action = user_state.action
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    from apps.bot.services.time_slot_service import TimeSlotService
    time_slot_service = TimeSlotService()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if action == UserAction.EDIT_TIMESLOT_TIME:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM
        try:
            if '-' not in text:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM-HH:MM")
                return
            
            start_time_str, end_time_str = text.split('-', 1)
            from datetime import time
            start_time = time.fromisoformat(start_time_str.strip())
            end_time = time.fromisoformat(end_time_str.strip())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            result1 = time_slot_service.update_timeslot_field(timeslot_id, 'start_time', start_time_str.strip())
            result2 = time_slot_service.update_timeslot_field(timeslot_id, 'end_time', end_time_str.strip())
            
            if result1['success'] and result2['success']:
                message = f"‚úÖ <b>–í—Ä–µ–º—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
                message += f"üïê <b>–ù–æ–≤–æ–µ –≤—Ä–µ–º—è:</b> {start_time_str.strip()}-{end_time_str.strip()}"
            else:
                message = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:</b>\n{result1.get('error', result2.get('error'))}"
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM-HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00-18:00)")
            return
    
    elif action == UserAction.EDIT_TIMESLOT_RATE:
        try:
            rate = float(text)
            result = time_slot_service.update_timeslot_field(timeslot_id, 'hourly_rate', rate)
            
            if result['success']:
                message = f"‚úÖ <b>–°—Ç–∞–≤–∫–∞ —Ç–∞–π–º-—Å–ª–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                message += f"üí∞ <b>–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:</b> {rate}‚ÇΩ/—á–∞—Å"
            else:
                message = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:</b>\n{result['error']}"
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500)")
            return
    
    elif action == UserAction.EDIT_TIMESLOT_EMPLOYEES:
        try:
            employees = int(text)
            if not 1 <= employees <= 10:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
                return
                
            result = time_slot_service.update_timeslot_field(timeslot_id, 'max_employees', employees)
            
            if result['success']:
                message = f"‚úÖ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
                message += f"üë• <b>–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {employees}"
            else:
                message = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n{result['error']}"
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
            return
    
    elif action == UserAction.EDIT_TIMESLOT_NOTES:
        notes = text if text.lower() != '—É–¥–∞–ª–∏—Ç—å' else None
        result = time_slot_service.update_timeslot_field(timeslot_id, 'notes', notes)
        
        if result['success']:
            message = f"‚úÖ <b>–ó–∞–º–µ—Ç–∫–∏ —Ç–∞–π–º-—Å–ª–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
            if notes:
                message += f"üìù <b>–ù–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏:</b> {notes}"
            else:
                message += f"üìù <b>–ó–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã</b>"
        else:
            message = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫:</b>\n{result['error']}"
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state_manager.clear_state(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º-—Å–ª–æ—Ç–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    timeslot = time_slot_service.get_timeslot_by_id(timeslot_id)
    object_id = timeslot['object_id'] if timeslot else None
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞–π–º-—Å–ª–æ—Ç—É", callback_data=f"edit_timeslot:{timeslot_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–±—ä–µ–∫—Ç—É", callback_data=f"manage_timeslots:{object_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )
