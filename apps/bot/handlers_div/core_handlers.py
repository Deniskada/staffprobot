"""–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞."""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from core.logging.logger import logger
from core.auth.user_manager import user_manager
from apps.bot.services.shift_service import ShiftService
from apps.bot.services.object_service import ObjectService
from core.database.session import get_async_session
from core.utils.timezone_helper import timezone_helper
from domain.entities.object import Object
from sqlalchemy import select
from core.state import user_state_manager, UserAction, UserStep
from datetime import date, timedelta

# –ò–º–ø–æ—Ä—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ button_callback –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
shift_service = ShiftService()
object_service = ObjectService()


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user_manager.is_user_registered(user.id):
        user_data = user_manager.register_user(
            user_id=user.id,
            first_name=user.first_name,
            username=user.username,
            last_name=user.last_name,
            language_code=user.language_code
        )
        welcome_message = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StaffProBot!</b>

–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.

üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:

üí° –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–º–µ–Ω—ã —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã
‚Ä¢ –í–µ—Å—Ç–∏ —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã

üìç <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç–∞—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!
"""
        logger.info(
            f"New user registered: user_id={user.id}, username={user.username}, chat_id={chat_id}"
        )
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_manager.update_user_activity(user.id)
        welcome_message = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üîÑ <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ StaffProBot!</b>

–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å!

üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:

üí° –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–º–µ–Ω—ã —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã
‚Ä¢ –í–µ—Å—Ç–∏ —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã

üìç <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç–∞—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!
"""
        logger.info(
            f"Existing user returned: user_id={user.id}, username={user.username}, chat_id={chat_id}"
        )
    
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∑–∞–¥–∞—á–∏" (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∑–∞–¥–∞—á)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [
            InlineKeyboardButton("üè¢ –û—Ç–∫—Ä—ã—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="open_object"),
            InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="close_object")
        ],
        [
            InlineKeyboardButton("üîÑ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="open_shift"),
            InlineKeyboardButton("üîö –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="close_shift")
        ],
        [
            InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É", callback_data="schedule_shift"),
            InlineKeyboardButton("üìã –ú–æ–∏ –ø–ª–∞–Ω—ã", callback_data="view_schedule")
        ],
        [
            InlineKeyboardButton("üìä –û—Ç—á–µ—Ç", callback_data="get_report"),
            InlineKeyboardButton("üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks")
        ],
        [
            InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å", callback_data="status"),
            InlineKeyboardButton("üÜî –ú–æ–π Telegram ID", callback_data="get_telegram_id")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=welcome_message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
from .utils import get_location_keyboard

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è button_callback
from .shift_handlers import (
    _handle_open_shift, _handle_close_shift, _handle_open_shift_object_selection,
    _handle_close_shift_selection, _handle_retry_location_open, _handle_retry_location_close,
    _handle_open_planned_shift
)
from .object_handlers import (
    _handle_manage_objects, _handle_edit_object, _handle_edit_field
)
from .timeslot_handlers import (
    _handle_manage_timeslots, _handle_create_timeslot, _handle_view_timeslots,
    _handle_edit_timeslots, _handle_delete_timeslots, _handle_create_regular_slot,
    _handle_create_additional_slot, _handle_create_slot_date, _handle_create_slot_custom_date,
    _handle_create_slot_week, _handle_edit_slot_date, _handle_edit_slot_custom_date,
    _handle_edit_slot_week, _handle_delete_slot_date, _handle_delete_slot_custom_date,
    _handle_delete_slot_week
)
from .utility_handlers import (
    _handle_help_callback, _handle_status_callback, _handle_get_telegram_id
)


async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    location = update.message.location
    
    logger.info(
        f"Location received from user",
        user_id=user_id,
        latitude=location.latitude,
        longitude=location.longitude
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state = user_state_manager.get_state(user_id)
    if not user_state:
        logger.warning(f"No state found for user {user_id} when processing location")
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–æ—Ç–∫—Ä—ã—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É)"
        )
        return
    
    logger.info(
        f"User state retrieved",
        user_id=user_id,
        action=user_state.action,
        step=user_state.step
    )
    
    if user_state.step not in [UserStep.LOCATION_REQUEST, UserStep.OPENING_OBJECT_LOCATION, UserStep.CLOSING_OBJECT_LOCATION]:
        logger.warning(
            f"Location not expected at this step",
            user_id=user_id,
            current_step=user_state.step,
            expected_steps=[UserStep.LOCATION_REQUEST, UserStep.OPENING_OBJECT_LOCATION, UserStep.CLOSING_OBJECT_LOCATION]
        )
        await update.message.reply_text(
            "‚ùå –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ"
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    user_state_manager.update_state(user_id, step=UserStep.PROCESSING)
    
    coordinates = f"{location.latitude},{location.longitude}"
    
    try:
        if user_state.action == UserAction.OPEN_SHIFT:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É
            shift_type = getattr(user_state, 'shift_type', 'spontaneous')
            timeslot_id = getattr(user_state, 'selected_timeslot_id', None)
            schedule_id = getattr(user_state, 'selected_schedule_id', None)
            
            logger.info(f"Opening shift with params: shift_type={shift_type}, timeslot_id={timeslot_id}, schedule_id={schedule_id}")
            
            result = await shift_service.open_shift(
                user_id=user_id,
                object_id=user_state.selected_object_id,
                coordinates=coordinates,
                shift_type=shift_type,
                timeslot_id=timeslot_id,
                schedule_id=schedule_id
            )
            
            if result['success']:
                object_name = result.get('object_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                start_time = result.get('start_time', '–°–µ–π—á–∞—Å') or '–°–µ–π—á–∞—Å'
                hourly_rate = result.get('hourly_rate', 0) or 0
                
                # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                from telegram import ReplyKeyboardRemove
                await update.message.reply_text(
                    f"‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞!\n"
                    f"üìç –û–±—ä–µ–∫—Ç: {object_name}\n"
                    f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}\n"
                    f"üí∞ –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {hourly_rate}‚ÇΩ",
                    reply_markup=ReplyKeyboardRemove()
                )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¢–û–õ–¨–ö–û –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                user_state_manager.clear_state(user_id)
                
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã: {result['error']}"
                if 'distance_meters' in result:
                    error_msg += f"\nüìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {result['distance_meters']:.0f}–º"
                    error_msg += f"\nüìê –ú–∞–∫—Å–∏–º—É–º: {result.get('max_distance_meters', 100)}–º"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
                keyboard = [
                    [InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data=f"retry_location:{user_state.selected_object_id}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(error_msg, reply_markup=reply_markup)
                # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                            
        elif user_state.action == UserAction.CLOSE_SHIFT:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É
            result = await shift_service.close_shift(
                user_id=user_id,
                shift_id=user_state.selected_shift_id,
                coordinates=coordinates
            )
            
            if result['success']:
                total_hours = result.get('total_hours', 0) or 0
                total_payment = result.get('total_payment', 0) or 0
                
                # Phase 4A: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –≤ –ë–î
                shift_tasks = getattr(user_state, 'shift_tasks', [])
                completed_tasks = getattr(user_state, 'completed_tasks', [])
                task_media = getattr(user_state, 'task_media', {})
                
                if shift_tasks:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ shift.notes –¥–ª—è Celery
                    async with get_async_session() as session:
                        from domain.entities.shift import Shift
                        import json
                        
                        shift_query = select(Shift).where(Shift.id == user_state.selected_shift_id)
                        shift_result = await session.execute(shift_query)
                        shift_obj = shift_result.scalar_one_or_none()
                        
                        if shift_obj:
                            # –î–æ–±–∞–≤–ª—è–µ–º JSON —Å completed_tasks –∏ task_media –≤ notes
                            completed_info = json.dumps({
                                'completed_tasks': completed_tasks,
                                'task_media': task_media
                            })
                            shift_obj.notes = (shift_obj.notes or '') + f"\n[TASKS]{completed_info}"
                            await session.commit()
                            
                            logger.info(
                                f"Saved completed tasks info",
                                shift_id=shift_obj.id,
                                completed_count=len(completed_tasks),
                                total_count=len(shift_tasks),
                                media_count=len(task_media)
                            )
                
                # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
                logger.info(
                    f"Close shift result for user {user_id}: result={result}, "
                    f"total_hours={total_hours}, total_payment={total_payment}"
                )
                
                # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                from telegram import ReplyKeyboardRemove
                shift_close_message = (
                    f"‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!\n"
                    f"‚è±Ô∏è –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_hours:.1f} —á–∞—Å–æ–≤\n"
                    f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_payment}‚ÇΩ"
                )
                
                await update.message.reply_text(shift_close_message, reply_markup=ReplyKeyboardRemove())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –±—ã–ª–∞ –ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ?
                # –ï—Å–ª–∏ –¥–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç
                from shared.services.object_opening_service import ObjectOpeningService
                from domain.entities.user import User
                
                # –ü–æ–ª—É—á–∞–µ–º object_id –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã
                closed_shift_object_id = result.get('object_id')
                
                logger.info(
                    f"Checking for auto-close object",
                    user_id=user_id,
                    shift_id=result.get('shift_id'),
                    object_id=closed_shift_object_id,
                    result_keys=list(result.keys())
                )
                
                if closed_shift_object_id:
                    async with get_async_session() as session:
                        opening_service = ObjectOpeningService(session)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ –µ—â–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã –Ω–∞ —ç—Ç–æ–º –æ–±—ä–µ–∫—Ç–µ?
                        active_count = await opening_service.get_active_shifts_count(closed_shift_object_id)
                        
                        if active_count == 0:
                            # –≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç
                            # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
                            user_query = select(User).where(User.telegram_id == user_id)
                            user_result = await session.execute(user_query)
                            db_user = user_result.scalar_one_or_none()
                            
                            if db_user:
                                try:
                                    opening = await opening_service.close_object(
                                        object_id=closed_shift_object_id,
                                        user_id=db_user.id,
                                        coordinates=coordinates
                                    )
                                    
                                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                                    from core.utils.timezone_helper import timezone_helper
                                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è timezone
                                    obj_query = select(Object).where(Object.id == closed_shift_object_id)
                                    obj_result = await session.execute(obj_query)
                                    obj = obj_result.scalar_one_or_none()
                                    
                                    object_timezone = getattr(obj, 'timezone', None) or 'Europe/Moscow'
                                    close_time = timezone_helper.format_local_time(opening.closed_at, object_timezone, '%H:%M')
                                    
                                    await update.message.reply_text(
                                        f"‚úÖ <b>–û–±—ä–µ–∫—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç!</b>\n\n"
                                        f"(–≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞)\n\n"
                                        f"‚è∞ –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: {close_time}\n"
                                        f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –æ–±—ä–µ–∫—Ç–∞: {opening.duration_hours:.1f}—á",
                                        parse_mode='HTML'
                                    )
                                    
                                    logger.info(
                                        f"Object auto-closed after last shift closed",
                                        object_id=closed_shift_object_id,
                                        user_id=user_id,
                                        shift_id=user_state.selected_shift_id
                                    )
                                except ValueError as e:
                                    logger.warning(
                                        f"Failed to auto-close object",
                                        object_id=closed_shift_object_id,
                                        error=str(e)
                                    )
                                    await update.message.reply_text(
                                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—å –æ–±—ä–µ–∫—Ç: {str(e)}\n"
                                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–∫—Ä—ã—Ç—å –æ–±—ä–µ–∫—Ç' –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Ä—É—á–Ω—É—é."
                                    )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¢–û–õ–¨–ö–û –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                user_state_manager.clear_state(user_id)
                
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã: {result['error']}"
                if 'distance_meters' in result:
                    error_msg += f"\nüìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {result['distance_meters']:.0f}–º"
                    error_msg += f"\nüìê –ú–∞–∫—Å–∏–º—É–º: {result.get('max_distance_meters', 100)}–º"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
                keyboard = [
                    [InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data=f"retry_close_location:{user_state.selected_shift_id}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(error_msg, reply_markup=reply_markup)
                # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        
        elif user_state.action == UserAction.OPEN_OBJECT:
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—ä–µ–∫—Ç–∞ + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã
            from shared.services.object_opening_service import ObjectOpeningService
            from core.geolocation.location_validator import LocationValidator
            from domain.entities.user import User
            
            async with get_async_session() as session:
                opening_service = ObjectOpeningService(session)
                location_validator = LocationValidator()
                
                # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
                user_query = select(User).where(User.telegram_id == user_id)
                user_result = await session.execute(user_query)
                db_user = user_result.scalar_one_or_none()
                
                if not db_user:
                    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    user_state_manager.clear_state(user_id)
                    return
                
                # –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç
                obj_query = select(Object).where(Object.id == user_state.selected_object_id)
                obj_result = await session.execute(obj_query)
                obj = obj_result.scalar_one_or_none()
                
                if not obj:
                    await update.message.reply_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    user_state_manager.clear_state(user_id)
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                validation_result = location_validator.validate_shift_location(
                    user_coordinates=coordinates,
                    object_coordinates=obj.coordinates,
                    max_distance_meters=obj.max_distance_meters
                )
                
                if not validation_result['valid']:
                    await update.message.reply_text(
                        f"‚ùå –í—ã —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –æ–±—ä–µ–∫—Ç–∞!\n"
                        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {validation_result['distance_meters']:.0f}–º\n"
                        f"üìê –ú–∞–∫—Å–∏–º—É–º: {validation_result['max_distance_meters']}–º"
                    )
                    return
                
                # –û—Ç–∫—Ä—ã—Ç—å –æ–±—ä–µ–∫—Ç
                try:
                    opening = await opening_service.open_object(
                        object_id=obj.id,
                        user_id=db_user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID, –∞ –Ω–µ telegram_id
                        coordinates=coordinates
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —ç—Ç–æ–º –æ–±—ä–µ–∫—Ç–µ?
                    from apps.bot.services.shift_schedule_service import ShiftScheduleService
                    from datetime import date
                    
                    shift_schedule_service = ShiftScheduleService()
                    today = date.today()
                    planned_shifts = await shift_schedule_service.get_user_planned_shifts_for_date(user_id, today)
                    
                    # –ò—â–µ–º —Å–º–µ–Ω—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                    schedule_for_object = None
                    for shift_data in planned_shifts:
                        if shift_data.get('object_id') == obj.id:
                            schedule_for_object = shift_data
                            break
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
                    if schedule_for_object:
                        # –ï—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–º–µ–Ω–∞ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ—ë
                        result = await shift_service.open_shift(
                            user_id=user_id,
                            object_id=obj.id,
                            coordinates=coordinates,
                            shift_type='planned',
                            timeslot_id=schedule_for_object.get('time_slot_id'),
                            schedule_id=schedule_for_object.get('id')
                        )
                    else:
                        # –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–º–µ–Ω—ã - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–æ–Ω—Ç–∞–Ω–Ω—É—é
                        result = await shift_service.open_shift(
                            user_id=user_id,
                            object_id=obj.id,
                            coordinates=coordinates,
                            shift_type='spontaneous'
                        )
                    
                    if result['success']:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –æ–±—ä–µ–∫—Ç–∞
                        from core.utils.timezone_helper import timezone_helper
                        object_timezone = getattr(obj, 'timezone', None) or 'Europe/Moscow'
                        local_time = timezone_helper.format_local_time(opening.opened_at, object_timezone, '%H:%M')
                        
                        await update.message.reply_text(
                            f"‚úÖ <b>–û–±—ä–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç!</b>\n\n"
                            f"üè¢ –û–±—ä–µ–∫—Ç: {obj.name}\n"
                            f"‚è∞ –í—Ä–µ–º—è: {local_time}\n\n"
                            f"‚úÖ <b>–°–º–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∞</b>\n"
                            f"üí∞ –°—Ç–∞–≤–∫–∞: {result.get('hourly_rate', 0)}‚ÇΩ/—á–∞—Å",
                            parse_mode='HTML'
                        )
                        user_state_manager.clear_state(user_id)
                    else:
                        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—ä–µ–∫—Ç–∞
                        await opening_service.close_object(obj.id, db_user.id, coordinates)
                        await update.message.reply_text(
                            f"‚ùå –û–±—ä–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É:\n{result['error']}"
                        )
                        user_state_manager.clear_state(user_id)
                        
                except ValueError as e:
                    await update.message.reply_text(f"‚ùå {str(e)}")
                    user_state_manager.clear_state(user_id)
        
        elif user_state.action == UserAction.CLOSE_OBJECT:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±—ä–µ–∫—Ç–∞ - –°–ù–ê–ß–ê–õ–ê –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É, –ü–û–¢–û–ú –æ–±—ä–µ–∫—Ç
            from shared.services.object_opening_service import ObjectOpeningService
            from domain.entities.user import User
            
            # –ï—Å–ª–∏ step=TASK_COMPLETION, –∑–Ω–∞—á–∏—Ç –±—ã–ª–∏ –∑–∞–¥–∞—á–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ shift.notes
            if user_state.step == UserStep.TASK_COMPLETION:
                completed_tasks = user_state.completed_tasks or []
                task_media = user_state.task_media or {}
                
                # –û–±–Ω–æ–≤–ª—è–µ–º shift.notes —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
                async with get_async_session() as session:
                    from domain.entities.shift import Shift
                    shift_query = select(Shift).where(Shift.id == user_state.selected_shift_id)
                    shift_result = await session.execute(shift_query)
                    shift = shift_result.scalar_one_or_none()
                    
                    if shift:
                        import json
                        shift.notes = json.dumps({
                            'completed_tasks': completed_tasks,
                            'task_media': task_media
                        }, ensure_ascii=False)
                        await session.commit()
            
            # 1. –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É
            result = await shift_service.close_shift(
                user_id=user_id,
                shift_id=user_state.selected_shift_id,
                coordinates=coordinates
            )
            
            if not result['success']:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                )
                user_state_manager.clear_state(user_id)
                return
            
            # 2. –ó–∞–∫—Ä—ã—Ç—å –æ–±—ä–µ–∫—Ç
            async with get_async_session() as session:
                opening_service = ObjectOpeningService(session)
                
                # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
                user_query = select(User).where(User.telegram_id == user_id)
                user_result = await session.execute(user_query)
                db_user = user_result.scalar_one_or_none()
                
                if not db_user:
                    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    user_state_manager.clear_state(user_id)
                    return
                
                try:
                    opening = await opening_service.close_object(
                        object_id=user_state.selected_object_id,
                        user_id=db_user.id,
                        coordinates=coordinates
                    )
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                    from core.utils.timezone_helper import timezone_helper
                    close_time = timezone_helper.format_local_time(opening.closed_at, 'Europe/Moscow', '%H:%M')
                    
                    await update.message.reply_text(
                        f"‚úÖ <b>–°–º–µ–Ω–∞ –∏ –æ–±—ä–µ–∫—Ç –∑–∞–∫—Ä—ã—Ç—ã!</b>\n\n"
                        f"‚è±Ô∏è –í—Ä–µ–º—è —Å–º–µ–Ω—ã: {result.get('total_hours', 0):.1f}—á\n"
                        f"üí∞ –û–ø–ª–∞—Ç–∞: {result.get('total_payment', 0):.0f}‚ÇΩ\n"
                        f"‚è∞ –û–±—ä–µ–∫—Ç –∑–∞–∫—Ä—ã—Ç –≤: {close_time}\n"
                        f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –æ–±—ä–µ–∫—Ç–∞: {opening.duration_hours:.1f}—á",
                        parse_mode='HTML'
                    )
                    user_state_manager.clear_state(user_id)
                    
                except ValueError as e:
                    await update.message.reply_text(f"‚ùå {str(e)}")
                    user_state_manager.clear_state(user_id)
        
        else:
            logger.warning(
                f"No handler for action/step combination",
                user_id=user_id,
                action=user_state.action,
                step=user_state.step
            )
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å /start"
            )
            user_state_manager.clear_state(user_id)
    
    except Exception as e:
        logger.error(f"Error processing location for user {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    
    user = query.from_user
    chat_id = query.message.chat_id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_manager.update_user_activity(user.id)
    
    logger.info(
        f"Button callback received: user_id={user.id}, username={user.username}, callback_data={query.data}"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–Ω–æ–ø–æ–∫
    if query.data == "open_object":
        from .object_state_handlers import _handle_open_object
        await _handle_open_object(update, context)
        return
    elif query.data == "close_object":
        from .object_state_handlers import _handle_close_object
        await _handle_close_object(update, context)
        return
    elif query.data.startswith("select_object_to_open:"):
        from .object_state_handlers import _handle_select_object_to_open
        await _handle_select_object_to_open(update, context)
        return
    elif query.data == "open_shift":
        await _handle_open_shift(update, context)
        return
    elif query.data == "close_shift":
        await _handle_close_shift(update, context)
        return
    elif query.data.startswith("open_shift_object:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_open_shift_object_selection(update, context, object_id)
        return
    elif query.data.startswith("open_planned_shift:"):
        schedule_id = int(query.data.split(":", 1)[1])
        await _handle_open_planned_shift(update, context, schedule_id)
        return
    elif query.data.startswith("close_shift_select:"):
        shift_id = int(query.data.split(":", 1)[1])
        await _handle_close_shift_selection(update, context, shift_id)
        return
    elif query.data.startswith("edit_object:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_edit_object(update, context, object_id)
        return
    elif query.data.startswith("edit_field:"):
        # –§–æ—Ä–º–∞—Ç: edit_field:object_id:field_name
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            object_id = int(parts[1])
            field_name = parts[2]
            await _handle_edit_field(update, context, object_id, field_name)
        return
    elif query.data == "create_object":
        from .object_creation_handlers import handle_create_object_start
        await handle_create_object_start(update, context)
        return
    elif query.data == "manage_objects":
        await _handle_manage_objects(update, context)
        return
    elif query.data.startswith("delete_object:"):
        object_id = int(query.data.split(":", 1)[1])
        from .object_handlers import _handle_delete_object
        await _handle_delete_object(update, context, object_id)
        return
    elif query.data.startswith("confirm_delete_object:"):
        object_id = int(query.data.split(":", 1)[1])
        from .object_handlers import _handle_confirm_delete_object
        await _handle_confirm_delete_object(update, context, object_id)
        return
    elif query.data.startswith("retry_location:"):
        # –§–æ—Ä–º–∞—Ç: retry_location:object_id
        object_id = int(query.data.split(":", 1)[1])
        await _handle_retry_location_open(update, context, object_id)
        return
    elif query.data.startswith("retry_close_location:"):
        # –§–æ—Ä–º–∞—Ç: retry_close_location:shift_id
        shift_id = int(query.data.split(":", 1)[1])
        await _handle_retry_location_close(update, context, shift_id)
        return
    # –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–º–µ–Ω—É (Phase 4A: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
    elif query.data.startswith("complete_shift_task:"):
        from .shift_handlers import _handle_complete_shift_task
        parts = query.data.split(":", 2)
        shift_id = int(parts[1])
        task_idx = int(parts[2])
        await _handle_complete_shift_task(update, context, shift_id, task_idx)
        return
    elif query.data.startswith("close_shift_with_tasks:"):
        from .shift_handlers import _handle_close_shift_with_tasks
        shift_id = int(query.data.split(":", 1)[1])
        await _handle_close_shift_with_tasks(update, context, shift_id)
        return
    elif query.data.startswith("cancel_media_upload:"):
        # –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        shift_id = int(query.data.split(":", 1)[1])
        user_state = user_state_manager.get_state(user_id)
        if user_state:
            user_state_manager.update_state(user_id, step=UserStep.TASK_COMPLETION, pending_media_task_idx=None)
            shift_tasks = getattr(user_state, 'shift_tasks', [])
            completed_tasks = getattr(user_state, 'completed_tasks', [])
            task_media = getattr(user_state, 'task_media', {})
            from .shift_handlers import _show_task_list
            await _show_task_list(context, user_id, shift_id, shift_tasks, completed_tasks, task_media)
        return
    # –ú–æ–∏ –∑–∞–¥–∞—á–∏ (–≤–æ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã)
    elif query.data == "my_tasks":
        from .shift_handlers import _handle_my_tasks
        await _handle_my_tasks(update, context)
        return
    elif query.data.startswith("complete_my_task:"):
        from .shift_handlers import _handle_complete_my_task
        parts = query.data.split(":", 2)
        shift_id = int(parts[1])
        task_idx = int(parts[2])
        await _handle_complete_my_task(update, context, shift_id, task_idx)
        return
    elif query.data.startswith("cancel_my_task_media:"):
        shift_id = int(query.data.split(":", 1)[1])
        user_state = user_state_manager.get_state(user_id)
        if user_state:
            user_state_manager.update_state(user_id, step=UserStep.TASK_COMPLETION, pending_media_task_idx=None)
            shift_tasks = getattr(user_state, 'shift_tasks', [])
            completed_tasks = getattr(user_state, 'completed_tasks', [])
            task_media = getattr(user_state, 'task_media', {})
            from .shift_handlers import _show_my_tasks_list
            await _show_my_tasks_list(context, user_id, shift_id, shift_tasks, completed_tasks, task_media)
        return
    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω
    elif query.data == "schedule_shift":
        from .schedule_handlers import handle_schedule_shift
        await handle_schedule_shift(update, context)
        return
    elif query.data == "view_schedule":
        from .schedule_handlers import handle_view_schedule
        await handle_view_schedule(update, context)
        return
    elif query.data.startswith("schedule_select_object_"):
        from .schedule_handlers import handle_schedule_object_selection
        await handle_schedule_object_selection(update, context)
        return
    elif query.data in ["schedule_date_today", "schedule_date_tomorrow", "schedule_date_custom"]:
        from .schedule_handlers import handle_schedule_date_selection
        await handle_schedule_date_selection(update, context)
        return
    elif query.data.startswith("schedule_select_slot_"):
        from .schedule_handlers import handle_schedule_confirmation
        await handle_schedule_confirmation(update, context)
        return
    elif query.data == "cancel_schedule":
        from .schedule_handlers import handle_cancel_schedule
        await handle_cancel_schedule(update, context)
        return
    elif query.data.startswith("cancel_shift_"):
        from .schedule_handlers import handle_cancel_shift
        await handle_cancel_shift(update, context)
        return
    elif query.data == "close_schedule":
        from .schedule_handlers import handle_close_schedule
        await handle_close_schedule(update, context)
        return
    elif query.data == "get_report":
        # –û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É: –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        from .earnings_report_handlers import EarningsReportHandlers
        earnings_handler = EarningsReportHandlers()
        await earnings_handler.start_earnings_report(update, context)
        return
    elif query.data.startswith("week_") or query.data == "custom_dates" or query.data == "cancel_report":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        from .earnings_report_handlers import EarningsReportHandlers
        earnings_handler = EarningsReportHandlers()
        await earnings_handler.handle_week_selection(update, context)
        return
    elif query.data.startswith("report_object_") or query.data == "report_all_objects":
        # –í—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        from .analytics_handlers import AnalyticsHandlers
        analytics = AnalyticsHandlers()
        await analytics.select_object(update, context)
        return
    elif query.data.startswith("period_"):
        # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        from .analytics_handlers import AnalyticsHandlers
        analytics = AnalyticsHandlers()
        await analytics.select_period(update, context)
        return
    elif query.data.startswith("format_"):
        # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
        from .analytics_handlers import AnalyticsHandlers
        analytics = AnalyticsHandlers()
        await analytics.select_format(update, context)
        return
    elif query.data == "analytics_cancel":
        # –û—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        from .analytics_handlers import AnalyticsHandlers
        analytics = AnalyticsHandlers()
        await analytics.cancel_analytics(update, context)
        return
    elif query.data == "analytics_dashboard":
        # –ü–æ–∫–∞–∑ –¥–∞—à–±–æ—Ä–¥–∞
        from .analytics_handlers import AnalyticsHandlers
        analytics = AnalyticsHandlers()
        await analytics.show_dashboard(update, context)
        return
    elif query.data == "analytics_report":
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        from .analytics_handlers import AnalyticsHandlers
        analytics = AnalyticsHandlers()
        await analytics.start_report_creation(update, context)
        return
    elif query.data == "help":
        await _handle_help_callback(update, context)
        return
    elif query.data == "status":
        await _handle_status_callback(update, context)
        return
    elif query.data == "get_telegram_id":
        await _handle_get_telegram_id(update, context)
        return
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏
    elif query.data.startswith("manage_timeslots:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_manage_timeslots(update, context, object_id)
        return
    elif query.data.startswith("create_timeslot:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_create_timeslot(update, context, object_id)
        return
    elif query.data.startswith("view_timeslots:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_view_timeslots(update, context, object_id)
        return
    elif query.data.startswith("edit_timeslots:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_edit_timeslots(update, context, object_id)
        return
    elif query.data.startswith("edit_timeslot:"):
        timeslot_id = int(query.data.split(":", 1)[1])
        from .timeslot_handlers import _handle_edit_single_timeslot
        await _handle_edit_single_timeslot(update, context, timeslot_id)
        return
    elif query.data.startswith("edit_timeslot_time:"):
        timeslot_id = int(query.data.split(":", 1)[1])
        from .timeslot_handlers import _handle_edit_timeslot_time
        await _handle_edit_timeslot_time(update, context, timeslot_id)
        return
    elif query.data.startswith("edit_timeslot_rate:"):
        timeslot_id = int(query.data.split(":", 1)[1])
        from .timeslot_handlers import _handle_edit_timeslot_rate
        await _handle_edit_timeslot_rate(update, context, timeslot_id)
        return
    elif query.data.startswith("edit_timeslot_employees:"):
        timeslot_id = int(query.data.split(":", 1)[1])
        from .timeslot_handlers import _handle_edit_timeslot_employees
        await _handle_edit_timeslot_employees(update, context, timeslot_id)
        return
    elif query.data.startswith("edit_timeslot_notes:"):
        timeslot_id = int(query.data.split(":", 1)[1])
        from .timeslot_handlers import _handle_edit_timeslot_notes
        await _handle_edit_timeslot_notes(update, context, timeslot_id)
        return
    elif query.data.startswith("toggle_timeslot_status:"):
        timeslot_id = int(query.data.split(":", 1)[1])
        from .timeslot_handlers import _handle_toggle_timeslot_status
        await _handle_toggle_timeslot_status(update, context, timeslot_id)
        return
    elif query.data.startswith("delete_timeslot:"):
        timeslot_id = int(query.data.split(":", 1)[1])
        from .timeslot_handlers import _handle_delete_timeslot
        await _handle_delete_timeslot(update, context, timeslot_id)
        return
    elif query.data.startswith("confirm_delete_timeslot:"):
        timeslot_id = int(query.data.split(":", 1)[1])
        from .timeslot_handlers import _handle_confirm_delete_timeslot
        await _handle_confirm_delete_timeslot(update, context, timeslot_id)
        return
    elif query.data.startswith("delete_timeslots:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_delete_timeslots(update, context, object_id)
        return
    elif query.data.startswith("create_regular_slot:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_create_regular_slot(update, context, object_id)
        return
    elif query.data.startswith("create_additional_slot:"):
        object_id = int(query.data.split(":", 1)[1])
        await _handle_create_additional_slot(update, context, object_id)
        return
    elif query.data.startswith("create_slot_date:"):
        # –§–æ—Ä–º–∞—Ç: create_slot_date:object_id:type:date
        parts = query.data.split(":", 3)
        if len(parts) == 4:
            object_id = int(parts[1])
            slot_type = parts[2]
            slot_date = parts[3]
            await _handle_create_slot_date(update, context, object_id, slot_type, slot_date)
        return
    elif query.data.startswith("create_slot_custom_date:"):
        # –§–æ—Ä–º–∞—Ç: create_slot_custom_date:object_id:type
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            object_id = int(parts[1])
            slot_type = parts[2]
            await _handle_create_slot_custom_date(update, context, object_id, slot_type)
        return
    elif query.data.startswith("create_slot_week:"):
        # –§–æ—Ä–º–∞—Ç: create_slot_week:object_id:type
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            object_id = int(parts[1])
            slot_type = parts[2]
            await _handle_create_slot_week(update, context, object_id, slot_type)
        return
    elif query.data.startswith("edit_slot_date:"):
        # –§–æ—Ä–º–∞—Ç: edit_slot_date:object_id:type:date
        parts = query.data.split(":", 3)
        if len(parts) == 4:
            object_id = int(parts[1])
            slot_type = parts[2]
            slot_date = parts[3]
            await _handle_edit_slot_date(update, context, object_id, slot_type, slot_date)
        return
    elif query.data.startswith("edit_slot_custom_date:"):
        # –§–æ—Ä–º–∞—Ç: edit_slot_custom_date:object_id:type
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            object_id = int(parts[1])
            slot_type = parts[2]
            await _handle_edit_slot_custom_date(update, context, object_id, slot_type)
        return
    elif query.data.startswith("edit_slot_week:"):
        # –§–æ—Ä–º–∞—Ç: edit_slot_week:object_id:type
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            object_id = int(parts[1])
            slot_type = parts[2]
            await _handle_edit_slot_week(update, context, object_id, slot_type)
        return
    elif query.data.startswith("delete_slot_date:"):
        # –§–æ—Ä–º–∞—Ç: delete_slot_date:object_id:type:date
        parts = query.data.split(":", 3)
        if len(parts) == 4:
            object_id = int(parts[1])
            slot_type = parts[2]
            slot_date = parts[3]
            await _handle_delete_slot_date(update, context, object_id, slot_type, slot_date)
        return
    elif query.data.startswith("delete_slot_custom_date:"):
        # –§–æ—Ä–º–∞—Ç: delete_slot_custom_date:object_id:type
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            object_id = int(parts[1])
            slot_type = parts[2]
            await _handle_delete_slot_custom_date(update, context, object_id, slot_type)
        return
    elif query.data.startswith("delete_slot_week:"):
        # –§–æ—Ä–º–∞—Ç: delete_slot_week:object_id:type
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            object_id = int(parts[1])
            slot_type = parts[2]
            await _handle_delete_slot_week(update, context, object_id, slot_type)
        return    
    elif query.data == "main_menu" or query.data == "back_to_menu":
        response = f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:
"""
    else:
        response = """
‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    keyboard = [
        [
            InlineKeyboardButton("üè¢ –û—Ç–∫—Ä—ã—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="open_object"),
            InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="close_object")
        ],
        [
            InlineKeyboardButton("üîÑ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="open_shift"),
            InlineKeyboardButton("üîö –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="close_shift")
        ],
        [
            InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É", callback_data="schedule_shift"),
            InlineKeyboardButton("üìã –ú–æ–∏ –ø–ª–∞–Ω—ã", callback_data="view_schedule")
        ],
        [
            InlineKeyboardButton("üìä –û—Ç—á–µ—Ç", callback_data="get_report"),
            InlineKeyboardButton("üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks")
        ],
        [
            InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å", callback_data="status"),
            InlineKeyboardButton("üÜî –ú–æ–π Telegram ID", callback_data="get_telegram_id")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await query.edit_message_text(
        text=response,
        parse_mode='HTML',
        reply_markup=reply_markup
    )
