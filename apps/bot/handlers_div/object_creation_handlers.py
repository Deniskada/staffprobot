"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤."""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from core.logging.logger import logger
from apps.bot.services.object_service import ObjectService
# from core.state import user_state_manager, UserAction, UserStep
from core.geolocation.location_validator import LocationValidator

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
object_service = ObjectService()
location_validator = LocationValidator()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_object_creation_state = {}


async def _get_address_from_coordinates(lat: float, lon: float) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)."""
    try:
        import httpx
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Nominatim API –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        url = "https://nominatim.openstreetmap.org/reverse"
        params = {
            'lat': lat,
            'lon': lon,
            'format': 'json',
            'addressdetails': 1,
            'accept-language': 'ru'
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.get(url, params=params, timeout=10.0)
            data = response.json()
            
            if 'display_name' in data:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –∞–¥—Ä–µ—Å
                address_parts = []
                address = data.get('address', {})
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞
                if 'house_number' in address and 'road' in address:
                    address_parts.append(f"{address['road']}, {address['house_number']}")
                elif 'road' in address:
                    address_parts.append(address['road'])
                
                if 'city' in address:
                    address_parts.append(address['city'])
                elif 'town' in address:
                    address_parts.append(address['town'])
                elif 'village' in address:
                    address_parts.append(address['village'])
                
                if 'state' in address:
                    address_parts.append(address['state'])
                
                if address_parts:
                    return ', '.join(address_parts)
                else:
                    return data['display_name']
            else:
                return f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}"
                
    except Exception as e:
        logger.error(f"Error getting address from coordinates: {e}")
        return f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}"


async def handle_create_object_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    user_object_creation_state[user_id] = {
        'step': 'name',
        'data': {}
    }
    
    await query.edit_message_text(
        text="üè¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
             "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        ]])
    )


async def handle_create_object_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞."""
    user_id = update.effective_user.id
    
    if user_id not in user_object_creation_state:
        await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    state = user_object_creation_state[user_id]
    step = state['step']
    
    if step == 'name':
        await _handle_name_input(update, context, text, state)
    elif step == 'address':
        await _handle_address_input(update, context, text, state)
    elif step == 'coordinates':
        await _handle_coordinates_input(update, context, text, state)
    elif step == 'hourly_rate':
        await _handle_hourly_rate_input(update, context, text, state)
    elif step == 'max_distance':
        await _handle_max_distance_input(update, context, text, state)
    elif step == 'opening_time':
        await _handle_opening_time_input(update, context, text, state)
    elif step == 'closing_time':
        await _handle_closing_time_input(update, context, text, state)
    elif step == 'auto_close_minutes':
        await _handle_auto_close_input(update, context, text, state)


async def _handle_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞."""
    if not text.strip():
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    
    state['data']['name'] = text.strip()
    state['step'] = 'address'
    
    await update.message.reply_text(
        "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é):",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        ]])
    )


async def _handle_address_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –æ–±—ä–µ–∫—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if update.message.location:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)
        address = await _get_address_from_coordinates(lat, lon)
        state['data']['address'] = address
        state['data']['latitude'] = lat
        state['data']['longitude'] = lon
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ —á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞—è –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        state['step'] = 'hourly_rate'
        
        await update.message.reply_text(
            f"‚úÖ <b>–ê–¥—Ä–µ—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:</b> {address}\n"
            f"üìç <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {lat:.6f}, {lon:.6f}\n\n"
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É –≤ —Ä—É–±–ª—è—Ö:",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
            ]])
        )
    else:
        # –û–±—ã—á–Ω—ã–π –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞
        state['data']['address'] = text.strip() if text.strip() else None
        state['step'] = 'coordinates'
        
        await update.message.reply_text(
            "üìç –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞</code>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>55.7558, 37.6176</code>\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
            ]])
        )


async def _handle_coordinates_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±—ä–µ–∫—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if update.message.location:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        state['data']['latitude'] = lat
        state['data']['longitude'] = lon
    else:
        # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        try:
            coords = text.strip().split(',')
            if len(coords) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
            
            lat = float(coords[0].strip())
            lon = float(coords[1].strip())
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            validation_result = location_validator.validate_coordinates(text.strip())
            if not validation_result['valid']:
                await update.message.reply_text(
                    f"‚ùå {validation_result['error']}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
                )
                return
            
            state['data']['latitude'] = lat
            state['data']['longitude'] = lon
        except (ValueError, IndexError):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "<code>—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞</code>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>55.7558, 37.6176</code>",
                parse_mode='HTML'
            )
            return
    
    state['step'] = 'hourly_rate'
    
    await update.message.reply_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É –≤ —Ä—É–±–ª—è—Ö:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        ]])
    )


async def _handle_hourly_rate_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏."""
    try:
        hourly_rate = float(text.strip())
        if hourly_rate <= 0:
            raise ValueError("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        state['data']['hourly_rate'] = hourly_rate
        state['step'] = 'max_distance'
        
        await update.message.reply_text(
            "üìè –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –º–µ—Ç—Ä–∞—Ö (–æ—Ç 10 –¥–æ 5000):\n\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 500–º",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
            ]])
        )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>500</code>",
            parse_mode='HTML'
        )


async def _handle_max_distance_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è."""
    try:
        if text.strip():
            max_distance = int(text.strip())
            if max_distance < 10 or max_distance > 5000:
                raise ValueError("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 5000 –º–µ—Ç—Ä–æ–≤")
            state['data']['max_distance_meters'] = max_distance
        else:
            state['data']['max_distance_meters'] = 500  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        state['step'] = 'opening_time'
        
        await update.message.reply_text(
            "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00):",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
            ]])
        )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 5000:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>500</code>",
            parse_mode='HTML'
        )


async def _handle_opening_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–±—ä–µ–∫—Ç–∞."""
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        time_parts = text.strip().split(':')
        if len(time_parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        
        hour, minute = int(time_parts[0]), int(time_parts[1])
        if not (0 <= hour <= 23) or not (0 <= minute <= 59):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è")
        
        state['data']['opening_time'] = f"{hour:02d}:{minute:02d}"
        state['step'] = 'closing_time'
        
        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è: {state['data']['opening_time']}\n\n"
            "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:00):",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
            ]])
        )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00):",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
            ]])
        )


async def _handle_closing_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–±—ä–µ–∫—Ç–∞."""
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        time_parts = text.strip().split(':')
        if len(time_parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        
        hour, minute = int(time_parts[0]), int(time_parts[1])
        if not (0 <= hour <= 23) or not (0 <= minute <= 59):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è")
        
        state['data']['closing_time'] = f"{hour:02d}:{minute:02d}"
        state['step'] = 'auto_close_minutes'
        
        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: {state['data']['closing_time']}\n\n"
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 15 –¥–æ 480):\n\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 60 –º–∏–Ω—É—Ç",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
            ]])
        )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:00):",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
            ]])
        )


async def _handle_auto_close_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞."""
    try:
        if text.strip():
            auto_close = int(text.strip())
            if auto_close < 15 or auto_close > 480:
                raise ValueError("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 15 –¥–æ 480 –º–∏–Ω—É—Ç")
            state['data']['auto_close_minutes'] = auto_close
        else:
            state['data']['auto_close_minutes'] = 60  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
        user_id = update.effective_user.id
        coordinates = f"{state['data']['latitude']},{state['data']['longitude']}"
        result = object_service.create_object(
            name=state['data']['name'],
            address=state['data'].get('address', ''),
            coordinates=coordinates,
            opening_time=state['data']['opening_time'],
            closing_time=state['data']['closing_time'],
            hourly_rate=state['data']['hourly_rate'],
            max_distance_meters=state['data']['max_distance_meters'],
            auto_close_minutes=state['data']['auto_close_minutes'],
            owner_id=user_id
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in user_object_creation_state:
            del user_object_creation_state[user_id]
        
        if result['success']:
            await update.message.reply_text(
                f"‚úÖ <b>–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {state['data']['name']}\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {state['data'].get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üïê <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {state['data']['opening_time']} - {state['data']['closing_time']}\n"
                f"üí∞ <b>–°—Ç–∞–≤–∫–∞:</b> {state['data']['hourly_rate']}‚ÇΩ/—á–∞—Å\n"
                f"üìè <b>–ú–∞–∫—Å. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> {state['data']['max_distance_meters']}–º\n"
                f"‚è∞ <b>–ê–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ:</b> {state['data']['auto_close_minutes']} –º–∏–Ω.\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–º–µ–Ω—ã –Ω–∞ —ç—Ç–æ–º –æ–±—ä–µ–∫—Ç–µ!",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
        else:
            await update.message.reply_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:</b>\n\n{result['error']}",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_object"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 15 –¥–æ 480:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>60</code>",
            parse_mode='HTML'
        )
