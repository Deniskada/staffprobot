"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤."""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from core.logging.logger import logger
from apps.bot.services.time_slot_service import TimeSlotService
from apps.bot.services.object_service import ObjectService
from core.state import user_state_manager, UserAction, UserStep
from datetime import date, timedelta

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
time_slot_service = TimeSlotService()
object_service = ObjectService()


async def _handle_manage_timeslots(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏ –æ–±—ä–µ–∫—Ç–∞."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
    obj_data = object_service.get_object_by_id(object_id)
    if not obj_data:
        await query.edit_message_text(
            text="‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã
    timeslots = await time_slot_service.get_object_timeslots(object_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üïê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏</b>\n\n"
    message += f"üè¢ <b>–û–±—ä–µ–∫—Ç:</b> {obj_data['name']}\n"
    message += f"‚è∞ <b>–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b> {obj_data.get('working_hours', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    message += f"üí∞ <b>–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:</b> {obj_data['hourly_rate']}‚ÇΩ/—á–∞—Å\n\n"
    
    if timeslots:
        message += f"üìÖ <b>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã:</b> {len(timeslots)}\n"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ 3 —Ç–∞–π–º-—Å–ª–æ—Ç–∞
        upcoming_timeslots = [ts for ts in timeslots if ts['slot_date'] >= date.today()][:3]
        for ts in upcoming_timeslots:
            status = "üü¢" if ts['is_active'] else "üî¥"
            additional = " (–¥–æ–ø.)" if ts['is_additional'] else ""
            message += f"{status} {ts['slot_date'].strftime('%d.%m.%Y')} {ts['start_time']}-{ts['end_time']}{additional}\n"
    else:
        message += "üìÖ <b>–¢–∞–π–º-—Å–ª–æ—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã</b>\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–∞–π–º-—Å–ª–æ—Ç", callback_data=f"create_timeslot:{object_id}"),
            InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", callback_data=f"view_timeslots:{object_id}")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_timeslots:{object_id}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_timeslots:{object_id}")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–±—ä–µ–∫—Ç—É", callback_data=f"edit_object:{object_id}"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_create_timeslot(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    obj_data = object_service.get_object_by_id(object_id)
    
    message = f"‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞</b>\n\n"
    message += f"üè¢ <b>–û–±—ä–µ–∫—Ç:</b> {obj_data['name']}\n"
    message += f"‚è∞ <b>–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b> {obj_data.get('working_hours', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–∞–π–º-—Å–ª–æ—Ç–∞:"
    
    keyboard = [
        [
            InlineKeyboardButton("üïê –û–±—ã—á–Ω—ã–π —Å–ª–æ—Ç", callback_data=f"create_regular_slot:{object_id}"),
            InlineKeyboardButton("‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç", callback_data=f"create_additional_slot:{object_id}")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_view_timeslots(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    timeslots = await time_slot_service.get_object_timeslots(object_id)
    
    if not timeslots:
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç", callback_data=f"create_timeslot:{object_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìã <b>–¢–∞–π–º-—Å–ª–æ—Ç—ã –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
            "–£ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤.\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç?",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–∞–π–º-—Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–∞–º
    timeslots_by_date = {}
    for ts in timeslots:
        date_key = ts['slot_date']
        if date_key not in timeslots_by_date:
            timeslots_by_date[date_key] = []
        timeslots_by_date[date_key].append(ts)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    sorted_dates = sorted(timeslots_by_date.keys())
    
    message = f"üìã <b>–¢–∞–π–º-—Å–ª–æ—Ç—ã –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
    
    for slot_date in sorted_dates:
        date_timeslots = timeslots_by_date[slot_date]
        message += f"üìÖ <b>{slot_date.strftime('%d.%m.%Y')}</b>\n"
        
        for ts in date_timeslots:
            status = "üü¢" if ts['is_active'] else "üî¥"
            additional = " (–¥–æ–ø.)" if ts['is_additional'] else ""
            rate = f" {ts['hourly_rate']}‚ÇΩ/—á–∞—Å" if ts['hourly_rate'] else ""
            message += f"  {status} {ts['start_time']}-{ts['end_time']}{additional}{rate}\n"
        
        message += "\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data=f"create_timeslot:{object_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_edit_timeslots(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    timeslots = await time_slot_service.get_object_timeslots(object_id)
    
    if not timeslots:
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç", callback_data=f"create_timeslot:{object_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤</b>\n\n"
            "–£ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤.\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç?",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    message = "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤</b>\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º-—Å–ª–æ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    
    keyboard = []
    for ts in timeslots[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        status = "üü¢" if ts['is_active'] else "üî¥"
        additional = " (–¥–æ–ø.)" if ts['is_additional'] else ""
        date_str = ts['slot_date'].strftime('%d.%m.%Y')
        time_str = f"{ts['start_time']}-{ts['end_time']}"
        
        keyboard.append([
            InlineKeyboardButton(
                f"{status} {date_str} {time_str}{additional}",
                callback_data=f"edit_timeslot:{ts['id']}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_delete_timeslots(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    timeslots = await time_slot_service.get_object_timeslots(object_id)
    
    if not timeslots:
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç", callback_data=f"create_timeslot:{object_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤</b>\n\n"
            "–£ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤.\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç?",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message = "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤</b>\n\n"
    message += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ –Ω–∞ –Ω–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Å–º–µ–Ω—ã.\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º-—Å–ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    
    keyboard = []
    for ts in timeslots[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        status = "üü¢" if ts['is_active'] else "üî¥"
        additional = " (–¥–æ–ø.)" if ts['is_additional'] else ""
        date_str = ts['slot_date'].strftime('%d.%m.%Y')
        time_str = f"{ts['start_time']}-{ts['end_time']}"
        
        keyboard.append([
            InlineKeyboardButton(
                f"{status} {date_str} {time_str}{additional}",
                callback_data=f"delete_timeslot:{ts['id']}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_create_regular_slot(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–∞–π–º-—Å–ª–æ—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    obj_data = object_service.get_object_by_id(object_id)
    
    message = f"üïê <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–∞–π–º-—Å–ª–æ—Ç–∞</b>\n\n"
    message += f"üè¢ <b>–û–±—ä–µ–∫—Ç:</b> {obj_data['name']}\n"
    message += f"‚è∞ <b>–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b> {obj_data.get('working_hours', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    message += "–û–±—ã—á–Ω—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –æ–±—ä–µ–∫—Ç–∞.\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞:"
    
    today = date.today()
    
    keyboard = [
        [
            InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data=f"create_slot_date:{object_id}:regular:{today.strftime('%Y-%m-%d')}"),
            InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data=f"create_slot_date:{object_id}:regular:{(today + timedelta(days=1)).strftime('%Y-%m-%d')}")
        ],
        [
            InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data=f"create_slot_custom_date:{object_id}:regular"),
            InlineKeyboardButton("üìÖ –°–æ–∑–¥–∞—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data=f"create_slot_week:{object_id}:regular")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"create_timeslot:{object_id}"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_create_additional_slot(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º-—Å–ª–æ—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    obj_data = object_service.get_object_by_id(object_id)
    
    message = f"‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º-—Å–ª–æ—Ç–∞</b>\n\n"
    message += f"üè¢ <b>–û–±—ä–µ–∫—Ç:</b> {obj_data['name']}\n"
    message += f"‚è∞ <b>–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b> {obj_data.get('working_hours', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    message += "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–π–º-—Å–ª–æ—Ç –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –¥–∞–∂–µ –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞:"
    
    today = date.today()
    
    keyboard = [
        [
            InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data=f"create_slot_date:{object_id}:additional:{today.strftime('%Y-%m-%d')}"),
            InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data=f"create_slot_date:{object_id}:additional:{(today + timedelta(days=1)).strftime('%Y-%m-%d')}")
        ],
        [
            InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data=f"create_slot_custom_date:{object_id}:additional"),
            InlineKeyboardButton("üìÖ –°–æ–∑–¥–∞—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data=f"create_slot_week:{object_id}:additional")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"create_timeslot:{object_id}"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_create_slot_date(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int, slot_type: str, slot_date: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º-—Å–ª–æ—Ç
    result = await time_slot_service.create_timeslot_for_date(
        object_id=object_id,
        slot_date=slot_date,
        is_additional=(slot_type == 'additional')
    )
    
    if result['success']:
        message = f"‚úÖ <b>–¢–∞–π–º-—Å–ª–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
        message += f"üìÖ <b>–î–∞—Ç–∞:</b> {slot_date}\n"
        message += f"üïê <b>–í—Ä–µ–º—è:</b> {result.get('start_time', '09:00')}-{result.get('end_time', '18:00')}\n"
        message += f"üí∞ <b>–°—Ç–∞–≤–∫–∞:</b> {result.get('hourly_rate', 0)}‚ÇΩ/—á–∞—Å\n"
        message += f"üìù <b>–¢–∏–ø:</b> {'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π' if slot_type == 'additional' else '–û–±—ã—á–Ω—ã–π'}\n"
    else:
        message = f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞:</b>\n{result['error']}"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data=f"create_timeslot:{object_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_create_slot_custom_date(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int, slot_type: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    user_state_manager.create_state(
        user_id=query.from_user.id,
        action=UserAction.CREATE_TIMESLOT,
        step=UserStep.INPUT_DATE,
        selected_object_id=object_id,
        data={'slot_type': slot_type}
    )
    
    message = f"üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞</b>\n\n"
    message += f"–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.09.2025)\n"
    message += f"–¢–∏–ø —Å–ª–æ—Ç–∞: {'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π' if slot_type == 'additional' else '–û–±—ã—á–Ω—ã–π'}"
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"create_timeslot:{object_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_create_slot_week(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int, slot_type: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º-—Å–ª–æ—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é
    result = await time_slot_service.create_timeslots_for_week(
        object_id=object_id,
        is_additional=(slot_type == 'additional')
    )
    
    if result['success']:
        message = f"‚úÖ <b>–¢–∞–π–º-—Å–ª–æ—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é —Å–æ–∑–¥–∞–Ω—ã!</b>\n\n"
        message += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–æ —Å–ª–æ—Ç–æ–≤:</b> {result.get('created_count', 0)}\n"
        message += f"üìù <b>–¢–∏–ø:</b> {'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ' if slot_type == 'additional' else '–û–±—ã—á–Ω—ã–µ'}\n"
        message += f"üí∞ <b>–°—Ç–∞–≤–∫–∞:</b> {result.get('hourly_rate', 0)}‚ÇΩ/—á–∞—Å"
    else:
        message = f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤:</b>\n{result['error']}"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data=f"create_timeslot:{object_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_timeslots:{object_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_edit_slot_date(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int, slot_type: str, slot_date: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É."""
    query = update.callback_query
    await query.answer()
    
    message = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞</b>\n\n"
    message += f"üìÖ <b>–î–∞—Ç–∞:</b> {slot_date}\n"
    message += f"üìù <b>–¢–∏–ø:</b> {'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π' if slot_type == 'additional' else '–û–±—ã—á–Ω—ã–π'}\n\n"
    message += "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_timeslots:{object_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_edit_slot_custom_date(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int, slot_type: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    query = update.callback_query
    await query.answer()
    
    message = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞</b>\n\n"
    message += f"üìù <b>–¢–∏–ø:</b> {'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π' if slot_type == 'additional' else '–û–±—ã—á–Ω—ã–π'}\n\n"
    message += "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_timeslots:{object_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_edit_slot_week(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int, slot_type: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é."""
    query = update.callback_query
    await query.answer()
    
    message = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
    message += f"üìù <b>–¢–∏–ø:</b> {'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ' if slot_type == 'additional' else '–û–±—ã—á–Ω—ã–µ'}\n\n"
    message += "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_timeslots:{object_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_delete_slot_date(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int, slot_type: str, slot_date: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É."""
    query = update.callback_query
    await query.answer()
    
    message = f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞</b>\n\n"
    message += f"üìÖ <b>–î–∞—Ç–∞:</b> {slot_date}\n"
    message += f"üìù <b>–¢–∏–ø:</b> {'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π' if slot_type == 'additional' else '–û–±—ã—á–Ω—ã–π'}\n\n"
    message += "–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"delete_timeslots:{object_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_delete_slot_custom_date(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int, slot_type: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    query = update.callback_query
    await query.answer()
    
    message = f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–∞</b>\n\n"
    message += f"üìù <b>–¢–∏–ø:</b> {'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π' if slot_type == 'additional' else '–û–±—ã—á–Ω—ã–π'}\n\n"
    message += "–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"delete_timeslots:{object_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def _handle_delete_slot_week(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: int, slot_type: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é."""
    query = update.callback_query
    await query.answer()
    
    message = f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
    message += f"üìù <b>–¢–∏–ø:</b> {'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ' if slot_type == 'additional' else '–û–±—ã—á–Ω—ã–µ'}\n\n"
    message += "–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"delete_timeslots:{object_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )
