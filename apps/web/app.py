"""
–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ StaffProBot
FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Jinja2 —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏, —Å–º–µ–Ω–∞–º–∏ –∏ –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏
"""

from fastapi import FastAPI, Request, Depends, HTTPException, status
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from contextlib import asynccontextmanager
import uvicorn
import os
from typing import Optional

from core.config.settings import settings
from core.auth.user_manager import UserManager
from apps.web.routes import auth, dashboard, objects, calendar, shifts, reports, contracts, users
from apps.web.services.auth_service import AuthService


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è StaffProBot")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
    from core.cache.redis_cache import cache
    try:
        await cache.connect()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    try:
        await cache.disconnect()
        print("‚úÖ Redis –æ—Ç–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç Redis: {e}")
    
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è StaffProBot")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="StaffProBot Web",
    description="–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏, —Å–º–µ–Ω–∞–º–∏ –∏ –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏",
    version="1.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="apps/web/static"), name="static")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory="apps/web/templates")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
auth_service = AuthService()
user_manager = UserManager()

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
security = HTTPBearer()


async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)) -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞"""
    try:
        token = credentials.credentials
        user_data = await auth_service.verify_token(token)
        return user_data
    except Exception:
        return None


async def require_auth(request: Request, current_user: Optional[dict] = Depends(get_current_user)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not current_user:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        return RedirectResponse(url="/auth/login", status_code=status.HTTP_302_FOUND)
    return current_user


async def require_role(required_role: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async def role_checker(current_user: dict = Depends(require_auth)):
        if current_user.get("role") != required_role:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
            )
        return current_user
    return role_checker


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–∞—à–±–æ—Ä–¥ –∏–ª–∏ –≤—Ö–æ–¥"""
    return templates.TemplateResponse("base.html", {
        "request": request,
        "title": "StaffProBot",
        "page": "home"
    })


# –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
app.include_router(auth.router, prefix="/auth", tags=["–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"])
app.include_router(dashboard.router, prefix="/dashboard", tags=["–î–∞—à–±–æ—Ä–¥"])
app.include_router(objects.router, prefix="/objects", tags=["–û–±—ä–µ–∫—Ç—ã"])
app.include_router(calendar.router, prefix="/calendar", tags=["–ö–∞–ª–µ–Ω–¥–∞—Ä—å"])
app.include_router(shifts.router, prefix="/shifts", tags=["–°–º–µ–Ω—ã"])
app.include_router(reports.router, prefix="/reports", tags=["–û—Ç—á–µ—Ç—ã"])
app.include_router(contracts.router, prefix="/contracts", tags=["–î–æ–≥–æ–≤–æ—Ä—ã"])
app.include_router(users.router, prefix="/users", tags=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])


# API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º
@app.post("/api/send-pin")
async def send_pin_api(request: Request):
    """API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PIN-–∫–æ–¥–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        form_data = await request.form()
        print(f"Form data: {form_data}")
        telegram_id = int(form_data.get("telegram_id", 0))
        print(f"Telegram ID: {telegram_id}")
        
        if not telegram_id:
            raise HTTPException(status_code=400, detail="Telegram ID –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ PIN-–∫–æ–¥–∞
        pin_code = await auth_service.generate_and_send_pin(telegram_id)
        return {"status": "success", "message": "PIN-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram"}
        
    except ValueError as e:
        print(f"ValueError: {e}")
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID")
    except Exception as e:
        print(f"Exception: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/user/{telegram_id}")
async def get_user_by_telegram_id(telegram_id: int):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    try:
        user = await user_manager.get_user_by_telegram_id(telegram_id)
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {
            "id": user.id,
            "telegram_id": user.telegram_id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "role": user.role
        }
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))


# Health check
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return {"status": "healthy", "service": "web"}


if __name__ == "__main__":
    uvicorn.run(
        "apps.web.app:app",
        host="0.0.0.0",
        port=8001,  # –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        reload=True if settings.debug else False
    )
