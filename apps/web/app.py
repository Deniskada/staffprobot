"""
–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ StaffProBot
FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Jinja2 —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏, —Å–º–µ–Ω–∞–º–∏ –∏ –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏
"""

from fastapi import FastAPI, Request, Depends, HTTPException, status
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from contextlib import asynccontextmanager
import uvicorn
import os
from typing import Optional

from core.config.settings import settings
from core.auth.user_manager import UserManager
from apps.web.routes import auth, dashboard, objects, timeslots, calendar, shifts, reports, contracts, users, employees, templates as templates_routes, contract_templates, profile, admin, owner, employee, manager, test_calendar, notifications, tariffs, user_subscriptions, billing, limits, admin_reports, shared_media, shared_ratings, shared_appeals, shared_reviews, review_reports, moderator, moderator_web, owner_reviews, employee_reviews, manager_reviews
from apps.web.routes.system_settings_api import router as system_settings_router
from apps.web.services.auth_service import AuthService


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è StaffProBot")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
    from core.cache.redis_cache import cache
    try:
        await cache.connect()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from core.database.session import init_database
    try:
        await init_database()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ç–µ–≥–æ–≤
    from apps.web.services.tag_service import TagService
    from core.database.session import get_async_session
    try:
        async with get_async_session() as session:
            tag_service = TagService()
            await tag_service.create_default_tags(session)
        print("‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–µ–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ç–µ–≥–æ–≤: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ URLHelper
    from apps.web.services.system_settings_service import SystemSettingsService
    from core.utils.url_helper import URLHelper
    try:
        async with get_async_session() as session:
            settings_service = SystemSettingsService(session)
            await settings_service.initialize_default_settings()
            URLHelper.set_settings_service(settings_service)
        print("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    try:
        await cache.disconnect()
        print("‚úÖ Redis –æ—Ç–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç Redis: {e}")
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from core.database.session import close_database
    try:
        await close_database()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è StaffProBot")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="StaffProBot Web",
    description="–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏, —Å–º–µ–Ω–∞–º–∏ –∏ –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏",
    version="1.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="apps/web/static"), name="static")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory="apps/web/templates")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
auth_service = AuthService()
user_manager = UserManager()

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
security = HTTPBearer()


async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)) -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞"""
    try:
        token = credentials.credentials
        user_data = await auth_service.verify_token(token)
        return user_data
    except Exception:
        return None


async def require_auth(request: Request, current_user: Optional[dict] = Depends(get_current_user)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not current_user:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        return RedirectResponse(url="/auth/login", status_code=status.HTTP_302_FOUND)
    return current_user


async def require_role(required_role: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async def role_checker(current_user: dict = Depends(require_auth)):
        if current_user.get("role") != required_role:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
            )
        return current_user
    return role_checker


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ª–µ–Ω–¥–∏–Ω–≥ –∏–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–∞—à–±–æ—Ä–¥"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    from apps.web.middleware.auth_middleware import get_current_user
    user_data = await get_current_user(request)
    
    if user_data:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
        return RedirectResponse(url="/dashboard", status_code=status.HTTP_302_FOUND)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–µ–Ω–¥–∏–Ω–≥
    return templates.TemplateResponse("landing.html", {"request": request})


# –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
app.include_router(auth.router, prefix="/auth", tags=["–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"])
app.include_router(dashboard.router, prefix="/dashboard", tags=["–î–∞—à–±–æ—Ä–¥"])
# app.include_router(objects.router, prefix="/objects", tags=["–û–±—ä–µ–∫—Ç—ã"])  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ owner.py
# app.include_router(timeslots.router, prefix="/timeslots", tags=["–¢–∞–π–º-—Å–ª–æ—Ç—ã"])  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ owner.py
# app.include_router(calendar.router, prefix="/calendar", tags=["–ö–∞–ª–µ–Ω–¥–∞—Ä—å"])  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ owner.py
# app.include_router(shifts.router, prefix="/shifts", tags=["–°–º–µ–Ω—ã"])  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ owner.py
# app.include_router(reports.router, prefix="/reports", tags=["–û—Ç—á–µ—Ç—ã"])  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ owner.py
# app.include_router(contracts.router, prefix="/contracts", tags=["–î–æ–≥–æ–≤–æ—Ä—ã"])  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ owner.py
app.include_router(users.router, prefix="/users", tags=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
# app.include_router(employees.router, prefix="/employees", tags=["–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"])  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ owner.py
# app.include_router(templates_routes.router, prefix="/templates", tags=["–®–∞–±–ª–æ–Ω—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"])  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ owner.py
app.include_router(contract_templates.router, prefix="/contract-templates", tags=["–®–∞–±–ª–æ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤"])
# app.include_router(profile.router, tags=["–ü—Ä–æ—Ñ–∏–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞"])  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ owner.py
app.include_router(admin.router, prefix="/admin", tags=["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"])
app.include_router(system_settings_router, tags=["–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"])
app.include_router(tariffs.router, prefix="/admin/tariffs", tags=["–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"])
app.include_router(user_subscriptions.router, prefix="/admin/subscriptions", tags=["–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"])
app.include_router(billing.router, prefix="/admin/billing", tags=["–°–∏—Å—Ç–µ–º–∞ –±–∏–ª–ª–∏–Ω–≥–∞"])
app.include_router(limits.router, prefix="/owner/limits", tags=["–ö–æ–Ω—Ç—Ä–æ–ª—å –ª–∏–º–∏—Ç–æ–≤"])
app.include_router(admin_reports.router, prefix="/admin/reports", tags=["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"])
app.include_router(owner.router, prefix="/owner", tags=["–í–ª–∞–¥–µ–ª–µ—Ü"])
app.include_router(manager.router, tags=["–£–ø—Ä–∞–≤–ª—è—é—â–∏–π"])
app.include_router(test_calendar.router, tags=["–¢–µ—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è"])
app.include_router(employee.router, prefix="/employee", tags=["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"])
app.include_router(notifications.router, prefix="/api/notifications", tags=["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"])
app.include_router(shared_media.router, prefix="/api/media", tags=["–ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã"])
app.include_router(shared_ratings.router, prefix="/api/ratings", tags=["–†–µ–π—Ç–∏–Ω–≥–∏"])
app.include_router(moderator.router, prefix="/moderator/api", tags=["–ú–æ–¥–µ—Ä–∞—Ü–∏—è"])
app.include_router(moderator_web.router, prefix="/moderator", tags=["–ú–æ–¥–µ—Ä–∞—Ü–∏—è - –í–µ–±"])
app.include_router(shared_appeals.router, prefix="/api/appeals", tags=["–û–±–∂–∞–ª–æ–≤–∞–Ω–∏—è"])
app.include_router(shared_reviews.router, prefix="/api/reviews", tags=["–û—Ç–∑—ã–≤—ã"])
app.include_router(review_reports.router, prefix="/api/reports/reviews", tags=["–û—Ç—á–µ—Ç—ã - –û—Ç–∑—ã–≤—ã"])
app.include_router(owner_reviews.router, prefix="/owner", tags=["–í–ª–∞–¥–µ–ª–µ—Ü - –û—Ç–∑—ã–≤—ã"])
app.include_router(employee_reviews.router, prefix="/employee", tags=["–°–æ—Ç—Ä—É–¥–Ω–∏–∫ - –û—Ç–∑—ã–≤—ã"])
app.include_router(manager_reviews.router, prefix="/manager", tags=["–£–ø—Ä–∞–≤–ª—è—é—â–∏–π - –û—Ç–∑—ã–≤—ã"])


# API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º
@app.post("/api/send-pin")
async def send_pin_api(request: Request):
    """API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PIN-–∫–æ–¥–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        form_data = await request.form()
        print(f"Form data: {form_data}")
        telegram_id = int(form_data.get("telegram_id", 0))
        print(f"Telegram ID: {telegram_id}")
        
        if not telegram_id:
            raise HTTPException(status_code=400, detail="Telegram ID –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ PIN-–∫–æ–¥–∞
        pin_code = await auth_service.generate_and_send_pin(telegram_id)
        return {"status": "success", "message": "PIN-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram"}
        
    except ValueError as e:
        print(f"ValueError: {e}")
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID")
    except Exception as e:
        print(f"Exception: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/user/{telegram_id}")
async def get_user_by_telegram_id(telegram_id: int):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    try:
        user = await user_manager.get_user_by_telegram_id(telegram_id)
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {
            "id": user.id,
            "telegram_id": user.telegram_id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "role": user.role
        }
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))


# Health check
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return {"status": "healthy", "service": "web"}


if __name__ == "__main__":
    uvicorn.run(
        "apps.web.app:app",
        host="0.0.0.0",
        port=8001,  # –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        reload=True if settings.debug else False
    )
