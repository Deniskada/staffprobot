"""
–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import jwt
import secrets
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from core.config.settings import settings
from core.cache.cache_service import CacheService

class AuthService:
    """–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ PIN-–∫–æ–¥–∞–º–∏"""
    
    def __init__(self):
        self.cache = CacheService()
        self.secret_key = settings.secret_key
        self.algorithm = "HS256"
        self.token_expire_minutes = settings.jwt_expire_minutes
    
    async def create_token(self, user_data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        expire = datetime.utcnow() + timedelta(minutes=self.token_expire_minutes)
        
        payload = {
            "sub": str(user_data["id"]),
            "telegram_id": user_data["telegram_id"],
            "username": user_data.get("username"),
            "first_name": user_data["first_name"],
            "last_name": user_data.get("last_name"),
            "role": user_data["role"],
            "exp": expire,
            "iat": datetime.utcnow()
        }
        
        token = jwt.encode(payload, self.secret_key, algorithm=self.algorithm)
        return token
    
    async def verify_token(self, token: str) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞"""
        try:
            payload = jwt.decode(token, self.secret_key, algorithms=[self.algorithm])
            return {
                "id": int(payload["sub"]),
                "telegram_id": payload["telegram_id"],
                "username": payload.get("username"),
                "first_name": payload["first_name"],
                "last_name": payload.get("last_name"),
                "role": payload["role"]
            }
        except jwt.ExpiredSignatureError:
            return None
        except jwt.InvalidTokenError:
            return None
    
    async def generate_and_send_pin(self, telegram_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ PIN-–∫–æ–¥–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ PIN-–∫–æ–¥–∞
        pin_code = f"{secrets.randbelow(1000000):06d}"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PIN-–∫–æ–¥–∞ –≤ –∫—ç—à–µ (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç)
        await self.store_pin(telegram_id, pin_code, ttl=300)
        
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PIN-–∫–æ–¥–∞
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        print(f"üîê PIN-–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {pin_code}")
        
        return pin_code
    
    async def store_pin(self, telegram_id: int, pin_code: str, ttl: int = 300) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PIN-–∫–æ–¥–∞ –≤ –∫—ç—à–µ"""
        key = f"pin:{telegram_id}"
        await self.cache.set(key, pin_code, ttl=ttl)
    
    async def verify_pin(self, telegram_id: int, pin_code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ PIN-–∫–æ–¥–∞"""
        key = f"pin:{telegram_id}"
        stored_pin = await self.cache.get(key)
        
        if not stored_pin:
            return False
        
        # –£–¥–∞–ª—è–µ–º PIN-–∫–æ–¥ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)
        await self.cache.delete(key)
        
        return stored_pin == pin_code
    
    async def refresh_token(self, token: str) -> Optional[str]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞"""
        user_data = await self.verify_token(token)
        if not user_data:
            return None
        
        return await self.create_token(user_data)
    
    async def revoke_token(self, token: str) -> None:
        """–û—Ç–∑—ã–≤ JWT —Ç–æ–∫–µ–Ω–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫)"""
        # TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ Redis
        pass
