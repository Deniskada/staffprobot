"""–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–º–µ–Ω–∞—Ö."""

import asyncio
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
from core.logging.logger import logger
from apps.bot.services.schedule_service import ScheduleService
from telegram import Bot
from telegram.error import TelegramError


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–º–µ–Ω–∞—Ö."""
    
    def __init__(self, bot_token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        self.bot = Bot(token=bot_token)
        self.schedule_service = ScheduleService()
        logger.info("NotificationService initialized")
    
    async def send_shift_reminder(
        self,
        user_telegram_id: int,
        user_name: str,
        object_name: str,
        formatted_time_range: str,
        planned_start: datetime,
        time_until_start: timedelta
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π —Å–º–µ–Ω–µ.
        
        Args:
            user_telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            object_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
            formatted_time_range: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã
            planned_start: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
            time_until_start: –í—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
            
        Returns:
            –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
            total_minutes = int(time_until_start.total_seconds() / 60)
            hours = total_minutes // 60
            minutes = total_minutes % 60
            
            if hours > 0:
                time_str = f"{hours} —á. {minutes} –º–∏–Ω."
            else:
                time_str = f"{minutes} –º–∏–Ω."
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–º–µ–Ω–µ!</b>\n\n"
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
                f"üè¢ –û–±—ä–µ–∫—Ç: <b>{object_name}</b>\n"
                f"üìÖ –í—Ä–µ–º—è: <b>{formatted_time_range}</b>\n"
                f"‚è± –ù–∞—á–∞–ª–æ —á–µ—Ä–µ–∑: <b>{time_str}</b>\n\n"
                f"üìç –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç –≤–æ–≤—Ä–µ–º—è!\n"
                f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=user_telegram_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(
                f"Shift reminder sent successfully: user={user_telegram_id}, "
                f"object={object_name}, start={planned_start}"
            )
            
            return True
            
        except TelegramError as e:
            logger.error(
                f"Failed to send shift reminder to user {user_telegram_id}: {e}"
            )
            return False
        except Exception as e:
            logger.error(
                f"Unexpected error sending shift reminder: {e}"
            )
            return False
    
    async def process_pending_reminders(self, hours_before: int = 2) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
        
        Args:
            hours_before: –ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        """
        try:
            logger.info(f"Processing pending reminders ({hours_before}h before)")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            upcoming_shifts = await self.schedule_service.get_upcoming_shifts_for_reminder(
                hours_before=hours_before
            )
            
            if not upcoming_shifts:
                logger.info("No pending reminders found")
                return {
                    'total_shifts': 0,
                    'sent_successfully': 0,
                    'failed_to_send': 0,
                    'errors': []
                }
            
            logger.info(f"Found {len(upcoming_shifts)} shifts requiring reminders")
            
            sent_successfully = 0
            failed_to_send = 0
            errors = []
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            for shift in upcoming_shifts:
                try:
                    success = await self.send_shift_reminder(
                        user_telegram_id=shift['user_telegram_id'],
                        user_name=shift['user_name'],
                        object_name=shift['object_name'],
                        formatted_time_range=shift['formatted_time_range'],
                        planned_start=shift['planned_start'],
                        time_until_start=shift['time_until_start']
                    )
                    
                    if success:
                        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        await self.schedule_service.mark_notification_sent(
                            shift['schedule_id']
                        )
                        sent_successfully += 1
                    else:
                        failed_to_send += 1
                        errors.append(f"Failed to send to user {shift['user_telegram_id']}")
                        
                except Exception as e:
                    failed_to_send += 1
                    error_msg = f"Error processing shift {shift['schedule_id']}: {str(e)}"
                    errors.append(error_msg)
                    logger.error(error_msg)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.5)
            
            result = {
                'total_shifts': len(upcoming_shifts),
                'sent_successfully': sent_successfully,
                'failed_to_send': failed_to_send,
                'errors': errors
            }
            
            logger.info(
                f"Reminders processing completed: "
                f"total={result['total_shifts']}, "
                f"sent={result['sent_successfully']}, "
                f"failed={result['failed_to_send']}"
            )
            
            return result
            
        except Exception as e:
            logger.error(f"Error processing pending reminders: {e}")
            return {
                'total_shifts': 0,
                'sent_successfully': 0,
                'failed_to_send': 0,
                'errors': [f"Service error: {str(e)}"]
            }
    
    async def send_shift_cancelled_notification(
        self,
        user_telegram_id: int,
        user_name: str,
        object_name: str,
        formatted_time_range: str
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ —Å–º–µ–Ω—ã.
        
        Args:
            user_telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            object_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
            formatted_time_range: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã
            
        Returns:
            –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        try:
            message = (
                f"‚ùå <b>–°–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
                f"üëã {user_name}, –≤–∞—à–∞ —Å–º–µ–Ω–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞:\n\n"
                f"üè¢ –û–±—ä–µ–∫—Ç: <b>{object_name}</b>\n"
                f"üìÖ –í—Ä–µ–º—è: <b>{formatted_time_range}</b>\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
            )
            
            await self.bot.send_message(
                chat_id=user_telegram_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(
                f"Cancellation notification sent: user={user_telegram_id}, "
                f"object={object_name}"
            )
            
            return True
            
        except TelegramError as e:
            logger.error(
                f"Failed to send cancellation notification to user {user_telegram_id}: {e}"
            )
            return False
        except Exception as e:
            logger.error(
                f"Unexpected error sending cancellation notification: {e}"
            )
            return False
    
    async def send_shift_confirmed_notification(
        self,
        user_telegram_id: int,
        user_name: str,
        object_name: str,
        formatted_time_range: str,
        planned_payment: float
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–º–µ–Ω—ã.
        
        Args:
            user_telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            object_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
            formatted_time_range: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã
            planned_payment: –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –æ–ø–ª–∞—Ç–∞
            
        Returns:
            –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        try:
            message = (
                f"‚úÖ <b>–°–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                f"üëã {user_name}, –≤–∞—à–∞ —Å–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:\n\n"
                f"üè¢ –û–±—ä–µ–∫—Ç: <b>{object_name}</b>\n"
                f"üìÖ –í—Ä–µ–º—è: <b>{formatted_time_range}</b>\n"
                f"üí∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –æ–ø–ª–∞—Ç–∞: <b>{planned_payment:.2f}‚ÇΩ</b>\n\n"
                f"üì± –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞.\n"
                f"üìç –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã!"
            )
            
            await self.bot.send_message(
                chat_id=user_telegram_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(
                f"Confirmation notification sent: user={user_telegram_id}, "
                f"object={object_name}"
            )
            
            return True
            
        except TelegramError as e:
            logger.error(
                f"Failed to send confirmation notification to user {user_telegram_id}: {e}"
            )
            return False
        except Exception as e:
            logger.error(
                f"Unexpected error sending confirmation notification: {e}"
            )
            return False
