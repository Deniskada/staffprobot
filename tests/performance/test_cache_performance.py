"""–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""

import asyncio
import time
from apps.web.services.contract_service import ContractService
from apps.web.services.object_service import ObjectService
from core.database.session import get_async_session
from core.cache.redis_cache import cache


async def test_contract_service_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è ContractService"""
    
    print('=== –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ContractService ===')
    
    await cache.connect()
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à
    await cache.clear_pattern("contract_employees:*")
    
    service = ContractService()
    owner_telegram_id = 795156846
    
    # –ó–∞–º–µ—Ä –±–µ–∑ –∫—ç—à–∞ (cache miss)
    print('\n1. –ó–∞–ø—Ä–æ—Å –ë–ï–ó –∫—ç—à–∞ (Cache Miss)...')
    start_time = time.time()
    result1 = await service.get_contract_employees_by_telegram_id(owner_telegram_id)
    time_without_cache = (time.time() - start_time) * 1000  # –º—Å
    print(f'   –í—Ä–µ–º—è: {time_without_cache:.2f} –º—Å')
    print(f'   –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(result1)}')
    
    # –ó–∞–º–µ—Ä —Å –∫—ç—à–µ–º (cache hit)
    print('\n2. –ó–∞–ø—Ä–æ—Å –° –∫—ç—à–µ–º (Cache Hit)...')
    start_time = time.time()
    result2 = await service.get_contract_employees_by_telegram_id(owner_telegram_id)
    time_with_cache = (time.time() - start_time) * 1000  # –º—Å
    print(f'   –í—Ä–µ–º—è: {time_with_cache:.2f} –º—Å')
    print(f'   –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(result2)}')
    
    # –†–∞—Å—á–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è
    if time_with_cache > 0:
        speedup = ((time_without_cache - time_with_cache) / time_without_cache) * 100
        print(f'\nüìä –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}%')
        
        if speedup >= 20:
            print('   ‚úÖ –¶–µ–ª–µ–≤–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ (>20%)')
        else:
            print(f'   ‚ö†Ô∏è –£—Å–∫–æ—Ä–µ–Ω–∏–µ –º–µ–Ω—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ 20% (–ø–æ–ª—É—á–µ–Ω–æ {speedup:.1f}%)')
    
    # –°—Ä–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å —Å –∫—ç—à–µ–º (10 —Ä–∞–∑)
    print('\n3. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å –∫—ç—à–µ–º (10 –∑–∞–ø—Ä–æ—Å–æ–≤)...')
    times = []
    for i in range(10):
        start = time.time()
        await service.get_contract_employees_by_telegram_id(owner_telegram_id)
        times.append((time.time() - start) * 1000)
    
    avg_time = sum(times) / len(times)
    print(f'   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f} –º—Å')
    print(f'   –ú–∏–Ω: {min(times):.2f} –º—Å')
    print(f'   –ú–∞–∫—Å: {max(times):.2f} –º—Å')
    
    await cache.disconnect()
    print('\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ContractService –∑–∞–≤–µ—Ä—à–µ–Ω')


async def test_object_service_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è ObjectService"""
    
    print('\n=== –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ObjectService ===')
    
    await cache.connect()
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à
    await cache.clear_pattern("objects_by_owner:*")
    
    owner_telegram_id = 795156846
    
    async with get_async_session() as session:
        service = ObjectService(session)
        
        # –ó–∞–º–µ—Ä –±–µ–∑ –∫—ç—à–∞
        print('\n1. –ó–∞–ø—Ä–æ—Å –ë–ï–ó –∫—ç—à–∞ (Cache Miss)...')
        start_time = time.time()
        result1 = await service.get_objects_by_owner(owner_telegram_id)
        time_without_cache = (time.time() - start_time) * 1000
        print(f'   –í—Ä–µ–º—è: {time_without_cache:.2f} –º—Å')
        print(f'   –û–±—ä–µ–∫—Ç–æ–≤: {len(result1)}')
        
        # –ó–∞–º–µ—Ä —Å –∫—ç—à–µ–º
        print('\n2. –ó–∞–ø—Ä–æ—Å –° –∫—ç—à–µ–º (Cache Hit)...')
        start_time = time.time()
        result2 = await service.get_objects_by_owner(owner_telegram_id)
        time_with_cache = (time.time() - start_time) * 1000
        print(f'   –í—Ä–µ–º—è: {time_with_cache:.2f} –º—Å')
        print(f'   –û–±—ä–µ–∫—Ç–æ–≤: {len(result2)}')
        
        # –†–∞—Å—á–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è
        if time_with_cache > 0:
            speedup = ((time_without_cache - time_with_cache) / time_without_cache) * 100
            print(f'\nüìä –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}%')
            
            if speedup >= 20:
                print('   ‚úÖ –¶–µ–ª–µ–≤–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ (>20%)')
            else:
                print(f'   ‚ö†Ô∏è –£—Å–∫–æ—Ä–µ–Ω–∏–µ –º–µ–Ω—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ (–ø–æ–ª—É—á–µ–Ω–æ {speedup:.1f}%)')
    
    await cache.disconnect()
    print('\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ObjectService –∑–∞–≤–µ—Ä—à–µ–Ω')


if __name__ == "__main__":
    print('='*60)
    asyncio.run(test_contract_service_performance())
    print('='*60)
    asyncio.run(test_object_service_performance())
    print('='*60)

