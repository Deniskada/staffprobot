"""Baseline —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–î–û –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)"""

import asyncio
import time
from datetime import date, timedelta
from shared.services.calendar_filter_service import CalendarFilterService
from core.database.session import get_async_session
from core.cache.redis_cache import cache


async def test_calendar_performance_baseline():
    """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –î–û –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print('='*80)
    print('BASELINE: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –î–û –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏')
    print('='*80)
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
    await cache.connect()
    await cache.clear_pattern("*")
    await cache.disconnect()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    owner_telegram_id = 795156846
    user_role = "owner"
    
    # –ü–µ—Ä–∏–æ–¥: —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    today = date.today()
    start_date = date(today.year, today.month, 1)
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    if today.month == 12:
        end_date = date(today.year + 1, 1, 1) - timedelta(days=1)
    else:
        end_date = date(today.year, today.month + 1, 1) - timedelta(days=1)
    
    print(f'\n–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date} ({(end_date - start_date).days + 1} –¥–Ω–µ–π)')
    
    async with get_async_session() as session:
        service = CalendarFilterService(session)
        
        # –¢–µ—Å—Ç 1: –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è 1 –æ–±—ä–µ–∫—Ç–∞
        print('\n--- –¢–µ—Å—Ç 1: 1 –æ–±—ä–µ–∫—Ç ---')
        start_time = time.time()
        calendar_1 = await service.get_calendar_data(
            user_telegram_id=owner_telegram_id,
            user_role=user_role,
            date_range_start=start_date,
            date_range_end=end_date,
            object_filter=None  # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        )
        time_1_obj = (time.time() - start_time) * 1000
        
        print(f'–í—Ä–µ–º—è: {time_1_obj:.2f} –º—Å')
        print(f'–û–±—ä–µ–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(calendar_1.accessible_objects)}')
        print(f'–¢–∞–π–º-—Å–ª–æ—Ç–æ–≤: {calendar_1.total_timeslots}')
        print(f'–°–º–µ–Ω: {calendar_1.total_shifts}')
        
        # –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–ø—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
        print('\n--- –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å ---')
        start_time = time.time()
        calendar_2 = await service.get_calendar_data(
            user_telegram_id=owner_telegram_id,
            user_role=user_role,
            date_range_start=start_date,
            date_range_end=end_date,
            object_filter=None
        )
        time_2_req = (time.time() - start_time) * 1000
        
        print(f'–í—Ä–µ–º—è: {time_2_req:.2f} –º—Å')
        
        # –ï—Å—Ç—å –ª–∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ?
        if time_2_req < time_1_obj:
            speedup = ((time_1_obj - time_2_req) / time_1_obj) * 100
            print(f'–£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}% (–∫–∞–∫–æ–µ-—Ç–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å—Ç—å)')
        else:
            print('–£—Å–∫–æ—Ä–µ–Ω–∏—è –Ω–µ—Ç (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)')
        
        # –¢–µ—Å—Ç 3: –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü (–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
        print('\n--- –¢–µ—Å—Ç 3: –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü ---')
        next_month_start = end_date + timedelta(days=1)
        next_month_end = next_month_start + timedelta(days=30)
        
        start_time = time.time()
        calendar_3 = await service.get_calendar_data(
            user_telegram_id=owner_telegram_id,
            user_role=user_role,
            date_range_start=next_month_start,
            date_range_end=next_month_end,
            object_filter=None
        )
        time_next_month = (time.time() - start_time) * 1000
        
        print(f'–í—Ä–µ–º—è: {time_next_month:.2f} –º—Å')
        print(f'–¢–∞–π–º-—Å–ª–æ—Ç–æ–≤: {calendar_3.total_timeslots}')
        
    print('\n' + '='*80)
    print('–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ BASELINE:')
    print('='*80)
    print(f'–ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü): {time_1_obj:.2f} –º—Å')
    print(f'–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {time_2_req:.2f} –º—Å')
    print(f'–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü: {time_next_month:.2f} –º—Å')
    print(f'–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {(time_1_obj + time_2_req + time_next_month) / 3:.2f} –º—Å')
    print('='*80)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    results = {
        'first_load': time_1_obj,
        'second_load': time_2_req,
        'next_month': time_next_month,
        'average': (time_1_obj + time_2_req + time_next_month) / 3,
        'accessible_objects': len(calendar_1.accessible_objects),
        'total_timeslots': calendar_1.total_timeslots,
        'total_shifts': calendar_1.total_shifts
    }
    
    return results


if __name__ == "__main__":
    results = asyncio.run(test_calendar_performance_baseline())
    
    print('\nüìä –¶–µ–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:')
    print(f'  - –£—Å–∫–æ—Ä–µ–Ω–∏–µ: >80%')
    print(f'  - –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: <{results["average"] * 0.2:.2f} –º—Å')
    print(f'  - –¢–µ–∫—É—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: {results["average"]:.2f} –º—Å')

