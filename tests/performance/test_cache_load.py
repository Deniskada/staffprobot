"""–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã Redis –∫—ç—à–∞ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö"""

import asyncio
import time
from apps.web.services.contract_service import ContractService
from core.cache.redis_cache import cache


async def test_high_load_caching():
    """–¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫—ç—à–∞ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ"""
    
    print('=== –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç Redis –∫—ç—à–∞ ===')
    
    await cache.connect()
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à
    await cache.clear_pattern("*")
    
    service = ContractService()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print('\n1. –°–∏–º—É–ª—è—Ü–∏—è 50 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...')
    
    async def make_request(user_id):
        """–û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        start = time.time()
        result = await service.get_contract_employees_by_telegram_id(user_id)
        elapsed = (time.time() - start) * 1000
        return elapsed, len(result)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ telegram_id
    user_ids = [795156846 + i for i in range(50)]
    
    # –ü–µ—Ä–≤–∞—è –≤–æ–ª–Ω–∞ - cache miss –¥–ª—è –≤—Å–µ—Ö
    start_total = time.time()
    tasks = [make_request(uid) for uid in user_ids]
    results = await asyncio.gather(*tasks)
    total_time_miss = (time.time() - start_total) * 1000
    
    avg_time_miss = sum(r[0] for r in results) / len(results)
    print(f'   Cache Miss:')
    print(f'   - –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time_miss:.2f} –º—Å')
    print(f'   - –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å: {avg_time_miss:.2f} –º—Å')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –≤ Redis
    all_keys = await cache.keys("*")
    print(f'   - –ö–ª—é—á–µ–π –≤ Redis: {len(all_keys)}')
    
    # –í—Ç–æ—Ä–∞—è –≤–æ–ª–Ω–∞ - cache hit –¥–ª—è –≤—Å–µ—Ö
    print('\n2. –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ 50 –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–∑ –∫—ç—à–∞)...')
    start_total = time.time()
    tasks = [make_request(uid) for uid in user_ids]
    results_cached = await asyncio.gather(*tasks)
    total_time_hit = (time.time() - start_total) * 1000
    
    avg_time_hit = sum(r[0] for r in results_cached) / len(results_cached)
    print(f'   Cache Hit:')
    print(f'   - –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time_hit:.2f} –º—Å')
    print(f'   - –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å: {avg_time_hit:.2f} –º—Å')
    
    # –†–∞—Å—á–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è
    speedup = ((total_time_miss - total_time_hit) / total_time_miss) * 100
    print(f'\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:')
    print(f'   - –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {speedup:.1f}%')
    print(f'   - –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {((avg_time_miss - avg_time_hit) / avg_time_miss * 100):.1f}%')
    
    if speedup >= 50:
        print('   ‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –£—Å–∫–æ—Ä–µ–Ω–∏–µ >50%')
    elif speedup >= 20:
        print('   ‚úÖ –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –£—Å–∫–æ—Ä–µ–Ω–∏–µ >20%')
    else:
        print(f'   ‚ö†Ô∏è –£—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ ({speedup:.1f}%)')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Redis
    print('\n3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–∫–∏...')
    stats = await cache.get_stats()
    print(f'   - Hits: {stats.get("keyspace_hits")}')
    print(f'   - Misses: {stats.get("keyspace_misses")}')
    print(f'   - Hit Rate: {stats.get("hit_rate")}%')
    print(f'   - Memory: {stats.get("used_memory_human")}')
    
    await cache.disconnect()
    print('\n‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω')


if __name__ == "__main__":
    print('='*60)
    asyncio.run(test_high_load_caching())
    print('='*60)

