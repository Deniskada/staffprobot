"""–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–¥–µ."""

import asyncio
from datetime import date
from sqlalchemy import select

from core.database.session import get_async_session
from domain.entities.payment_schedule import PaymentSchedule
from shared.services.user_service import get_user_id_from_telegram_id


async def manual_recalculate(target_date_str: str, owner_telegram_id: int):
    """
    –í—Ä—É—á–Ω—É—é –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ—Å—á—ë—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π.
    
    Args:
        target_date_str: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        owner_telegram_id: Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
    """
    target_date_obj = date.fromisoformat(target_date_str)
    
    async with get_async_session() as session:
        # –ü–æ–ª—É—á–∏—Ç—å user_id –≤–ª–∞–¥–µ–ª—å—Ü–∞
        owner_id = await get_user_id_from_telegram_id(owner_telegram_id, session)
        if not owner_id:
            print(f"‚ùå –í–ª–∞–¥–µ–ª–µ—Ü —Å telegram_id={owner_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"‚úÖ Owner ID: {owner_id}, target_date: {target_date_obj}")
        
        # –ò–º–ø–æ—Ä—Ç –ª–æ–≥–∏–∫–∏ –∏–∑ payroll.py
        from apps.web.routes.payroll import owner_payroll_manual_recalculate
        from core.config.settings import settings
        from fastapi import Request
        from starlette.datastructures import FormData
        
        # –≠–º—É–ª–∏—Ä—É–µ–º Request
        class FakeRequest:
            pass
        
        request = FakeRequest()
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
        from core.celery.tasks.payroll_tasks import _get_payment_period_for_date
        from shared.services.payroll_adjustment_service import PayrollAdjustmentService
        from domain.entities.object import Object
        from domain.entities.contract import Contract
        from domain.entities.payroll_entry import PayrollEntry
        from domain.entities.payroll_adjustment import PayrollAdjustment
        from sqlalchemy import and_, or_, cast
        from sqlalchemy.dialects.postgresql import JSONB
        from decimal import Decimal
        from core.logging.logger import logger
        
        # –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ payment_schedules –≤–ª–∞–¥–µ–ª—å—Ü–∞
        schedules_query = select(PaymentSchedule).where(
            PaymentSchedule.owner_id == owner_id,
            PaymentSchedule.is_active == True
        )
        schedules_result = await session.execute(schedules_query)
        schedules = schedules_result.scalars().all()
        
        print(f"üìã Found {len(schedules)} active schedules")
        
        total_entries = 0
        total_adjustments = 0
        
        for schedule in schedules:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω—è –≤—ã–ø–ª–∞—Ç—ã
            payment_period = await _get_payment_period_for_date(schedule, target_date_obj)
            
            if not payment_period:
                print(f"‚è≠Ô∏è  Schedule {schedule.id} ({schedule.name}): not a payment day")
                continue
            
            period_start = payment_period['period_start']
            period_end = payment_period['period_end']
            
            print(f"‚úÖ Schedule {schedule.id} ({schedule.name}): period {period_start} ‚Üí {period_end}")
            
            # –ù–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞
            objects_query = select(Object).where(
                Object.is_active == True,
                Object.owner_id == owner_id
            )
            objects_result = await session.execute(objects_query)
            objects = objects_result.scalars().all()
            
            print(f"   üì¶ Found {len(objects)} objects")
            
            for obj in objects:
                # –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (–≤–∫–ª—é—á–∞—è terminated + settlement_policy='schedule')
                contracts_query = select(Contract).where(
                    and_(
                        Contract.allowed_objects.isnot(None),
                        cast(Contract.allowed_objects, JSONB).op('@>')(cast([obj.id], JSONB)),
                        or_(
                            Contract.status == 'active',  # –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ
                            and_(
                                Contract.status == 'terminated',
                                Contract.settlement_policy == 'schedule'
                            )
                        )
                    )
                )
                contracts_result = await session.execute(contracts_query)
                contracts = contracts_result.scalars().all()
                
                if not contracts:
                    continue
                
                print(f"      üë• Object {obj.id} ({obj.name}): {len(contracts)} contracts")
                
                for contract in contracts:
                    adjustment_service = PayrollAdjustmentService(session)
                    
                    # –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ adjustments –∑–∞ –ø–µ—Ä–∏–æ–¥
                    adjustments = await adjustment_service.get_unapplied_adjustments(
                        employee_id=contract.employee_id,
                        period_start=period_start,
                        period_end=period_end
                    )
                    
                    if not adjustments:
                        print(f"         ‚ö™ Employee {contract.employee_id}: no adjustments")
                        continue
                    
                    print(f"         ‚úÖ Employee {contract.employee_id}: {len(adjustments)} adjustments ‚Üí creating entry")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
                    existing_entry_query = select(PayrollEntry).where(
                        PayrollEntry.employee_id == contract.employee_id,
                        PayrollEntry.period_start == period_start,
                        PayrollEntry.period_end == period_end,
                        PayrollEntry.object_id == obj.id
                    )
                    existing_entry_result = await session.execute(existing_entry_query)
                    existing_entry = existing_entry_result.scalar_one_or_none()
                    
                    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—ã
                    gross = Decimal('0')
                    bonuses = Decimal('0')
                    deductions = Decimal('0')
                    
                    for adj in adjustments:
                        amount = Decimal(str(adj.amount))
                        if adj.adjustment_type == 'shift_base':
                            gross += amount
                        elif amount > 0:
                            bonuses += amount
                        else:
                            deductions += abs(amount)
                    
                    net = gross + bonuses - deductions
                    
                    if existing_entry:
                        print(f"            ‚ôªÔ∏è  Updating existing entry {existing_entry.id}")
                        existing_entry.gross_amount = float(gross)
                        existing_entry.total_bonuses = float(bonuses)
                        existing_entry.total_deductions = float(deductions)
                        existing_entry.net_amount = float(net)
                    else:
                        print(f"            ‚ûï Creating new entry")
                        entry = PayrollEntry(
                            employee_id=contract.employee_id,
                            contract_id=contract.id,
                            object_id=obj.id,
                            period_start=period_start,
                            period_end=period_end,
                            gross_amount=float(gross),
                            total_bonuses=float(bonuses),
                            total_deductions=float(deductions),
                            net_amount=float(net),
                            hours_worked=0.0,  # –†–∞—Å—Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ
                            hourly_rate=float(obj.hourly_rate) if obj.hourly_rate else 200.0
                        )
                        session.add(entry)
                        await session.flush()
                        existing_entry = entry
                        total_entries += 1
                    
                    # –û—Ç–º–µ—Ç–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞–∫ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ
                    for adj in adjustments:
                        adj.payroll_entry_id = existing_entry.id
                        adj.is_applied = True
                        total_adjustments += 1
        
        await session.commit()
        print(f"\n‚úÖ –ò–¢–û–ì–û: {total_entries} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π, {total_adjustments} –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫")


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) < 3:
        print("Usage: python manual_recalculate_prod.py <date> <owner_telegram_id>")
        print("Example: python manual_recalculate_prod.py 2025-10-25 1170536174")
        sys.exit(1)
    
    target_date = sys.argv[1]
    owner_tg_id = int(sys.argv[2])
    
    asyncio.run(manual_recalculate(target_date, owner_tg_id))

