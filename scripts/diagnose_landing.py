#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –ª–µ–Ω–¥–∏–Ω–≥–æ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
"""

import asyncio
import aiohttp
import sys
import json
from datetime import datetime
from pathlib import Path
import subprocess
import os

class LandingDiagnostic:
    def __init__(self, base_url: str):
        self.base_url = base_url.rstrip('/')
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'base_url': base_url,
            'issues': [],
            'checks': {}
        }
    
    async def check_static_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã...")
        
        static_files = [
            '/static/css/main.css',
            '/static/js/main.js'
        ]
        
        async with aiohttp.ClientSession() as session:
            for file_path in static_files:
                url = f"{self.base_url}{file_path}"
                try:
                    async with session.get(url, timeout=10) as response:
                        if response.status == 200:
                            content_length = len(await response.text())
                            self.results['checks'][f'static_{file_path}'] = {
                                'status': 'OK',
                                'size': content_length,
                                'content_type': response.headers.get('content-type', 'unknown')
                            }
                        else:
                            self.results['issues'].append(f"–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª {file_path} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                            self.results['checks'][f'static_{file_path}'] = {
                                'status': 'ERROR',
                                'http_status': response.status
                            }
                except Exception as e:
                    self.results['issues'].append(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {str(e)}")
                    self.results['checks'][f'static_{file_path}'] = {
                        'status': 'ERROR',
                        'error': str(e)
                    }
    
    async def check_cdn_resources(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CDN —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("üåê –ü—Ä–æ–≤–µ—Ä—è—é CDN —Ä–µ—Å—É—Ä—Å—ã...")
        
        cdn_urls = [
            'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css',
            'https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css',
            'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap'
        ]
        
        async with aiohttp.ClientSession() as session:
            for url in cdn_urls:
                try:
                    async with session.get(url, timeout=10) as response:
                        if response.status == 200:
                            self.results['checks'][f'cdn_{url.split("/")[-1]}'] = {
                                'status': 'OK',
                                'size': len(await response.text())
                            }
                        else:
                            self.results['issues'].append(f"CDN —Ä–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {url} (—Å—Ç–∞—Ç—É—Å: {response.status})")
                except Exception as e:
                    self.results['issues'].append(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CDN —Ä–µ—Å—É—Ä—Å–∞ {url}: {str(e)}")
    
    async def check_landing_page(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        print("üè† –ü—Ä–æ–≤–µ—Ä—è—é –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(self.base_url, timeout=10) as response:
                    if response.status == 200:
                        html_content = await response.text()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        checks = {
                            'has_landing_title': 'StaffProBot - –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º' in html_content,
                            'has_bootstrap_css': 'bootstrap.min.css' in html_content,
                            'has_bootstrap_icons': 'bootstrap-icons' in html_content,
                            'has_google_fonts': 'fonts.googleapis.com' in html_content,
                            'has_custom_css': 'main.css' in html_content,
                            'has_hero_section': 'hero-section' in html_content,
                            'has_entry_cards': 'entry-card' in html_content,
                            'has_gradients': 'gradient' in html_content.lower()
                        }
                        
                        self.results['checks']['landing_page'] = {
                            'status': 'OK',
                            'size': len(html_content),
                            'content_checks': checks
                        }
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
                        if not checks['has_bootstrap_css']:
                            self.results['issues'].append("Bootstrap CSS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML")
                        if not checks['has_custom_css']:
                            self.results['issues'].append("Custom CSS (main.css) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML")
                        if not checks['has_hero_section']:
                            self.results['issues'].append("Hero —Å–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        if not checks['has_entry_cards']:
                            self.results['issues'].append("–ö–∞—Ä—Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                            
                    else:
                        self.results['issues'].append(f"–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status}")
            except Exception as e:
                self.results['issues'].append(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
    
    async def check_docker_containers(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        print("üê≥ –ü—Ä–æ–≤–µ—Ä—è—é Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            result = subprocess.run(['docker', 'ps', '--format', 'json'], 
                                 capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                containers = []
                for line in result.stdout.strip().split('\n'):
                    if line:
                        containers.append(json.loads(line))
                
                web_containers = [c for c in containers if 'staffprobot' in c.get('Names', '') and 'web' in c.get('Names', '')]
                
                if web_containers:
                    container = web_containers[0]
                    self.results['checks']['docker_web'] = {
                        'status': 'OK',
                        'container_id': container['ID'],
                        'state': container['State'],
                        'status': container['Status']
                    }
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                    try:
                        result = subprocess.run([
                            'docker', 'exec', container['ID'], 
                            'ls', '-la', '/app/apps/web/static/css/'
                        ], capture_output=True, text=True, timeout=5)
                        
                        if result.returncode == 0:
                            self.results['checks']['static_files_in_container'] = {
                                'status': 'OK',
                                'files': result.stdout
                            }
                        else:
                            self.results['issues'].append("–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
                    except Exception as e:
                        self.results['issues'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {str(e)}")
                else:
                    self.results['issues'].append("Web –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                self.results['issues'].append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
                
        except Exception as e:
            self.results['issues'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {str(e)}")
    
    def check_nginx_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"""
        print("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Nginx...")
        
        nginx_configs = [
            '/etc/nginx/sites-available/staffprobot',
            '/etc/nginx/conf.d/staffprobot.conf',
            '/etc/nginx/nginx.conf'
        ]
        
        for config_path in nginx_configs:
            if os.path.exists(config_path):
                try:
                    with open(config_path, 'r') as f:
                        content = f.read()
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ location –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
                    has_static_location = 'location /static/' in content
                    has_css_mime = 'text/css' in content
                    
                    self.results['checks']['nginx_config'] = {
                        'status': 'OK',
                        'config_path': config_path,
                        'has_static_location': has_static_location,
                        'has_css_mime': has_css_mime
                    }
                    
                    if not has_static_location:
                        self.results['issues'].append("Nginx: –Ω–µ –Ω–∞–π–¥–µ–Ω location /static/")
                    if not has_css_mime:
                        self.results['issues'].append("Nginx: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω MIME —Ç–∏–ø –¥–ª—è CSS")
                        
                    break
                except Exception as e:
                    self.results['issues'].append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx: {str(e)}")
        else:
            self.results['issues'].append("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞"""
        print("\n" + "="*60)
        print("üìä –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–Å–¢")
        print("="*60)
        
        print(f"üåê URL: {self.base_url}")
        print(f"‚è∞ –í—Ä–µ–º—è: {self.results['timestamp']}")
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {len(self.results['issues'])}")
        
        if self.results['issues']:
            print("\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            for i, issue in enumerate(self.results['issues'], 1):
                print(f"  {i}. {issue}")
        else:
            print("\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò:")
        for check_name, check_data in self.results['checks'].items():
            status_icon = "‚úÖ" if check_data.get('status') == 'OK' else "‚ùå"
            print(f"  {status_icon} {check_name}: {check_data.get('status', 'UNKNOWN')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª
        report_file = f"landing_diagnostic_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {report_file}")
        
        return self.results

async def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python diagnose_landing.py <URL>")
        print("–ü—Ä–∏–º–µ—Ä: python diagnose_landing.py https://yourdomain.com")
        sys.exit(1)
    
    base_url = sys.argv[1]
    diagnostic = LandingDiagnostic(base_url)
    
    print(f"üîç –ó–∞–ø—É—Å–∫–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è {base_url}")
    print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...\n")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await diagnostic.check_landing_page()
    await diagnostic.check_static_files()
    await diagnostic.check_cdn_resources()
    await diagnostic.check_docker_containers()
    diagnostic.check_nginx_config()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    results = diagnostic.generate_report()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if results['issues']:
        print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(results['issues'])} –ø—Ä–æ–±–ª–µ–º")
        sys.exit(1)
    else:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)

if __name__ == "__main__":
    asyncio.run(main())
