"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π StaffProBot.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    docker compose -f docker-compose.dev.yml exec web python scripts/test_notifications.py

–ò–ª–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:
    python scripts/test_notifications.py
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime, timedelta, timezone

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import select
from core.database.session import get_async_session
from core.logging.logger import logger
from domain.entities.user import User
from domain.entities.notification import (
    NotificationType,
    NotificationChannel,
    NotificationPriority,
    NotificationStatus
)
from shared.services.notification_service import NotificationService
from shared.services.notification_dispatcher import NotificationDispatcher


async def get_test_user() -> User | None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        async with get_async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id
            query = select(User).where(User.telegram_id.isnot(None)).limit(1)
            result = await session.execute(query)
            user = result.scalar_one_or_none()
            
            if user:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                print(f"   ID: {user.id}")
                print(f"   –ò–º—è: {user.full_name}")
                print(f"   Telegram ID: {user.telegram_id}")
                print(f"   Email: {user.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
                return user
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                print("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞")
                return None
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


async def test_create_notification(user_id: int) -> None:
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ NotificationService."""
    print("\n" + "="*70)
    print("–¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ NotificationService")
    print("="*70)
    
    try:
        service = NotificationService()
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = await service.create_notification(
            user_id=user_id,
            type=NotificationType.WELCOME,
            channel=NotificationChannel.TELEGRAM,
            title="üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StaffProBot!",
            message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.",
            data={
                "test": True,
                "timestamp": datetime.now(timezone.utc).isoformat()
            },
            priority=NotificationPriority.NORMAL
        )
        
        if notification:
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   ID: {notification.id}")
            print(f"   –¢–∏–ø: {notification.type.value}")
            print(f"   –ö–∞–Ω–∞–ª: {notification.channel.value}")
            print(f"   –°—Ç–∞—Ç—É—Å: {notification.status.value}")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {notification.title}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {notification.message}")
            return notification.id
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


async def test_dispatch_notification(notification_id: int) -> None:
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ NotificationDispatcher."""
    print("\n" + "="*70)
    print("–¢–ï–°–¢ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ NotificationDispatcher")
    print("="*70)
    
    try:
        dispatcher = NotificationDispatcher()
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ID={notification_id}...")
        success = await dispatcher.dispatch_notification(notification_id)
        
        if success:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram, –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def test_scheduled_notification(user_id: int) -> None:
    """–¢–µ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    print("\n" + "="*70)
    print("–¢–ï–°–¢ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    print("="*70)
    
    try:
        service = NotificationService()
        
        # –°–æ–∑–¥–∞—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        scheduled_time = datetime.now(timezone.utc) + timedelta(seconds=30)
        
        notification = await service.create_notification(
            user_id=user_id,
            type=NotificationType.SHIFT_REMINDER,
            channel=NotificationChannel.TELEGRAM,
            title="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–º–µ–Ω–µ",
            message="–≠—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫).",
            data={
                "test": True,
                "scheduled": True
            },
            priority=NotificationPriority.HIGH,
            scheduled_at=scheduled_time
        )
        
        if notification:
            print(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")
            print(f"   ID: {notification.id}")
            print(f"   –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: {scheduled_time.strftime('%H:%M:%S')}")
            print(f"   –°—Ç–∞—Ç—É—Å: {notification.status.value}")
            print("\nüí° –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            print("   await dispatcher.dispatch_scheduled_notifications()")
            return notification.id
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


async def test_get_user_notifications(user_id: int) -> None:
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print("\n" + "="*70)
    print("–¢–ï–°–¢ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("="*70)
    
    try:
        service = NotificationService()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        all_notifications = await service.get_user_notifications(
            user_id=user_id,
            limit=10
        )
        
        print(f"üìä –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(all_notifications)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        unread_count = await service.get_unread_count(user_id)
        print(f"üì¨ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {unread_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if all_notifications:
            print("\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
            for i, notif in enumerate(all_notifications[:5], 1):
                status_emoji = "‚úÖ" if notif.status == NotificationStatus.SENT else "üì§"
                print(f"   {i}. {status_emoji} [{notif.type.value}] {notif.title}")
                print(f"      –°—Ç–∞—Ç—É—Å: {notif.status.value} | –°–æ–∑–¥–∞–Ω–æ: {notif.created_at.strftime('%Y-%m-%d %H:%M')}")
        else:
            print("   (–Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def test_mark_as_read(user_id: int) -> None:
    """–¢–µ—Å—Ç –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ."""
    print("\n" + "="*70)
    print("–¢–ï–°–¢ 5: –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ")
    print("="*70)
    
    try:
        service = NotificationService()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        notifications = await service.get_user_notifications(
            user_id=user_id,
            include_read=False,
            limit=1
        )
        
        if notifications:
            notif = notifications[0]
            print(f"üì¨ –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: {notif.title}")
            
            success = await service.mark_as_read(
                notification_id=notif.id,
                user_id=user_id
            )
            
            if success:
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
        else:
            print("üí° –ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def test_different_notification_types(user_id: int) -> None:
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤."""
    print("\n" + "="*70)
    print("–¢–ï–°–¢ 6: –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤")
    print("="*70)
    
    service = NotificationService()
    dispatcher = NotificationDispatcher()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    test_notifications = [
        {
            "type": NotificationType.SHIFT_REMINDER,
            "title": "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–º–µ–Ω–µ",
            "message": "–í–∞—à–∞ —Å–º–µ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!",
            "priority": NotificationPriority.HIGH
        },
        {
            "type": NotificationType.CONTRACT_SIGNED,
            "title": "üìù –î–æ–≥–æ–≤–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω",
            "message": "–í–∞—à –¥–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
            "priority": NotificationPriority.NORMAL
        },
        {
            "type": NotificationType.REVIEW_RECEIVED,
            "title": "‚≠ê –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤",
            "message": "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ —Å –æ—Ü–µ–Ω–∫–æ–π 5 –∑–≤—ë–∑–¥!",
            "priority": NotificationPriority.LOW
        },
    ]
    
    created_ids = []
    
    for test_data in test_notifications:
        try:
            notification = await service.create_notification(
                user_id=user_id,
                type=test_data["type"],
                channel=NotificationChannel.TELEGRAM,
                title=test_data["title"],
                message=test_data["message"],
                priority=test_data["priority"],
                data={"test": True, "batch": "different_types"}
            )
            
            if notification:
                created_ids.append(notification.id)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: [{test_data['type'].value}] {test_data['title']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {test_data['title']}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if created_ids:
        print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(created_ids)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        for notif_id in created_ids:
            await dispatcher.dispatch_notification(notif_id)
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


async def test_urgent_notification(user_id: int) -> None:
    """–¢–µ—Å—Ç —Å—Ä–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    print("\n" + "="*70)
    print("–¢–ï–°–¢ 7: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    print("="*70)
    
    try:
        service = NotificationService()
        dispatcher = NotificationDispatcher()
        
        notification = await service.create_notification(
            user_id=user_id,
            type=NotificationType.ACCOUNT_SUSPENDED,
            channel=NotificationChannel.TELEGRAM,
            title="üö® –°–†–û–ß–ù–û: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ",
            message="–≠—Ç–æ —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º!",
            priority=NotificationPriority.URGENT,
            data={"test": True, "urgent": True}
        )
        
        if notification:
            print(f"‚úÖ –°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ (ID={notification.id})")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {notification.priority.value}")
            
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
            success = await dispatcher.dispatch_notification(notification.id)
            
            if success:
                print("‚úÖ –°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ä–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def run_all_tests() -> None:
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô STAFFPROBOT")
    print("="*70)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_test_user()
    
    if not user:
        print("\n‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç—ã –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ –∏–ª–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        return
    
    user_id = user.id
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n")
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_id = await test_create_notification(user_id)
    
    # –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if notification_id:
        await test_dispatch_notification(notification_id)
    
    # –¢–µ—Å—Ç 3: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await test_scheduled_notification(user_id)
    
    # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await test_get_user_notifications(user_id)
    
    # –¢–µ—Å—Ç 5: –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
    await test_mark_as_read(user_id)
    
    # –¢–µ—Å—Ç 6: –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await test_different_notification_types(user_id)
    
    # –¢–µ—Å—Ç 7: –°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await test_urgent_notification(user_id)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    await test_get_user_notifications(user_id)
    
    print("\n" + "="*70)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
    print("="*70)
    print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π: docker compose -f docker-compose.dev.yml logs web")


async def interactive_menu() -> None:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤."""
    user = await get_test_user()
    
    if not user:
        return
    
    user_id = user.id
    
    while True:
        print("\n" + "="*70)
        print("üìã –ú–ï–ù–Æ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
        print("="*70)
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
        print("2. –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        print("3. –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        print("4. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        print("5. –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ")
        print("6. –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤")
        print("7. –°–æ–∑–¥–∞—Ç—å —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        print("0. –í—ã—Ö–æ–¥")
        print("="*70)
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-7): ").strip()
        
        if choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        elif choice == "1":
            await run_all_tests()
        elif choice == "2":
            notif_id = await test_create_notification(user_id)
            if notif_id:
                await test_dispatch_notification(notif_id)
        elif choice == "3":
            await test_scheduled_notification(user_id)
        elif choice == "4":
            await test_get_user_notifications(user_id)
        elif choice == "5":
            service = NotificationService()
            count = await service.mark_all_as_read(user_id)
            print(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {count}")
        elif choice == "6":
            await test_different_notification_types(user_id)
        elif choice == "7":
            await test_urgent_notification(user_id)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "--all":
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        asyncio.run(run_all_tests())
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
        asyncio.run(interactive_menu())


if __name__ == "__main__":
    main()

