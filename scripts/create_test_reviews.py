#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
"""

import asyncio
import sys
from sqlalchemy.ext.asyncio import AsyncSession
from core.database.session import get_async_session
from domain.entities.review import Review, ReviewStatus, Rating
from domain.entities.user import User
from domain.entities.object import Object
from domain.entities.contract import Contract
from sqlalchemy import select
import random
from datetime import datetime, timedelta

async def create_test_reviews():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã."""
    async with get_async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_query = select(User)
        users_result = await session.execute(users_query)
        users = users_result.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
        objects_query = select(Object)
        objects_result = await session.execute(objects_query)
        objects = objects_result.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä—ã
        contracts_query = select(Contract)
        contracts_result = await session.execute(contracts_query)
        contracts = contracts_result.scalars().all()
        
        if not users or not objects or not contracts:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {len(objects)} –æ–±—ä–µ–∫—Ç–æ–≤, {len(contracts)} –¥–æ–≥–æ–≤–æ—Ä–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã
        test_reviews = [
            {
                "title": "–û—Ç–ª–∏—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫",
                "content": "–û—á–µ–Ω—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω—ã–π. –í—Å–µ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–æ–≤—Ä–µ–º—è –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–±–æ—Ç—É.",
                "rating": 5.0,
                "target_type": "employee",
                "is_anonymous": False
            },
            {
                "title": "–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã",
                "content": "–£–¥–æ–±–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Ö–æ—Ä–æ—à–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ. –†–µ–∫–æ–º–µ–Ω–¥—É—é —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã.",
                "rating": 4.5,
                "target_type": "object",
                "is_anonymous": True
            },
            {
                "title": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
                "content": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –¥–µ—Ç–∞–ª—è–º.",
                "rating": 4.0,
                "target_type": "employee",
                "is_anonymous": False
            },
            {
                "title": "–£–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã",
                "content": "–û–±—ä–µ–∫—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ —É–¥–æ–±–Ω–æ–º –º–µ—Å—Ç–µ, –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
                "rating": 4.5,
                "target_type": "object",
                "is_anonymous": True
            },
            {
                "title": "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫",
                "content": "–í—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å—Ä–æ–∫ –∏ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º.",
                "rating": 5.0,
                "target_type": "employee",
                "is_anonymous": False
            }
        ]
        
        created_reviews = []
        
        for i, review_data in enumerate(test_reviews):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö
            # –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö
            if review_data["target_type"] == "employee":
                reviewer = random.choice([u for u in users if u.role == "owner"])
                target = random.choice([u for u in users if u.role == "employee"])
            else:
                reviewer = random.choice([u for u in users if u.role == "employee"])
                target = random.choice(objects)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä
            contract = random.choice(contracts)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
            review = Review(
                reviewer_id=reviewer.id,
                target_type=review_data["target_type"],
                target_id=target.id,
                contract_id=contract.id,
                rating=review_data["rating"],
                title=review_data["title"],
                content=review_data["content"],
                status=ReviewStatus.APPROVED.value,
                is_anonymous=review_data["is_anonymous"],
                created_at=datetime.now() - timedelta(days=random.randint(1, 30)),
                published_at=datetime.now() - timedelta(days=random.randint(1, 25))
            )
            
            session.add(review)
            created_reviews.append(review)
        
        await session.commit()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_reviews)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
        await create_ratings(session, created_reviews)
        
        print("üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

async def create_ratings(session: AsyncSession, reviews):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤."""
    from shared.services.rating_service import RatingService
    
    rating_service = RatingService(session)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ —Ü–µ–ª—è–º
    targets = {}
    for review in reviews:
        key = (review.target_type, review.target_id)
        if key not in targets:
            targets[key] = []
        targets[key].append(review)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏
    for (target_type, target_id), target_reviews in targets.items():
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        total_rating = sum(r.rating for r in target_reviews)
        average_rating = total_rating / len(target_reviews)
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        rating = await rating_service.get_or_create_rating(target_type, target_id)
        rating.average_rating = average_rating
        rating.total_reviews = len(target_reviews)
        rating.last_updated = datetime.now()
        
        session.add(rating)
    
    await session.commit()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(targets)} —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")

if __name__ == "__main__":
    asyncio.run(create_test_reviews())
