#!/usr/bin/env python3
"""
–ù–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è main.py –¥–ª—è MVP StaffProBot
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ python-telegram-bot
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    print("üöÄ –ó–∞–ø—É—Å–∫ StaffProBot MVP")
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from core.config.settings import settings
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {settings.app_name}")
        
        from core.logging.logger import logger
        print("‚úÖ –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        if not settings.telegram_bot_token:
            print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å TELEGRAM_BOT_TOKEN")
            return
        
        print("‚úÖ TELEGRAM_BOT_TOKEN –Ω–∞–π–¥–µ–Ω")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
        from apps.bot.bot import StaffProBot
        print("‚úÖ –ú–æ–¥—É–ª–∏ –±–æ—Ç–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = StaffProBot()
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        import asyncio
        
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
            async def run_app():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
                    from core.health.health_check import health_checker
                    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
                    
                    services_ready = await health_checker.wait_for_services(
                        ['postgresql', 'redis'], max_attempts=10, delay=3
                    )
                    
                    if not services_ready:
                        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
                        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–∞–ø—É—â–µ–Ω—ã Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:")
                        print("   docker-compose up -d postgres redis")
                        return
                    
                    print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
                    from core.cache.redis_cache import init_cache
                    await init_cache()
                    print("‚úÖ Redis –∫—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
                    await bot.initialize()
                    print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ polling —Ä–µ–∂–∏–º–µ
                    print("üîÑ –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ...")
                    print("üì± –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram")
                    print("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º polling —á–µ—Ä–µ–∑ start_polling
                    await bot.application.initialize()
                    await bot.application.start()
                    await bot.application.updater.start_polling(
                        allowed_updates=["message", "callback_query"],
                        drop_pending_updates=True
                    )
                    
                    # –ñ–¥–µ–º –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
                    while True:
                        await asyncio.sleep(1)
                    
                except KeyboardInterrupt:
                    print("\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_app: {e}")
                    raise
                finally:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                    try:
                        from core.cache.redis_cache import close_cache
                        await close_cache()
                        print("‚úÖ Redis –∫—ç—à –∑–∞–∫—Ä—ã—Ç")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫—ç—à–∞: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            asyncio.run(run_app())
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        finally:
            # asyncio.run() —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç event loop –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã
            print("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    main()


